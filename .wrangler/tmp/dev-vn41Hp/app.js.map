{
  "version": 3,
  "sources": ["../bundle-UOzg5Y/strip-cf-connecting-ip-header.js", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/_internal/utils.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/internal/perf_hooks/performance.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/perf_hooks.mjs", "../../../node_modules/.pnpm/@cloudflare+unenv-preset@2.3.2_unenv@2.0.0-rc.17_workerd@1.20250525.0/node_modules/@cloudflare/unenv-preset/dist/runtime/polyfill/performance.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/mock/noop.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/console.mjs", "../../../node_modules/.pnpm/@cloudflare+unenv-preset@2.3.2_unenv@2.0.0-rc.17_workerd@1.20250525.0/node_modules/@cloudflare/unenv-preset/dist/runtime/node/console.mjs", "../../../node_modules/.pnpm/wrangler@4.18.0/node_modules/wrangler/_virtual_unenv_global_polyfill-@cloudflare-unenv-preset-node-console", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/internal/process/hrtime.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/internal/tty/write-stream.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/internal/tty/read-stream.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/tty.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/internal/process/node-version.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/internal/process/process.mjs", "../../../node_modules/.pnpm/@cloudflare+unenv-preset@2.3.2_unenv@2.0.0-rc.17_workerd@1.20250525.0/node_modules/@cloudflare/unenv-preset/dist/runtime/node/process.mjs", "../../../node_modules/.pnpm/wrangler@4.18.0/node_modules/wrangler/_virtual_unenv_global_polyfill-@cloudflare-unenv-preset-node-process", "wrangler-modules-watch:wrangler:modules-watch", "../../../node_modules/.pnpm/wrangler@4.18.0/node_modules/wrangler/templates/modules-watch-stub.js", "../../../node_modules/.pnpm/quick-format-unescaped@4.0.4/node_modules/quick-format-unescaped/index.js", "../../../node_modules/.pnpm/pino@9.6.0/node_modules/pino/browser.js", "node-built-in-modules:tty", "../../../node_modules/.pnpm/colorette@2.0.20/node_modules/colorette/index.cjs", "../../../node_modules/.pnpm/wrappy@1.0.2/node_modules/wrappy/wrappy.js", "../../../node_modules/.pnpm/once@1.4.0/node_modules/once/once.js", "../../../node_modules/.pnpm/end-of-stream@1.4.4/node_modules/end-of-stream/index.js", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/internal/fs/promises.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/internal/fs/constants.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/fs/promises.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/internal/fs/classes.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/internal/fs/fs.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/fs.mjs", "node-built-in-modules:fs", "../../../node_modules/.pnpm/pump@3.0.2/node_modules/pump/index.js", "node-built-in-modules:stream", "node-built-in-modules:string_decoder", "../../../node_modules/.pnpm/split2@4.2.0/node_modules/split2/index.js", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/internal/worker_threads/broadcast-channel.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/internal/worker_threads/message-port.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/internal/worker_threads/message-channel.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/internal/worker_threads/worker.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/worker_threads.mjs", "node-built-in-modules:worker_threads", "../../../node_modules/.pnpm/pino-abstract-transport@2.0.0/node_modules/pino-abstract-transport/index.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/constants.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/get-level-label-data.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/colors.js", "node-built-in-modules:events", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/internal/util/legacy-types.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/internal/util/log.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/util.mjs", "../../../node_modules/.pnpm/@cloudflare+unenv-preset@2.3.2_unenv@2.0.0-rc.17_workerd@1.20250525.0/node_modules/@cloudflare/unenv-preset/dist/runtime/node/util.mjs", "node-built-in-modules:util", "node-built-in-modules:path", "../../../node_modules/.pnpm/atomic-sleep@1.0.0/node_modules/atomic-sleep/index.js", "node-built-in-modules:assert", "../../../node_modules/.pnpm/sonic-boom@4.2.0/node_modules/sonic-boom/index.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/noop.js", "../../../node_modules/.pnpm/on-exit-leak-free@2.1.2/node_modules/on-exit-leak-free/index.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/build-safe-sonic-boom.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/is-valid-date.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/create-date.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/split-property-key.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/get-property-value.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/delete-log-property.js", "../../../node_modules/.pnpm/fast-copy@3.0.2/src/utils.ts", "../../../node_modules/.pnpm/fast-copy@3.0.2/src/copier.ts", "../../../node_modules/.pnpm/fast-copy@3.0.2/src/index.ts", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/filter-log.js", "../../../node_modules/.pnpm/dateformat@4.6.3/node_modules/dateformat/lib/dateformat.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/format-time.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/handle-custom-levels-names-opts.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/handle-custom-levels-opts.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/interpret-conditionals.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/is-object.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/join-lines-with-indentation.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/parse-factory-options.js", "../../../node_modules/.pnpm/fast-safe-stringify@2.1.1/node_modules/fast-safe-stringify/index.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/prettify-error.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/prettify-object.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/prettify-error-log.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/prettify-level.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/prettify-message.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/prettify-metadata.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/prettify-time.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/utils/index.js", "../../../node_modules/.pnpm/secure-json-parse@2.7.0/node_modules/secure-json-parse/index.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/lib/pretty.js", "../../../node_modules/.pnpm/pino-pretty@13.0.0/node_modules/pino-pretty/index.js", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/internal/os/constants.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/os.mjs", "node-built-in-modules:os", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/internal/crypto/web.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/internal/crypto/node.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/internal/crypto/constants.mjs", "../../../node_modules/.pnpm/unenv@2.0.0-rc.17/node_modules/unenv/dist/runtime/node/crypto.mjs", "../../../node_modules/.pnpm/@cloudflare+unenv-preset@2.3.2_unenv@2.0.0-rc.17_workerd@1.20250525.0/node_modules/@cloudflare/unenv-preset/dist/runtime/node/crypto.mjs", "node-built-in-modules:crypto", "../../../node_modules/.pnpm/dotenv@16.5.0/node_modules/dotenv/package.json", "../../../node_modules/.pnpm/dotenv@16.5.0/node_modules/dotenv/lib/main.js", "../../../node_modules/.pnpm/dotenv-expand@12.0.2/node_modules/dotenv-expand/lib/main.js", "../../../node_modules/.pnpm/promise-limit@2.7.0/node_modules/promise-limit/index.js", "../bundle-UOzg5Y/middleware-loader.entry.ts", "../bundle-UOzg5Y/middleware-insertion-facade.js", "../../../src/app.ts", "../../../src/lib/config-open-api.ts", "../../../node_modules/.pnpm/@scalar+hono-api-reference@0.8.9_hono@4.7.9/node_modules/@scalar/hono-api-reference/dist/index.js", "../../../node_modules/.pnpm/@scalar+hono-api-reference@0.8.9_hono@4.7.9/node_modules/@scalar/hono-api-reference/dist/scalar.js", "../../../node_modules/.pnpm/@scalar+core@0.2.15/node_modules/@scalar/core/dist/libs/html-rendering/index.js", "../../../node_modules/.pnpm/@scalar+core@0.2.15/node_modules/@scalar/core/dist/libs/html-rendering/html-rendering.js", "../../../package.json", "../../../src/lib/create-app.ts", "../../../node_modules/.pnpm/@hono+zod-openapi@0.19.6_hono@4.7.9_zod@3.24.4/node_modules/@hono/zod-openapi/dist/index.js", "../../../node_modules/.pnpm/@asteasolutions+zod-to-openapi@7.3.0_zod@3.24.4/node_modules/@asteasolutions/zod-to-openapi/dist/index.mjs", "../../../node_modules/.pnpm/@hono+zod-validator@0.5.0_hono@4.7.9_zod@3.24.4/node_modules/@hono/zod-validator/dist/index.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/validator/index.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/validator/validator.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/helper/cookie/index.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/utils/cookie.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/utils/url.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/http-exception.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/utils/buffer.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/utils/crypto.js", "../../../node_modules/.pnpm/zod@3.24.4/node_modules/zod/lib/index.mjs", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/index.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/hono.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/hono-base.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/compose.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/context.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/request.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/utils/body.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/utils/html.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/router.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/utils/constants.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/router/reg-exp-router/index.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/router/reg-exp-router/router.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/router/reg-exp-router/node.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/router/reg-exp-router/trie.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/router/smart-router/index.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/router/smart-router/router.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/router/trie-router/index.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/router/trie-router/router.js", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/router/trie-router/node.js", "../../../node_modules/.pnpm/stoker@1.4.2_@asteasolutions+zod-to-openapi@7.3.0_zod@3.24.4__@hono+zod-openapi@0.19.6__9352b7cb53f8db831df52cf9d06ee829/node_modules/stoker/dist/esm/middlewares/index.js", "../../../node_modules/.pnpm/stoker@1.4.2_@asteasolutions+zod-to-openapi@7.3.0_zod@3.24.4__@hono+zod-openapi@0.19.6__9352b7cb53f8db831df52cf9d06ee829/node_modules/stoker/dist/esm/middlewares/not-found.js", "../../../node_modules/.pnpm/stoker@1.4.2_@asteasolutions+zod-to-openapi@7.3.0_zod@3.24.4__@hono+zod-openapi@0.19.6__9352b7cb53f8db831df52cf9d06ee829/node_modules/stoker/dist/esm/http-status-codes.js", "../../../node_modules/.pnpm/stoker@1.4.2_@asteasolutions+zod-to-openapi@7.3.0_zod@3.24.4__@hono+zod-openapi@0.19.6__9352b7cb53f8db831df52cf9d06ee829/node_modules/stoker/dist/esm/http-status-phrases.js", "../../../node_modules/.pnpm/stoker@1.4.2_@asteasolutions+zod-to-openapi@7.3.0_zod@3.24.4__@hono+zod-openapi@0.19.6__9352b7cb53f8db831df52cf9d06ee829/node_modules/stoker/dist/esm/middlewares/on-error.js", "../../../node_modules/.pnpm/stoker@1.4.2_@asteasolutions+zod-to-openapi@7.3.0_zod@3.24.4__@hono+zod-openapi@0.19.6__9352b7cb53f8db831df52cf9d06ee829/node_modules/stoker/dist/esm/middlewares/serve-emoji-favicon.js", "../../../node_modules/.pnpm/stoker@1.4.2_@asteasolutions+zod-to-openapi@7.3.0_zod@3.24.4__@hono+zod-openapi@0.19.6__9352b7cb53f8db831df52cf9d06ee829/node_modules/stoker/dist/esm/openapi/index.js", "../../../node_modules/.pnpm/stoker@1.4.2_@asteasolutions+zod-to-openapi@7.3.0_zod@3.24.4__@hono+zod-openapi@0.19.6__9352b7cb53f8db831df52cf9d06ee829/node_modules/stoker/dist/esm/openapi/default-hook.js", "../../../node_modules/.pnpm/stoker@1.4.2_@asteasolutions+zod-to-openapi@7.3.0_zod@3.24.4__@hono+zod-openapi@0.19.6__9352b7cb53f8db831df52cf9d06ee829/node_modules/stoker/dist/esm/openapi/helpers/index.js", "../../../node_modules/.pnpm/stoker@1.4.2_@asteasolutions+zod-to-openapi@7.3.0_zod@3.24.4__@hono+zod-openapi@0.19.6__9352b7cb53f8db831df52cf9d06ee829/node_modules/stoker/dist/esm/openapi/helpers/json-content-required.js", "../../../node_modules/.pnpm/stoker@1.4.2_@asteasolutions+zod-to-openapi@7.3.0_zod@3.24.4__@hono+zod-openapi@0.19.6__9352b7cb53f8db831df52cf9d06ee829/node_modules/stoker/dist/esm/openapi/helpers/json-content.js", "../../../node_modules/.pnpm/stoker@1.4.2_@asteasolutions+zod-to-openapi@7.3.0_zod@3.24.4__@hono+zod-openapi@0.19.6__9352b7cb53f8db831df52cf9d06ee829/node_modules/stoker/dist/esm/openapi/schemas/index.js", "../../../node_modules/.pnpm/stoker@1.4.2_@asteasolutions+zod-to-openapi@7.3.0_zod@3.24.4__@hono+zod-openapi@0.19.6__9352b7cb53f8db831df52cf9d06ee829/node_modules/stoker/dist/esm/openapi/schemas/create-error-schema.js", "../../../node_modules/.pnpm/stoker@1.4.2_@asteasolutions+zod-to-openapi@7.3.0_zod@3.24.4__@hono+zod-openapi@0.19.6__9352b7cb53f8db831df52cf9d06ee829/node_modules/stoker/dist/esm/openapi/schemas/create-message-object.js", "../../../node_modules/.pnpm/stoker@1.4.2_@asteasolutions+zod-to-openapi@7.3.0_zod@3.24.4__@hono+zod-openapi@0.19.6__9352b7cb53f8db831df52cf9d06ee829/node_modules/stoker/dist/esm/openapi/schemas/id-params.js", "../../../src/middlewares/pino-logger.ts", "../../../node_modules/.pnpm/hono-pino@0.8.0_hono@4.7.9_pino@9.6.0/node_modules/hono-pino/dist/index.js", "../../../node_modules/.pnpm/defu@6.1.4/node_modules/defu/dist/defu.mjs", "../../../node_modules/.pnpm/hono@4.7.9/node_modules/hono/dist/helper/adapter/index.js", "../../../src/env.ts", "../../../src/routes/index.route.ts", "../../../src/routes/tasks/tasks.index.ts", "../../../src/routes/tasks/tasks.handlers.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/alias.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/column.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/entity.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sql/sql.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/pg-core/columns/enum.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/pg-core/columns/common.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/column-builder.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/pg-core/foreign-keys.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/table.utils.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/tracing-utils.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/pg-core/unique-constraint.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/pg-core/utils/array.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/subquery.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/tracing.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/drizzle-orm/version.js", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/view-common.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/table.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/errors.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/logger.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/query-promise.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/relations.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/pg-core/primary-keys.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/pg-core/table.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/utils.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sql/expressions/conditions.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sql/expressions/select.ts", "../../../src/db/index.ts", "../../../node_modules/.pnpm/@libsql+client@0.15.6/node_modules/@libsql/client/lib-esm/web.js", "../../../node_modules/.pnpm/@libsql+core@0.15.6/node_modules/@libsql/core/lib-esm/api.js", "../../../node_modules/.pnpm/@libsql+core@0.15.6/node_modules/@libsql/core/lib-esm/config.js", "../../../node_modules/.pnpm/@libsql+core@0.15.6/node_modules/@libsql/core/lib-esm/uri.js", "../../../node_modules/.pnpm/@libsql+core@0.15.6/node_modules/@libsql/core/lib-esm/util.js", "../../../node_modules/.pnpm/js-base64@3.7.7/node_modules/js-base64/base64.mjs", "../../../node_modules/.pnpm/@libsql+client@0.15.6/node_modules/@libsql/client/lib-esm/ws.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/index.js", "../../../node_modules/.pnpm/@libsql+isomorphic-ws@0.1.5/node_modules/@libsql/isomorphic-ws/web.mjs", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/ws/client.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/client.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/encoding/index.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/encoding/json/decode.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/errors.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/encoding/json/encode.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/encoding/protobuf/decode.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/encoding/protobuf/util.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/encoding/protobuf/encode.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/id_alloc.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/result.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/value.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/util.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/sql.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/ws/stream.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/queue.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/stream.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/batch.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/stmt.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/describe.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/ws/cursor.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/cursor.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/ws/json_encode.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/shared/json_encode.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/ws/protobuf_encode.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/shared/protobuf_encode.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/ws/json_decode.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/shared/json_decode.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/ws/protobuf_decode.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/shared/protobuf_decode.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/http/client.js", "../../../node_modules/.pnpm/@libsql+isomorphic-fetch@0.3.1/node_modules/@libsql/isomorphic-fetch/web.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/http/stream.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/queue_microtask.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/http/cursor.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/byte_queue.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/http/json_decode.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/http/protobuf_decode.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/http/json_encode.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/http/protobuf_encode.js", "../../../node_modules/.pnpm/@libsql+hrana-client@0.7.0/node_modules/@libsql/hrana-client/lib-esm/libsql_url.js", "../../../node_modules/.pnpm/@libsql+client@0.15.6/node_modules/@libsql/client/lib-esm/hrana.js", "../../../node_modules/.pnpm/@libsql+client@0.15.6/node_modules/@libsql/client/lib-esm/sql_cache.js", "../../../node_modules/.pnpm/@libsql+client@0.15.6/node_modules/@libsql/client/lib-esm/http.js", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/libsql/driver.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/libsql/driver-core.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/db.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/selection-proxy.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/query-builders/delete.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/table.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/columns/all.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/columns/blob.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/columns/common.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/foreign-keys.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/unique-constraint.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/columns/custom.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/columns/integer.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/columns/numeric.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/columns/real.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/columns/text.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/query-builders/insert.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/query-builders/query-builder.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/dialect.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/casing.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/view-base.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/query-builders/select.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/query-builders/query-builder.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/query-builders/update.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/query-builders/count.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/query-builders/query.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/query-builders/raw.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/libsql/session.ts", "../../../node_modules/.pnpm/drizzle-orm@0.43.1_@libsql+client@0.15.6/node_modules/src/sqlite-core/session.ts", "../../../src/db/schema.ts", "../../../node_modules/.pnpm/drizzle-zod@0.7.1_drizzle-orm@0.43.1_@libsql+client@0.15.6__zod@3.24.4/node_modules/src/constants.ts", "../../../node_modules/.pnpm/drizzle-zod@0.7.1_drizzle-orm@0.43.1_@libsql+client@0.15.6__zod@3.24.4/node_modules/src/utils.ts", "../../../node_modules/.pnpm/drizzle-zod@0.7.1_drizzle-orm@0.43.1_@libsql+client@0.15.6__zod@3.24.4/node_modules/src/column.ts", "../../../node_modules/.pnpm/drizzle-zod@0.7.1_drizzle-orm@0.43.1_@libsql+client@0.15.6__zod@3.24.4/node_modules/src/schema.ts", "../../../src/lib/constants.ts", "../../../src/routes/tasks/tasks.routes.ts", "../../../node_modules/.pnpm/wrangler@4.18.0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/.pnpm/wrangler@4.18.0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../../../node_modules/.pnpm/wrangler@4.18.0/node_modules/wrangler/templates/middleware/common.ts"],
  "sourceRoot": "/Users/xiaobing/Code/backend/hono-tasks-api-cloudflare/.wrangler/tmp/dev-vn41Hp",
  "sourcesContent": ["function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "/* @__NO_SIDE_EFFECTS__ */\nexport function rawHeaders(headers) {\n\tconst rawHeaders = [];\n\tfor (const key in headers) {\n\t\tif (Array.isArray(headers[key])) {\n\t\t\tfor (const h of headers[key]) {\n\t\t\t\trawHeaders.push(key, h);\n\t\t\t}\n\t\t} else {\n\t\t\trawHeaders.push(key, headers[key]);\n\t\t}\n\t}\n\treturn rawHeaders;\n}\n/* @__NO_SIDE_EFFECTS__ */\nexport function mergeFns(...functions) {\n\treturn function(...args) {\n\t\tfor (const fn of functions) {\n\t\t\tfn(...args);\n\t\t}\n\t};\n}\n/* @__NO_SIDE_EFFECTS__ */\nexport function createNotImplementedError(name) {\n\treturn new Error(`[unenv] ${name} is not implemented yet!`);\n}\n/* @__NO_SIDE_EFFECTS__ */\nexport function notImplemented(name) {\n\tconst fn = () => {\n\t\tthrow createNotImplementedError(name);\n\t};\n\treturn Object.assign(fn, { __unenv__: true });\n}\n/* @__NO_SIDE_EFFECTS__ */\nexport function notImplementedAsync(name) {\n\tconst fn = notImplemented(name);\n\tfn.__promisify__ = () => notImplemented(name + \".__promisify__\");\n\tfn.native = fn;\n\treturn fn;\n}\n/* @__NO_SIDE_EFFECTS__ */\nexport function notImplementedClass(name) {\n\treturn class {\n\t\t__unenv__ = true;\n\t\tconstructor() {\n\t\t\tthrow new Error(`[unenv] ${name} is not implemented yet!`);\n\t\t}\n\t};\n}\n", "import { createNotImplementedError } from \"../../../_internal/utils.mjs\";\nconst _timeOrigin = globalThis.performance?.timeOrigin ?? Date.now();\nconst _performanceNow = globalThis.performance?.now ? globalThis.performance.now.bind(globalThis.performance) : () => Date.now() - _timeOrigin;\nconst nodeTiming = {\n\tname: \"node\",\n\tentryType: \"node\",\n\tstartTime: 0,\n\tduration: 0,\n\tnodeStart: 0,\n\tv8Start: 0,\n\tbootstrapComplete: 0,\n\tenvironment: 0,\n\tloopStart: 0,\n\tloopExit: 0,\n\tidleTime: 0,\n\tuvMetricsInfo: {\n\t\tloopCount: 0,\n\t\tevents: 0,\n\t\teventsWaiting: 0\n\t},\n\tdetail: undefined,\n\ttoJSON() {\n\t\treturn this;\n\t}\n};\nexport class PerformanceEntry {\n\t__unenv__ = true;\n\tdetail;\n\tentryType = \"event\";\n\tname;\n\tstartTime;\n\tconstructor(name, options) {\n\t\tthis.name = name;\n\t\tthis.startTime = options?.startTime || _performanceNow();\n\t\tthis.detail = options?.detail;\n\t}\n\tget duration() {\n\t\treturn _performanceNow() - this.startTime;\n\t}\n\ttoJSON() {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tentryType: this.entryType,\n\t\t\tstartTime: this.startTime,\n\t\t\tduration: this.duration,\n\t\t\tdetail: this.detail\n\t\t};\n\t}\n}\nexport const PerformanceMark = class PerformanceMark extends PerformanceEntry {\n\tentryType = \"mark\";\n\tconstructor() {\n\t\tsuper(...arguments);\n\t}\n\tget duration() {\n\t\treturn 0;\n\t}\n};\nexport class PerformanceMeasure extends PerformanceEntry {\n\tentryType = \"measure\";\n}\nexport class PerformanceResourceTiming extends PerformanceEntry {\n\tentryType = \"resource\";\n\tserverTiming = [];\n\tconnectEnd = 0;\n\tconnectStart = 0;\n\tdecodedBodySize = 0;\n\tdomainLookupEnd = 0;\n\tdomainLookupStart = 0;\n\tencodedBodySize = 0;\n\tfetchStart = 0;\n\tinitiatorType = \"\";\n\tname = \"\";\n\tnextHopProtocol = \"\";\n\tredirectEnd = 0;\n\tredirectStart = 0;\n\trequestStart = 0;\n\tresponseEnd = 0;\n\tresponseStart = 0;\n\tsecureConnectionStart = 0;\n\tstartTime = 0;\n\ttransferSize = 0;\n\tworkerStart = 0;\n\tresponseStatus = 0;\n}\nexport class PerformanceObserverEntryList {\n\t__unenv__ = true;\n\tgetEntries() {\n\t\treturn [];\n\t}\n\tgetEntriesByName(_name, _type) {\n\t\treturn [];\n\t}\n\tgetEntriesByType(type) {\n\t\treturn [];\n\t}\n}\nexport class Performance {\n\t__unenv__ = true;\n\ttimeOrigin = _timeOrigin;\n\teventCounts = new Map();\n\t_entries = [];\n\t_resourceTimingBufferSize = 0;\n\tnavigation = undefined;\n\ttiming = undefined;\n\ttimerify(_fn, _options) {\n\t\tthrow createNotImplementedError(\"Performance.timerify\");\n\t}\n\tget nodeTiming() {\n\t\treturn nodeTiming;\n\t}\n\teventLoopUtilization() {\n\t\treturn {};\n\t}\n\tmarkResourceTiming() {\n\t\treturn new PerformanceResourceTiming(\"\");\n\t}\n\tonresourcetimingbufferfull = null;\n\tnow() {\n\t\tif (this.timeOrigin === _timeOrigin) {\n\t\t\treturn _performanceNow();\n\t\t}\n\t\treturn Date.now() - this.timeOrigin;\n\t}\n\tclearMarks(markName) {\n\t\tthis._entries = markName ? this._entries.filter((e) => e.name !== markName) : this._entries.filter((e) => e.entryType !== \"mark\");\n\t}\n\tclearMeasures(measureName) {\n\t\tthis._entries = measureName ? this._entries.filter((e) => e.name !== measureName) : this._entries.filter((e) => e.entryType !== \"measure\");\n\t}\n\tclearResourceTimings() {\n\t\tthis._entries = this._entries.filter((e) => e.entryType !== \"resource\" || e.entryType !== \"navigation\");\n\t}\n\tgetEntries() {\n\t\treturn this._entries;\n\t}\n\tgetEntriesByName(name, type) {\n\t\treturn this._entries.filter((e) => e.name === name && (!type || e.entryType === type));\n\t}\n\tgetEntriesByType(type) {\n\t\treturn this._entries.filter((e) => e.entryType === type);\n\t}\n\tmark(name, options) {\n\t\tconst entry = new PerformanceMark(name, options);\n\t\tthis._entries.push(entry);\n\t\treturn entry;\n\t}\n\tmeasure(measureName, startOrMeasureOptions, endMark) {\n\t\tlet start;\n\t\tlet end;\n\t\tif (typeof startOrMeasureOptions === \"string\") {\n\t\t\tstart = this.getEntriesByName(startOrMeasureOptions, \"mark\")[0]?.startTime;\n\t\t\tend = this.getEntriesByName(endMark, \"mark\")[0]?.startTime;\n\t\t} else {\n\t\t\tstart = Number.parseFloat(startOrMeasureOptions?.start) || this.now();\n\t\t\tend = Number.parseFloat(startOrMeasureOptions?.end) || this.now();\n\t\t}\n\t\tconst entry = new PerformanceMeasure(measureName, {\n\t\t\tstartTime: start,\n\t\t\tdetail: {\n\t\t\t\tstart,\n\t\t\t\tend\n\t\t\t}\n\t\t});\n\t\tthis._entries.push(entry);\n\t\treturn entry;\n\t}\n\tsetResourceTimingBufferSize(maxSize) {\n\t\tthis._resourceTimingBufferSize = maxSize;\n\t}\n\taddEventListener(type, listener, options) {\n\t\tthrow createNotImplementedError(\"Performance.addEventListener\");\n\t}\n\tremoveEventListener(type, listener, options) {\n\t\tthrow createNotImplementedError(\"Performance.removeEventListener\");\n\t}\n\tdispatchEvent(event) {\n\t\tthrow createNotImplementedError(\"Performance.dispatchEvent\");\n\t}\n\ttoJSON() {\n\t\treturn this;\n\t}\n}\nexport class PerformanceObserver {\n\t__unenv__ = true;\n\tstatic supportedEntryTypes = [];\n\t_callback = null;\n\tconstructor(callback) {\n\t\tthis._callback = callback;\n\t}\n\ttakeRecords() {\n\t\treturn [];\n\t}\n\tdisconnect() {\n\t\tthrow createNotImplementedError(\"PerformanceObserver.disconnect\");\n\t}\n\tobserve(options) {\n\t\tthrow createNotImplementedError(\"PerformanceObserver.observe\");\n\t}\n\tbind(fn) {\n\t\treturn fn;\n\t}\n\trunInAsyncScope(fn, thisArg, ...args) {\n\t\treturn fn.call(thisArg, ...args);\n\t}\n\tasyncId() {\n\t\treturn 0;\n\t}\n\ttriggerAsyncId() {\n\t\treturn 0;\n\t}\n\temitDestroy() {\n\t\treturn this;\n\t}\n}\nexport const performance = globalThis.performance && \"addEventListener\" in globalThis.performance ? globalThis.performance : new Performance();\n", "import { IntervalHistogram, RecordableHistogram } from \"./internal/perf_hooks/histogram.mjs\";\nimport { performance, Performance, PerformanceEntry, PerformanceMark, PerformanceMeasure, PerformanceObserverEntryList, PerformanceObserver, PerformanceResourceTiming } from \"./internal/perf_hooks/performance.mjs\";\nexport * from \"./internal/perf_hooks/performance.mjs\";\nimport { NODE_PERFORMANCE_GC_MAJOR, NODE_PERFORMANCE_GC_MINOR, NODE_PERFORMANCE_GC_INCREMENTAL, NODE_PERFORMANCE_GC_WEAKCB, NODE_PERFORMANCE_GC_FLAGS_NO, NODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED, NODE_PERFORMANCE_GC_FLAGS_FORCED, NODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING, NODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE, NODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY, NODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE, NODE_PERFORMANCE_ENTRY_TYPE_GC, NODE_PERFORMANCE_ENTRY_TYPE_HTTP, NODE_PERFORMANCE_ENTRY_TYPE_HTTP2, NODE_PERFORMANCE_ENTRY_TYPE_NET, NODE_PERFORMANCE_ENTRY_TYPE_DNS, NODE_PERFORMANCE_MILESTONE_TIME_ORIGIN_TIMESTAMP, NODE_PERFORMANCE_MILESTONE_TIME_ORIGIN, NODE_PERFORMANCE_MILESTONE_ENVIRONMENT, NODE_PERFORMANCE_MILESTONE_NODE_START, NODE_PERFORMANCE_MILESTONE_V8_START, NODE_PERFORMANCE_MILESTONE_LOOP_START, NODE_PERFORMANCE_MILESTONE_LOOP_EXIT, NODE_PERFORMANCE_MILESTONE_BOOTSTRAP_COMPLETE } from \"./internal/perf_hooks/constants.mjs\";\nexport const constants = {\n\tNODE_PERFORMANCE_GC_MAJOR,\n\tNODE_PERFORMANCE_GC_MINOR,\n\tNODE_PERFORMANCE_GC_INCREMENTAL,\n\tNODE_PERFORMANCE_GC_WEAKCB,\n\tNODE_PERFORMANCE_GC_FLAGS_NO,\n\tNODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED,\n\tNODE_PERFORMANCE_GC_FLAGS_FORCED,\n\tNODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING,\n\tNODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE,\n\tNODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY,\n\tNODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE,\n\tNODE_PERFORMANCE_ENTRY_TYPE_GC,\n\tNODE_PERFORMANCE_ENTRY_TYPE_HTTP,\n\tNODE_PERFORMANCE_ENTRY_TYPE_HTTP2,\n\tNODE_PERFORMANCE_ENTRY_TYPE_NET,\n\tNODE_PERFORMANCE_ENTRY_TYPE_DNS,\n\tNODE_PERFORMANCE_MILESTONE_TIME_ORIGIN_TIMESTAMP,\n\tNODE_PERFORMANCE_MILESTONE_TIME_ORIGIN,\n\tNODE_PERFORMANCE_MILESTONE_ENVIRONMENT,\n\tNODE_PERFORMANCE_MILESTONE_NODE_START,\n\tNODE_PERFORMANCE_MILESTONE_V8_START,\n\tNODE_PERFORMANCE_MILESTONE_LOOP_START,\n\tNODE_PERFORMANCE_MILESTONE_LOOP_EXIT,\n\tNODE_PERFORMANCE_MILESTONE_BOOTSTRAP_COMPLETE\n};\nexport const monitorEventLoopDelay = function(_options) {\n\treturn new IntervalHistogram();\n};\nexport const createHistogram = function(_options) {\n\treturn new RecordableHistogram();\n};\nexport default {\n\tPerformance,\n\tPerformanceMark,\n\tPerformanceEntry,\n\tPerformanceMeasure,\n\tPerformanceObserverEntryList,\n\tPerformanceObserver,\n\tPerformanceResourceTiming,\n\tperformance,\n\tconstants,\n\tcreateHistogram,\n\tmonitorEventLoopDelay\n};\n", "import {\n  performance,\n  Performance,\n  PerformanceEntry,\n  PerformanceMark,\n  PerformanceMeasure,\n  PerformanceObserver,\n  PerformanceObserverEntryList,\n  PerformanceResourceTiming\n} from \"node:perf_hooks\";\nglobalThis.performance = performance;\nglobalThis.Performance = Performance;\nglobalThis.PerformanceEntry = PerformanceEntry;\nglobalThis.PerformanceMark = PerformanceMark;\nglobalThis.PerformanceMeasure = PerformanceMeasure;\nglobalThis.PerformanceObserver = PerformanceObserver;\nglobalThis.PerformanceObserverEntryList = PerformanceObserverEntryList;\nglobalThis.PerformanceResourceTiming = PerformanceResourceTiming;\n", "export default Object.assign(() => {}, { __unenv__: true });\n", "import { Writable } from \"node:stream\";\nimport noop from \"../mock/noop.mjs\";\nimport { notImplemented, notImplementedClass } from \"../_internal/utils.mjs\";\nconst _console = globalThis.console;\nexport const _ignoreErrors = true;\nexport const _stderr = new Writable();\nexport const _stdout = new Writable();\nexport const log = _console?.log ?? noop;\nexport const info = _console?.info ?? log;\nexport const trace = _console?.trace ?? info;\nexport const debug = _console?.debug ?? log;\nexport const table = _console?.table ?? log;\nexport const error = _console?.error ?? log;\nexport const warn = _console?.warn ?? error;\nexport const createTask = _console?.createTask ?? /* @__PURE__ */ notImplemented(\"console.createTask\");\nexport const assert = /* @__PURE__ */ notImplemented(\"console.assert\");\nexport const clear = _console?.clear ?? noop;\nexport const count = _console?.count ?? noop;\nexport const countReset = _console?.countReset ?? noop;\nexport const dir = _console?.dir ?? noop;\nexport const dirxml = _console?.dirxml ?? noop;\nexport const group = _console?.group ?? noop;\nexport const groupEnd = _console?.groupEnd ?? noop;\nexport const groupCollapsed = _console?.groupCollapsed ?? noop;\nexport const profile = _console?.profile ?? noop;\nexport const profileEnd = _console?.profileEnd ?? noop;\nexport const time = _console?.time ?? noop;\nexport const timeEnd = _console?.timeEnd ?? noop;\nexport const timeLog = _console?.timeLog ?? noop;\nexport const timeStamp = _console?.timeStamp ?? noop;\nexport const Console = _console?.Console ?? /* @__PURE__ */ notImplementedClass(\"console.Console\");\nexport const _times = /* @__PURE__ */ new Map();\nexport function context() {\n\treturn _console;\n}\nexport const _stdoutErrorHandler = noop;\nexport const _stderrErrorHandler = noop;\nexport default {\n\t_times,\n\t_ignoreErrors,\n\t_stdoutErrorHandler,\n\t_stderrErrorHandler,\n\t_stdout,\n\t_stderr,\n\tassert,\n\tclear,\n\tConsole,\n\tcount,\n\tcountReset,\n\tdebug,\n\tdir,\n\tdirxml,\n\terror,\n\tcontext,\n\tcreateTask,\n\tgroup,\n\tgroupEnd,\n\tgroupCollapsed,\n\tinfo,\n\tlog,\n\tprofile,\n\tprofileEnd,\n\ttable,\n\ttime,\n\ttimeEnd,\n\ttimeLog,\n\ttimeStamp,\n\ttrace,\n\twarn\n};\n", "import {\n  _ignoreErrors,\n  _stderr,\n  _stderrErrorHandler,\n  _stdout,\n  _stdoutErrorHandler,\n  _times,\n  Console\n} from \"unenv/node/console\";\nexport {\n  Console,\n  _ignoreErrors,\n  _stderr,\n  _stderrErrorHandler,\n  _stdout,\n  _stdoutErrorHandler,\n  _times\n} from \"unenv/node/console\";\nconst workerdConsole = globalThis[\"console\"];\nexport const {\n  assert,\n  clear,\n  // @ts-expect-error undocumented public API\n  context,\n  count,\n  countReset,\n  // @ts-expect-error undocumented public API\n  createTask,\n  debug,\n  dir,\n  dirxml,\n  error,\n  group,\n  groupCollapsed,\n  groupEnd,\n  info,\n  log,\n  profile,\n  profileEnd,\n  table,\n  time,\n  timeEnd,\n  timeLog,\n  timeStamp,\n  trace,\n  warn\n} = workerdConsole;\nObject.assign(workerdConsole, {\n  Console,\n  _ignoreErrors,\n  _stderr,\n  _stderrErrorHandler,\n  _stdout,\n  _stdoutErrorHandler,\n  _times\n});\nexport default workerdConsole;\n", "import { default as defaultExport } from \"@cloudflare/unenv-preset/node/console\";\nglobalThis.console = defaultExport;", "export const hrtime = /* @__PURE__ */ Object.assign(function hrtime(startTime) {\n\tconst now = Date.now();\n\tconst seconds = Math.trunc(now / 1e3);\n\tconst nanos = now % 1e3 * 1e6;\n\tif (startTime) {\n\t\tlet diffSeconds = seconds - startTime[0];\n\t\tlet diffNanos = nanos - startTime[0];\n\t\tif (diffNanos < 0) {\n\t\t\tdiffSeconds = diffSeconds - 1;\n\t\t\tdiffNanos = 1e9 + diffNanos;\n\t\t}\n\t\treturn [diffSeconds, diffNanos];\n\t}\n\treturn [seconds, nanos];\n}, { bigint: function bigint() {\n\treturn BigInt(Date.now() * 1e6);\n} });\n", "export class WriteStream {\n\tfd;\n\tcolumns = 80;\n\trows = 24;\n\tisTTY = false;\n\tconstructor(fd) {\n\t\tthis.fd = fd;\n\t}\n\tclearLine(dir, callback) {\n\t\tcallback && callback();\n\t\treturn false;\n\t}\n\tclearScreenDown(callback) {\n\t\tcallback && callback();\n\t\treturn false;\n\t}\n\tcursorTo(x, y, callback) {\n\t\tcallback && typeof callback === \"function\" && callback();\n\t\treturn false;\n\t}\n\tmoveCursor(dx, dy, callback) {\n\t\tcallback && callback();\n\t\treturn false;\n\t}\n\tgetColorDepth(env) {\n\t\treturn 1;\n\t}\n\thasColors(count, env) {\n\t\treturn false;\n\t}\n\tgetWindowSize() {\n\t\treturn [this.columns, this.rows];\n\t}\n\twrite(str, encoding, cb) {\n\t\tif (str instanceof Uint8Array) {\n\t\t\tstr = new TextDecoder().decode(str);\n\t\t}\n\t\ttry {\n\t\t\tconsole.log(str);\n\t\t} catch {}\n\t\tcb && typeof cb === \"function\" && cb();\n\t\treturn false;\n\t}\n}\n", "export class ReadStream {\n\tfd;\n\tisRaw = false;\n\tisTTY = false;\n\tconstructor(fd) {\n\t\tthis.fd = fd;\n\t}\n\tsetRawMode(mode) {\n\t\tthis.isRaw = mode;\n\t\treturn this;\n\t}\n}\n", "import { WriteStream } from \"./internal/tty/write-stream.mjs\";\nexport { ReadStream } from \"./internal/tty/read-stream.mjs\";\nexport { WriteStream } from \"./internal/tty/write-stream.mjs\";\nexport const isatty = function() {\n\treturn false;\n};\nexport default {\n\tReadStream: WriteStream,\n\tWriteStream,\n\tisatty\n};\n", "export const NODE_VERSION = \"22.14.0\";\n", "import { EventEmitter } from \"node:events\";\nimport { ReadStream, WriteStream } from \"node:tty\";\nimport { notImplemented, createNotImplementedError } from \"../../../_internal/utils.mjs\";\nimport { NODE_VERSION } from \"./node-version.mjs\";\nexport class Process extends EventEmitter {\n\tenv;\n\thrtime;\n\tnextTick;\n\tconstructor(impl) {\n\t\tsuper();\n\t\tthis.env = impl.env;\n\t\tthis.hrtime = impl.hrtime;\n\t\tthis.nextTick = impl.nextTick;\n\t\tfor (const prop of [...Object.getOwnPropertyNames(Process.prototype), ...Object.getOwnPropertyNames(EventEmitter.prototype)]) {\n\t\t\tconst value = this[prop];\n\t\t\tif (typeof value === \"function\") {\n\t\t\t\tthis[prop] = value.bind(this);\n\t\t\t}\n\t\t}\n\t}\n\temitWarning(warning, type, code) {\n\t\tconsole.warn(`${code ? `[${code}] ` : \"\"}${type ? `${type}: ` : \"\"}${warning}`);\n\t}\n\temit(...args) {\n\t\treturn super.emit(...args);\n\t}\n\tlisteners(eventName) {\n\t\treturn super.listeners(eventName);\n\t}\n\t#stdin;\n\t#stdout;\n\t#stderr;\n\tget stdin() {\n\t\treturn this.#stdin ??= new ReadStream(0);\n\t}\n\tget stdout() {\n\t\treturn this.#stdout ??= new WriteStream(1);\n\t}\n\tget stderr() {\n\t\treturn this.#stderr ??= new WriteStream(2);\n\t}\n\t#cwd = \"/\";\n\tchdir(cwd) {\n\t\tthis.#cwd = cwd;\n\t}\n\tcwd() {\n\t\treturn this.#cwd;\n\t}\n\tarch = \"\";\n\tplatform = \"\";\n\targv = [];\n\targv0 = \"\";\n\texecArgv = [];\n\texecPath = \"\";\n\ttitle = \"\";\n\tpid = 200;\n\tppid = 100;\n\tget version() {\n\t\treturn `v${NODE_VERSION}`;\n\t}\n\tget versions() {\n\t\treturn { node: NODE_VERSION };\n\t}\n\tget allowedNodeEnvironmentFlags() {\n\t\treturn new Set();\n\t}\n\tget sourceMapsEnabled() {\n\t\treturn false;\n\t}\n\tget debugPort() {\n\t\treturn 0;\n\t}\n\tget throwDeprecation() {\n\t\treturn false;\n\t}\n\tget traceDeprecation() {\n\t\treturn false;\n\t}\n\tget features() {\n\t\treturn {};\n\t}\n\tget release() {\n\t\treturn {};\n\t}\n\tget connected() {\n\t\treturn false;\n\t}\n\tget config() {\n\t\treturn {};\n\t}\n\tget moduleLoadList() {\n\t\treturn [];\n\t}\n\tconstrainedMemory() {\n\t\treturn 0;\n\t}\n\tavailableMemory() {\n\t\treturn 0;\n\t}\n\tuptime() {\n\t\treturn 0;\n\t}\n\tresourceUsage() {\n\t\treturn {};\n\t}\n\tref() {}\n\tunref() {}\n\tumask() {\n\t\tthrow createNotImplementedError(\"process.umask\");\n\t}\n\tgetBuiltinModule() {\n\t\treturn undefined;\n\t}\n\tgetActiveResourcesInfo() {\n\t\tthrow createNotImplementedError(\"process.getActiveResourcesInfo\");\n\t}\n\texit() {\n\t\tthrow createNotImplementedError(\"process.exit\");\n\t}\n\treallyExit() {\n\t\tthrow createNotImplementedError(\"process.reallyExit\");\n\t}\n\tkill() {\n\t\tthrow createNotImplementedError(\"process.kill\");\n\t}\n\tabort() {\n\t\tthrow createNotImplementedError(\"process.abort\");\n\t}\n\tdlopen() {\n\t\tthrow createNotImplementedError(\"process.dlopen\");\n\t}\n\tsetSourceMapsEnabled() {\n\t\tthrow createNotImplementedError(\"process.setSourceMapsEnabled\");\n\t}\n\tloadEnvFile() {\n\t\tthrow createNotImplementedError(\"process.loadEnvFile\");\n\t}\n\tdisconnect() {\n\t\tthrow createNotImplementedError(\"process.disconnect\");\n\t}\n\tcpuUsage() {\n\t\tthrow createNotImplementedError(\"process.cpuUsage\");\n\t}\n\tsetUncaughtExceptionCaptureCallback() {\n\t\tthrow createNotImplementedError(\"process.setUncaughtExceptionCaptureCallback\");\n\t}\n\thasUncaughtExceptionCaptureCallback() {\n\t\tthrow createNotImplementedError(\"process.hasUncaughtExceptionCaptureCallback\");\n\t}\n\tinitgroups() {\n\t\tthrow createNotImplementedError(\"process.initgroups\");\n\t}\n\topenStdin() {\n\t\tthrow createNotImplementedError(\"process.openStdin\");\n\t}\n\tassert() {\n\t\tthrow createNotImplementedError(\"process.assert\");\n\t}\n\tbinding() {\n\t\tthrow createNotImplementedError(\"process.binding\");\n\t}\n\tpermission = { has: /* @__PURE__ */ notImplemented(\"process.permission.has\") };\n\treport = {\n\t\tdirectory: \"\",\n\t\tfilename: \"\",\n\t\tsignal: \"SIGUSR2\",\n\t\tcompact: false,\n\t\treportOnFatalError: false,\n\t\treportOnSignal: false,\n\t\treportOnUncaughtException: false,\n\t\tgetReport: /* @__PURE__ */ notImplemented(\"process.report.getReport\"),\n\t\twriteReport: /* @__PURE__ */ notImplemented(\"process.report.writeReport\")\n\t};\n\tfinalization = {\n\t\tregister: /* @__PURE__ */ notImplemented(\"process.finalization.register\"),\n\t\tunregister: /* @__PURE__ */ notImplemented(\"process.finalization.unregister\"),\n\t\tregisterBeforeExit: /* @__PURE__ */ notImplemented(\"process.finalization.registerBeforeExit\")\n\t};\n\tmemoryUsage = Object.assign(() => ({\n\t\tarrayBuffers: 0,\n\t\trss: 0,\n\t\texternal: 0,\n\t\theapTotal: 0,\n\t\theapUsed: 0\n\t}), { rss: () => 0 });\n\tmainModule = undefined;\n\tdomain = undefined;\n\tsend = undefined;\n\texitCode = undefined;\n\tchannel = undefined;\n\tgetegid = undefined;\n\tgeteuid = undefined;\n\tgetgid = undefined;\n\tgetgroups = undefined;\n\tgetuid = undefined;\n\tsetegid = undefined;\n\tseteuid = undefined;\n\tsetgid = undefined;\n\tsetgroups = undefined;\n\tsetuid = undefined;\n\t_events = undefined;\n\t_eventsCount = undefined;\n\t_exiting = undefined;\n\t_maxListeners = undefined;\n\t_debugEnd = undefined;\n\t_debugProcess = undefined;\n\t_fatalException = undefined;\n\t_getActiveHandles = undefined;\n\t_getActiveRequests = undefined;\n\t_kill = undefined;\n\t_preload_modules = undefined;\n\t_rawDebug = undefined;\n\t_startProfilerIdleNotifier = undefined;\n\t_stopProfilerIdleNotifier = undefined;\n\t_tickCallback = undefined;\n\t_disconnect = undefined;\n\t_handleQueue = undefined;\n\t_pendingMessage = undefined;\n\t_channel = undefined;\n\t_send = undefined;\n\t_linkedBinding = undefined;\n}\n", "import { hrtime as UnenvHrTime } from \"unenv/node/internal/process/hrtime\";\nimport { Process as UnenvProcess } from \"unenv/node/internal/process/process\";\nconst globalProcess = globalThis[\"process\"];\nexport const getBuiltinModule = globalProcess.getBuiltinModule;\nexport const { exit, platform, nextTick } = getBuiltinModule(\n  \"node:process\"\n);\nconst unenvProcess = new UnenvProcess({\n  env: globalProcess.env,\n  hrtime: UnenvHrTime,\n  nextTick\n});\nexport const {\n  abort,\n  addListener,\n  allowedNodeEnvironmentFlags,\n  hasUncaughtExceptionCaptureCallback,\n  setUncaughtExceptionCaptureCallback,\n  loadEnvFile,\n  sourceMapsEnabled,\n  arch,\n  argv,\n  argv0,\n  chdir,\n  config,\n  connected,\n  constrainedMemory,\n  availableMemory,\n  cpuUsage,\n  cwd,\n  debugPort,\n  dlopen,\n  disconnect,\n  emit,\n  emitWarning,\n  env,\n  eventNames,\n  execArgv,\n  execPath,\n  finalization,\n  features,\n  getActiveResourcesInfo,\n  getMaxListeners,\n  hrtime,\n  kill,\n  listeners,\n  listenerCount,\n  memoryUsage,\n  on,\n  off,\n  once,\n  pid,\n  ppid,\n  prependListener,\n  prependOnceListener,\n  rawListeners,\n  release,\n  removeAllListeners,\n  removeListener,\n  report,\n  resourceUsage,\n  setMaxListeners,\n  setSourceMapsEnabled,\n  stderr,\n  stdin,\n  stdout,\n  title,\n  throwDeprecation,\n  traceDeprecation,\n  umask,\n  uptime,\n  version,\n  versions,\n  domain,\n  initgroups,\n  moduleLoadList,\n  reallyExit,\n  openStdin,\n  assert,\n  binding,\n  send,\n  exitCode,\n  channel,\n  getegid,\n  geteuid,\n  getgid,\n  getgroups,\n  getuid,\n  setegid,\n  seteuid,\n  setgid,\n  setgroups,\n  setuid,\n  permission,\n  mainModule,\n  _events,\n  _eventsCount,\n  _exiting,\n  _maxListeners,\n  _debugEnd,\n  _debugProcess,\n  _fatalException,\n  _getActiveHandles,\n  _getActiveRequests,\n  _kill,\n  _preload_modules,\n  _rawDebug,\n  _startProfilerIdleNotifier,\n  _stopProfilerIdleNotifier,\n  _tickCallback,\n  _disconnect,\n  _handleQueue,\n  _pendingMessage,\n  _channel,\n  _send,\n  _linkedBinding\n} = unenvProcess;\nconst _process = {\n  abort,\n  addListener,\n  allowedNodeEnvironmentFlags,\n  hasUncaughtExceptionCaptureCallback,\n  setUncaughtExceptionCaptureCallback,\n  loadEnvFile,\n  sourceMapsEnabled,\n  arch,\n  argv,\n  argv0,\n  chdir,\n  config,\n  connected,\n  constrainedMemory,\n  availableMemory,\n  cpuUsage,\n  cwd,\n  debugPort,\n  dlopen,\n  disconnect,\n  emit,\n  emitWarning,\n  env,\n  eventNames,\n  execArgv,\n  execPath,\n  exit,\n  finalization,\n  features,\n  getBuiltinModule,\n  getActiveResourcesInfo,\n  getMaxListeners,\n  hrtime,\n  kill,\n  listeners,\n  listenerCount,\n  memoryUsage,\n  nextTick,\n  on,\n  off,\n  once,\n  pid,\n  platform,\n  ppid,\n  prependListener,\n  prependOnceListener,\n  rawListeners,\n  release,\n  removeAllListeners,\n  removeListener,\n  report,\n  resourceUsage,\n  setMaxListeners,\n  setSourceMapsEnabled,\n  stderr,\n  stdin,\n  stdout,\n  title,\n  throwDeprecation,\n  traceDeprecation,\n  umask,\n  uptime,\n  version,\n  versions,\n  // @ts-expect-error old API\n  domain,\n  initgroups,\n  moduleLoadList,\n  reallyExit,\n  openStdin,\n  assert,\n  binding,\n  send,\n  exitCode,\n  channel,\n  getegid,\n  geteuid,\n  getgid,\n  getgroups,\n  getuid,\n  setegid,\n  seteuid,\n  setgid,\n  setgroups,\n  setuid,\n  permission,\n  mainModule,\n  _events,\n  _eventsCount,\n  _exiting,\n  _maxListeners,\n  _debugEnd,\n  _debugProcess,\n  _fatalException,\n  _getActiveHandles,\n  _getActiveRequests,\n  _kill,\n  _preload_modules,\n  _rawDebug,\n  _startProfilerIdleNotifier,\n  _stopProfilerIdleNotifier,\n  _tickCallback,\n  _disconnect,\n  _handleQueue,\n  _pendingMessage,\n  _channel,\n  _send,\n  _linkedBinding\n};\nexport default _process;\n", "import { default as defaultExport } from \"@cloudflare/unenv-preset/node/process\";\nglobalThis.process = defaultExport;", "", "// `esbuild` doesn't support returning `watch*` options from `onStart()`\n// plugin callbacks. Instead, we define an empty virtual module that is\n// imported by this injected file. Importing the module registers watchers.\nimport \"wrangler:modules-watch\";\n", "'use strict'\nfunction tryStringify (o) {\n  try { return JSON.stringify(o) } catch(e) { return '\"[Circular]\"' }\n}\n\nmodule.exports = format\n\nfunction format(f, args, opts) {\n  var ss = (opts && opts.stringify) || tryStringify\n  var offset = 1\n  if (typeof f === 'object' && f !== null) {\n    var len = args.length + offset\n    if (len === 1) return f\n    var objects = new Array(len)\n    objects[0] = ss(f)\n    for (var index = 1; index < len; index++) {\n      objects[index] = ss(args[index])\n    }\n    return objects.join(' ')\n  }\n  if (typeof f !== 'string') {\n    return f\n  }\n  var argLen = args.length\n  if (argLen === 0) return f\n  var str = ''\n  var a = 1 - offset\n  var lastPos = -1\n  var flen = (f && f.length) || 0\n  for (var i = 0; i < flen;) {\n    if (f.charCodeAt(i) === 37 && i + 1 < flen) {\n      lastPos = lastPos > -1 ? lastPos : 0\n      switch (f.charCodeAt(i + 1)) {\n        case 100: // 'd'\n        case 102: // 'f'\n          if (a >= argLen)\n            break\n          if (args[a] == null)  break\n          if (lastPos < i)\n            str += f.slice(lastPos, i)\n          str += Number(args[a])\n          lastPos = i + 2\n          i++\n          break\n        case 105: // 'i'\n          if (a >= argLen)\n            break\n          if (args[a] == null)  break\n          if (lastPos < i)\n            str += f.slice(lastPos, i)\n          str += Math.floor(Number(args[a]))\n          lastPos = i + 2\n          i++\n          break\n        case 79: // 'O'\n        case 111: // 'o'\n        case 106: // 'j'\n          if (a >= argLen)\n            break\n          if (args[a] === undefined) break\n          if (lastPos < i)\n            str += f.slice(lastPos, i)\n          var type = typeof args[a]\n          if (type === 'string') {\n            str += '\\'' + args[a] + '\\''\n            lastPos = i + 2\n            i++\n            break\n          }\n          if (type === 'function') {\n            str += args[a].name || '<anonymous>'\n            lastPos = i + 2\n            i++\n            break\n          }\n          str += ss(args[a])\n          lastPos = i + 2\n          i++\n          break\n        case 115: // 's'\n          if (a >= argLen)\n            break\n          if (lastPos < i)\n            str += f.slice(lastPos, i)\n          str += String(args[a])\n          lastPos = i + 2\n          i++\n          break\n        case 37: // '%'\n          if (lastPos < i)\n            str += f.slice(lastPos, i)\n          str += '%'\n          lastPos = i + 2\n          i++\n          a--\n          break\n      }\n      ++a\n    }\n    ++i\n  }\n  if (lastPos === -1)\n    return f\n  else if (lastPos < flen) {\n    str += f.slice(lastPos)\n  }\n\n  return str\n}\n", "'use strict'\n\nconst format = require('quick-format-unescaped')\n\nmodule.exports = pino\n\nconst _console = pfGlobalThisOrFallback().console || {}\nconst stdSerializers = {\n  mapHttpRequest: mock,\n  mapHttpResponse: mock,\n  wrapRequestSerializer: passthrough,\n  wrapResponseSerializer: passthrough,\n  wrapErrorSerializer: passthrough,\n  req: mock,\n  res: mock,\n  err: asErrValue,\n  errWithCause: asErrValue\n}\nfunction levelToValue (level, logger) {\n  return level === 'silent'\n    ? Infinity\n    : logger.levels.values[level]\n}\nconst baseLogFunctionSymbol = Symbol('pino.logFuncs')\nconst hierarchySymbol = Symbol('pino.hierarchy')\n\nconst logFallbackMap = {\n  error: 'log',\n  fatal: 'error',\n  warn: 'error',\n  info: 'log',\n  debug: 'log',\n  trace: 'log'\n}\n\nfunction appendChildLogger (parentLogger, childLogger) {\n  const newEntry = {\n    logger: childLogger,\n    parent: parentLogger[hierarchySymbol]\n  }\n  childLogger[hierarchySymbol] = newEntry\n}\n\nfunction setupBaseLogFunctions (logger, levels, proto) {\n  const logFunctions = {}\n  levels.forEach(level => {\n    logFunctions[level] = proto[level] ? proto[level] : (_console[level] || _console[logFallbackMap[level] || 'log'] || noop)\n  })\n  logger[baseLogFunctionSymbol] = logFunctions\n}\n\nfunction shouldSerialize (serialize, serializers) {\n  if (Array.isArray(serialize)) {\n    const hasToFilter = serialize.filter(function (k) {\n      return k !== '!stdSerializers.err'\n    })\n    return hasToFilter\n  } else if (serialize === true) {\n    return Object.keys(serializers)\n  }\n\n  return false\n}\n\nfunction pino (opts) {\n  opts = opts || {}\n  opts.browser = opts.browser || {}\n\n  const transmit = opts.browser.transmit\n  if (transmit && typeof transmit.send !== 'function') { throw Error('pino: transmit option must have a send function') }\n\n  const proto = opts.browser.write || _console\n  if (opts.browser.write) opts.browser.asObject = true\n  const serializers = opts.serializers || {}\n  const serialize = shouldSerialize(opts.browser.serialize, serializers)\n  let stdErrSerialize = opts.browser.serialize\n\n  if (\n    Array.isArray(opts.browser.serialize) &&\n    opts.browser.serialize.indexOf('!stdSerializers.err') > -1\n  ) stdErrSerialize = false\n\n  const customLevels = Object.keys(opts.customLevels || {})\n  const levels = ['error', 'fatal', 'warn', 'info', 'debug', 'trace'].concat(customLevels)\n\n  if (typeof proto === 'function') {\n    levels.forEach(function (level) {\n      proto[level] = proto\n    })\n  }\n  if (opts.enabled === false || opts.browser.disabled) opts.level = 'silent'\n  const level = opts.level || 'info'\n  const logger = Object.create(proto)\n  if (!logger.log) logger.log = noop\n\n  setupBaseLogFunctions(logger, levels, proto)\n  // setup root hierarchy entry\n  appendChildLogger({}, logger)\n\n  Object.defineProperty(logger, 'levelVal', {\n    get: getLevelVal\n  })\n  Object.defineProperty(logger, 'level', {\n    get: getLevel,\n    set: setLevel\n  })\n\n  const setOpts = {\n    transmit,\n    serialize,\n    asObject: opts.browser.asObject,\n    formatters: opts.browser.formatters,\n    levels,\n    timestamp: getTimeFunction(opts),\n    messageKey: opts.messageKey || 'msg',\n    onChild: opts.onChild || noop\n  }\n  logger.levels = getLevels(opts)\n  logger.level = level\n\n  logger.setMaxListeners = logger.getMaxListeners =\n  logger.emit = logger.addListener = logger.on =\n  logger.prependListener = logger.once =\n  logger.prependOnceListener = logger.removeListener =\n  logger.removeAllListeners = logger.listeners =\n  logger.listenerCount = logger.eventNames =\n  logger.write = logger.flush = noop\n  logger.serializers = serializers\n  logger._serialize = serialize\n  logger._stdErrSerialize = stdErrSerialize\n  logger.child = function (...args) { return child.call(this, setOpts, ...args) }\n\n  if (transmit) logger._logEvent = createLogEventShape()\n\n  function getLevelVal () {\n    return levelToValue(this.level, this)\n  }\n\n  function getLevel () {\n    return this._level\n  }\n  function setLevel (level) {\n    if (level !== 'silent' && !this.levels.values[level]) {\n      throw Error('unknown level ' + level)\n    }\n    this._level = level\n\n    set(this, setOpts, logger, 'error') // <-- must stay first\n    set(this, setOpts, logger, 'fatal')\n    set(this, setOpts, logger, 'warn')\n    set(this, setOpts, logger, 'info')\n    set(this, setOpts, logger, 'debug')\n    set(this, setOpts, logger, 'trace')\n\n    customLevels.forEach((level) => {\n      set(this, setOpts, logger, level)\n    })\n  }\n\n  function child (setOpts, bindings, childOptions) {\n    if (!bindings) {\n      throw new Error('missing bindings for child Pino')\n    }\n    childOptions = childOptions || {}\n    if (serialize && bindings.serializers) {\n      childOptions.serializers = bindings.serializers\n    }\n    const childOptionsSerializers = childOptions.serializers\n    if (serialize && childOptionsSerializers) {\n      var childSerializers = Object.assign({}, serializers, childOptionsSerializers)\n      var childSerialize = opts.browser.serialize === true\n        ? Object.keys(childSerializers)\n        : serialize\n      delete bindings.serializers\n      applySerializers([bindings], childSerialize, childSerializers, this._stdErrSerialize)\n    }\n    function Child (parent) {\n      this._childLevel = (parent._childLevel | 0) + 1\n\n      // make sure bindings are available in the `set` function\n      this.bindings = bindings\n\n      if (childSerializers) {\n        this.serializers = childSerializers\n        this._serialize = childSerialize\n      }\n      if (transmit) {\n        this._logEvent = createLogEventShape(\n          [].concat(parent._logEvent.bindings, bindings)\n        )\n      }\n    }\n    Child.prototype = this\n    const newLogger = new Child(this)\n\n    // must happen before the level is assigned\n    appendChildLogger(this, newLogger)\n    newLogger.child = function (...args) { return child.call(this, setOpts, ...args) }\n    // required to actually initialize the logger functions for any given child\n    newLogger.level = childOptions.level || this.level // allow level to be set by childOptions\n    setOpts.onChild(newLogger)\n\n    return newLogger\n  }\n  return logger\n}\n\nfunction getLevels (opts) {\n  const customLevels = opts.customLevels || {}\n\n  const values = Object.assign({}, pino.levels.values, customLevels)\n  const labels = Object.assign({}, pino.levels.labels, invertObject(customLevels))\n\n  return {\n    values,\n    labels\n  }\n}\n\nfunction invertObject (obj) {\n  const inverted = {}\n  Object.keys(obj).forEach(function (key) {\n    inverted[obj[key]] = key\n  })\n  return inverted\n}\n\npino.levels = {\n  values: {\n    fatal: 60,\n    error: 50,\n    warn: 40,\n    info: 30,\n    debug: 20,\n    trace: 10\n  },\n  labels: {\n    10: 'trace',\n    20: 'debug',\n    30: 'info',\n    40: 'warn',\n    50: 'error',\n    60: 'fatal'\n  }\n}\n\npino.stdSerializers = stdSerializers\npino.stdTimeFunctions = Object.assign({}, { nullTime, epochTime, unixTime, isoTime })\n\nfunction getBindingChain (logger) {\n  const bindings = []\n  if (logger.bindings) {\n    bindings.push(logger.bindings)\n  }\n\n  // traverse up the tree to get all bindings\n  let hierarchy = logger[hierarchySymbol]\n  while (hierarchy.parent) {\n    hierarchy = hierarchy.parent\n    if (hierarchy.logger.bindings) {\n      bindings.push(hierarchy.logger.bindings)\n    }\n  }\n\n  return bindings.reverse()\n}\n\nfunction set (self, opts, rootLogger, level) {\n  // override the current log functions with either `noop` or the base log function\n  Object.defineProperty(self, level, {\n    value: (levelToValue(self.level, rootLogger) > levelToValue(level, rootLogger)\n      ? noop\n      : rootLogger[baseLogFunctionSymbol][level]),\n    writable: true,\n    enumerable: true,\n    configurable: true\n  })\n\n  if (self[level] === noop) {\n    if (!opts.transmit) return\n\n    const transmitLevel = opts.transmit.level || self.level\n    const transmitValue = levelToValue(transmitLevel, rootLogger)\n    const methodValue = levelToValue(level, rootLogger)\n    if (methodValue < transmitValue) return\n  }\n\n  // make sure the log format is correct\n  self[level] = createWrap(self, opts, rootLogger, level)\n\n  // prepend bindings if it is not the root logger\n  const bindings = getBindingChain(self)\n  if (bindings.length === 0) {\n    // early exit in case for rootLogger\n    return\n  }\n  self[level] = prependBindingsInArguments(bindings, self[level])\n}\n\nfunction prependBindingsInArguments (bindings, logFunc) {\n  return function () {\n    return logFunc.apply(this, [...bindings, ...arguments])\n  }\n}\n\nfunction createWrap (self, opts, rootLogger, level) {\n  return (function (write) {\n    return function LOG () {\n      const ts = opts.timestamp()\n      const args = new Array(arguments.length)\n      const proto = (Object.getPrototypeOf && Object.getPrototypeOf(this) === _console) ? _console : this\n      for (var i = 0; i < args.length; i++) args[i] = arguments[i]\n\n      var argsIsSerialized = false\n      if (opts.serialize) {\n        applySerializers(args, this._serialize, this.serializers, this._stdErrSerialize)\n        argsIsSerialized = true\n      }\n      if (opts.asObject || opts.formatters) {\n        write.call(proto, asObject(this, level, args, ts, opts))\n      } else write.apply(proto, args)\n\n      if (opts.transmit) {\n        const transmitLevel = opts.transmit.level || self._level\n        const transmitValue = levelToValue(transmitLevel, rootLogger)\n        const methodValue = levelToValue(level, rootLogger)\n        if (methodValue < transmitValue) return\n        transmit(this, {\n          ts,\n          methodLevel: level,\n          methodValue,\n          transmitLevel,\n          transmitValue: rootLogger.levels.values[opts.transmit.level || self._level],\n          send: opts.transmit.send,\n          val: levelToValue(self._level, rootLogger)\n        }, args, argsIsSerialized)\n      }\n    }\n  })(self[baseLogFunctionSymbol][level])\n}\n\nfunction asObject (logger, level, args, ts, opts) {\n  const {\n    level: levelFormatter,\n    log: logObjectFormatter = (obj) => obj\n  } = opts.formatters || {}\n  const argsCloned = args.slice()\n  let msg = argsCloned[0]\n  const logObject = {}\n  if (ts) {\n    logObject.time = ts\n  }\n\n  if (levelFormatter) {\n    const formattedLevel = levelFormatter(level, logger.levels.values[level])\n    Object.assign(logObject, formattedLevel)\n  } else {\n    logObject.level = logger.levels.values[level]\n  }\n\n  let lvl = (logger._childLevel | 0) + 1\n  if (lvl < 1) lvl = 1\n  // deliberate, catching objects, arrays\n  if (msg !== null && typeof msg === 'object') {\n    while (lvl-- && typeof argsCloned[0] === 'object') {\n      Object.assign(logObject, argsCloned.shift())\n    }\n    msg = argsCloned.length ? format(argsCloned.shift(), argsCloned) : undefined\n  } else if (typeof msg === 'string') msg = format(argsCloned.shift(), argsCloned)\n  if (msg !== undefined) logObject[opts.messageKey] = msg\n\n  const formattedLogObject = logObjectFormatter(logObject)\n  return formattedLogObject\n}\n\nfunction applySerializers (args, serialize, serializers, stdErrSerialize) {\n  for (const i in args) {\n    if (stdErrSerialize && args[i] instanceof Error) {\n      args[i] = pino.stdSerializers.err(args[i])\n    } else if (typeof args[i] === 'object' && !Array.isArray(args[i]) && serialize) {\n      for (const k in args[i]) {\n        if (serialize.indexOf(k) > -1 && k in serializers) {\n          args[i][k] = serializers[k](args[i][k])\n        }\n      }\n    }\n  }\n}\n\nfunction transmit (logger, opts, args, argsIsSerialized = false) {\n  const send = opts.send\n  const ts = opts.ts\n  const methodLevel = opts.methodLevel\n  const methodValue = opts.methodValue\n  const val = opts.val\n  const bindings = logger._logEvent.bindings\n\n  if (!argsIsSerialized) {\n    applySerializers(\n      args,\n      logger._serialize || Object.keys(logger.serializers),\n      logger.serializers,\n      logger._stdErrSerialize === undefined ? true : logger._stdErrSerialize\n    )\n  }\n\n  logger._logEvent.ts = ts\n  logger._logEvent.messages = args.filter(function (arg) {\n    // bindings can only be objects, so reference equality check via indexOf is fine\n    return bindings.indexOf(arg) === -1\n  })\n\n  logger._logEvent.level.label = methodLevel\n  logger._logEvent.level.value = methodValue\n\n  send(methodLevel, logger._logEvent, val)\n\n  logger._logEvent = createLogEventShape(bindings)\n}\n\nfunction createLogEventShape (bindings) {\n  return {\n    ts: 0,\n    messages: [],\n    bindings: bindings || [],\n    level: { label: '', value: 0 }\n  }\n}\n\nfunction asErrValue (err) {\n  const obj = {\n    type: err.constructor.name,\n    msg: err.message,\n    stack: err.stack\n  }\n  for (const key in err) {\n    if (obj[key] === undefined) {\n      obj[key] = err[key]\n    }\n  }\n  return obj\n}\n\nfunction getTimeFunction (opts) {\n  if (typeof opts.timestamp === 'function') {\n    return opts.timestamp\n  }\n  if (opts.timestamp === false) {\n    return nullTime\n  }\n  return epochTime\n}\n\nfunction mock () { return {} }\nfunction passthrough (a) { return a }\nfunction noop () {}\n\nfunction nullTime () { return false }\nfunction epochTime () { return Date.now() }\nfunction unixTime () { return Math.round(Date.now() / 1000.0) }\nfunction isoTime () { return new Date(Date.now()).toISOString() } // using Date.now() for testability\n\n/* eslint-disable */\n/* istanbul ignore next */\nfunction pfGlobalThisOrFallback () {\n  function defd (o) { return typeof o !== 'undefined' && o }\n  try {\n    if (typeof globalThis !== 'undefined') return globalThis\n    Object.defineProperty(Object.prototype, 'globalThis', {\n      get: function () {\n        delete Object.prototype.globalThis\n        return (this.globalThis = this)\n      },\n      configurable: true\n    })\n    return globalThis\n  } catch (e) {\n    return defd(self) || defd(window) || defd(this) || {}\n  }\n}\n/* eslint-enable */\n\nmodule.exports.default = pino\nmodule.exports.pino = pino\n", "import libDefault from 'tty';\nmodule.exports = libDefault;", "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tty = require('tty');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar tty__namespace = /*#__PURE__*/_interopNamespace(tty);\n\nconst {\n  env = {},\n  argv = [],\n  platform = \"\",\n} = typeof process === \"undefined\" ? {} : process;\n\nconst isDisabled = \"NO_COLOR\" in env || argv.includes(\"--no-color\");\nconst isForced = \"FORCE_COLOR\" in env || argv.includes(\"--color\");\nconst isWindows = platform === \"win32\";\nconst isDumbTerminal = env.TERM === \"dumb\";\n\nconst isCompatibleTerminal =\n  tty__namespace && tty__namespace.isatty && tty__namespace.isatty(1) && env.TERM && !isDumbTerminal;\n\nconst isCI =\n  \"CI\" in env &&\n  (\"GITHUB_ACTIONS\" in env || \"GITLAB_CI\" in env || \"CIRCLECI\" in env);\n\nconst isColorSupported =\n  !isDisabled &&\n  (isForced || (isWindows && !isDumbTerminal) || isCompatibleTerminal || isCI);\n\nconst replaceClose = (\n  index,\n  string,\n  close,\n  replace,\n  head = string.substring(0, index) + replace,\n  tail = string.substring(index + close.length),\n  next = tail.indexOf(close)\n) => head + (next < 0 ? tail : replaceClose(next, tail, close, replace));\n\nconst clearBleed = (index, string, open, close, replace) =>\n  index < 0\n    ? open + string + close\n    : open + replaceClose(index, string, close, replace) + close;\n\nconst filterEmpty =\n  (open, close, replace = open, at = open.length + 1) =>\n  (string) =>\n    string || !(string === \"\" || string === undefined)\n      ? clearBleed(\n          (\"\" + string).indexOf(close, at),\n          string,\n          open,\n          close,\n          replace\n        )\n      : \"\";\n\nconst init = (open, close, replace) =>\n  filterEmpty(`\\x1b[${open}m`, `\\x1b[${close}m`, replace);\n\nconst colors = {\n  reset: init(0, 0),\n  bold: init(1, 22, \"\\x1b[22m\\x1b[1m\"),\n  dim: init(2, 22, \"\\x1b[22m\\x1b[2m\"),\n  italic: init(3, 23),\n  underline: init(4, 24),\n  inverse: init(7, 27),\n  hidden: init(8, 28),\n  strikethrough: init(9, 29),\n  black: init(30, 39),\n  red: init(31, 39),\n  green: init(32, 39),\n  yellow: init(33, 39),\n  blue: init(34, 39),\n  magenta: init(35, 39),\n  cyan: init(36, 39),\n  white: init(37, 39),\n  gray: init(90, 39),\n  bgBlack: init(40, 49),\n  bgRed: init(41, 49),\n  bgGreen: init(42, 49),\n  bgYellow: init(43, 49),\n  bgBlue: init(44, 49),\n  bgMagenta: init(45, 49),\n  bgCyan: init(46, 49),\n  bgWhite: init(47, 49),\n  blackBright: init(90, 39),\n  redBright: init(91, 39),\n  greenBright: init(92, 39),\n  yellowBright: init(93, 39),\n  blueBright: init(94, 39),\n  magentaBright: init(95, 39),\n  cyanBright: init(96, 39),\n  whiteBright: init(97, 39),\n  bgBlackBright: init(100, 49),\n  bgRedBright: init(101, 49),\n  bgGreenBright: init(102, 49),\n  bgYellowBright: init(103, 49),\n  bgBlueBright: init(104, 49),\n  bgMagentaBright: init(105, 49),\n  bgCyanBright: init(106, 49),\n  bgWhiteBright: init(107, 49),\n};\n\nconst createColors = ({ useColor = isColorSupported } = {}) =>\n  useColor\n    ? colors\n    : Object.keys(colors).reduce(\n        (colors, key) => ({ ...colors, [key]: String }),\n        {}\n      );\n\nconst {\n  reset,\n  bold,\n  dim,\n  italic,\n  underline,\n  inverse,\n  hidden,\n  strikethrough,\n  black,\n  red,\n  green,\n  yellow,\n  blue,\n  magenta,\n  cyan,\n  white,\n  gray,\n  bgBlack,\n  bgRed,\n  bgGreen,\n  bgYellow,\n  bgBlue,\n  bgMagenta,\n  bgCyan,\n  bgWhite,\n  blackBright,\n  redBright,\n  greenBright,\n  yellowBright,\n  blueBright,\n  magentaBright,\n  cyanBright,\n  whiteBright,\n  bgBlackBright,\n  bgRedBright,\n  bgGreenBright,\n  bgYellowBright,\n  bgBlueBright,\n  bgMagentaBright,\n  bgCyanBright,\n  bgWhiteBright,\n} = createColors();\n\nexports.bgBlack = bgBlack;\nexports.bgBlackBright = bgBlackBright;\nexports.bgBlue = bgBlue;\nexports.bgBlueBright = bgBlueBright;\nexports.bgCyan = bgCyan;\nexports.bgCyanBright = bgCyanBright;\nexports.bgGreen = bgGreen;\nexports.bgGreenBright = bgGreenBright;\nexports.bgMagenta = bgMagenta;\nexports.bgMagentaBright = bgMagentaBright;\nexports.bgRed = bgRed;\nexports.bgRedBright = bgRedBright;\nexports.bgWhite = bgWhite;\nexports.bgWhiteBright = bgWhiteBright;\nexports.bgYellow = bgYellow;\nexports.bgYellowBright = bgYellowBright;\nexports.black = black;\nexports.blackBright = blackBright;\nexports.blue = blue;\nexports.blueBright = blueBright;\nexports.bold = bold;\nexports.createColors = createColors;\nexports.cyan = cyan;\nexports.cyanBright = cyanBright;\nexports.dim = dim;\nexports.gray = gray;\nexports.green = green;\nexports.greenBright = greenBright;\nexports.hidden = hidden;\nexports.inverse = inverse;\nexports.isColorSupported = isColorSupported;\nexports.italic = italic;\nexports.magenta = magenta;\nexports.magentaBright = magentaBright;\nexports.red = red;\nexports.redBright = redBright;\nexports.reset = reset;\nexports.strikethrough = strikethrough;\nexports.underline = underline;\nexports.white = white;\nexports.whiteBright = whiteBright;\nexports.yellow = yellow;\nexports.yellowBright = yellowBright;\n", "// Returns a wrapper function that returns a wrapped callback\n// The wrapper function should do some stuff, and return a\n// presumably different callback function.\n// This makes sure that own properties are retained, so that\n// decorations and such are not lost along the way.\nmodule.exports = wrappy\nfunction wrappy (fn, cb) {\n  if (fn && cb) return wrappy(fn)(cb)\n\n  if (typeof fn !== 'function')\n    throw new TypeError('need wrapper function')\n\n  Object.keys(fn).forEach(function (k) {\n    wrapper[k] = fn[k]\n  })\n\n  return wrapper\n\n  function wrapper() {\n    var args = new Array(arguments.length)\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i]\n    }\n    var ret = fn.apply(this, args)\n    var cb = args[args.length-1]\n    if (typeof ret === 'function' && ret !== cb) {\n      Object.keys(cb).forEach(function (k) {\n        ret[k] = cb[k]\n      })\n    }\n    return ret\n  }\n}\n", "var wrappy = require('wrappy')\nmodule.exports = wrappy(once)\nmodule.exports.strict = wrappy(onceStrict)\n\nonce.proto = once(function () {\n  Object.defineProperty(Function.prototype, 'once', {\n    value: function () {\n      return once(this)\n    },\n    configurable: true\n  })\n\n  Object.defineProperty(Function.prototype, 'onceStrict', {\n    value: function () {\n      return onceStrict(this)\n    },\n    configurable: true\n  })\n})\n\nfunction once (fn) {\n  var f = function () {\n    if (f.called) return f.value\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  f.called = false\n  return f\n}\n\nfunction onceStrict (fn) {\n  var f = function () {\n    if (f.called)\n      throw new Error(f.onceError)\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  var name = fn.name || 'Function wrapped with `once`'\n  f.onceError = name + \" shouldn't be called more than once\"\n  f.called = false\n  return f\n}\n", "var once = require('once');\n\nvar noop = function() {};\n\nvar isRequest = function(stream) {\n\treturn stream.setHeader && typeof stream.abort === 'function';\n};\n\nvar isChildProcess = function(stream) {\n\treturn stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3\n};\n\nvar eos = function(stream, opts, callback) {\n\tif (typeof opts === 'function') return eos(stream, null, opts);\n\tif (!opts) opts = {};\n\n\tcallback = once(callback || noop);\n\n\tvar ws = stream._writableState;\n\tvar rs = stream._readableState;\n\tvar readable = opts.readable || (opts.readable !== false && stream.readable);\n\tvar writable = opts.writable || (opts.writable !== false && stream.writable);\n\tvar cancelled = false;\n\n\tvar onlegacyfinish = function() {\n\t\tif (!stream.writable) onfinish();\n\t};\n\n\tvar onfinish = function() {\n\t\twritable = false;\n\t\tif (!readable) callback.call(stream);\n\t};\n\n\tvar onend = function() {\n\t\treadable = false;\n\t\tif (!writable) callback.call(stream);\n\t};\n\n\tvar onexit = function(exitCode) {\n\t\tcallback.call(stream, exitCode ? new Error('exited with error code: ' + exitCode) : null);\n\t};\n\n\tvar onerror = function(err) {\n\t\tcallback.call(stream, err);\n\t};\n\n\tvar onclose = function() {\n\t\tprocess.nextTick(onclosenexttick);\n\t};\n\n\tvar onclosenexttick = function() {\n\t\tif (cancelled) return;\n\t\tif (readable && !(rs && (rs.ended && !rs.destroyed))) return callback.call(stream, new Error('premature close'));\n\t\tif (writable && !(ws && (ws.ended && !ws.destroyed))) return callback.call(stream, new Error('premature close'));\n\t};\n\n\tvar onrequest = function() {\n\t\tstream.req.on('finish', onfinish);\n\t};\n\n\tif (isRequest(stream)) {\n\t\tstream.on('complete', onfinish);\n\t\tstream.on('abort', onclose);\n\t\tif (stream.req) onrequest();\n\t\telse stream.on('request', onrequest);\n\t} else if (writable && !ws) { // legacy streams\n\t\tstream.on('end', onlegacyfinish);\n\t\tstream.on('close', onlegacyfinish);\n\t}\n\n\tif (isChildProcess(stream)) stream.on('exit', onexit);\n\n\tstream.on('end', onend);\n\tstream.on('finish', onfinish);\n\tif (opts.error !== false) stream.on('error', onerror);\n\tstream.on('close', onclose);\n\n\treturn function() {\n\t\tcancelled = true;\n\t\tstream.removeListener('complete', onfinish);\n\t\tstream.removeListener('abort', onclose);\n\t\tstream.removeListener('request', onrequest);\n\t\tif (stream.req) stream.req.removeListener('finish', onfinish);\n\t\tstream.removeListener('end', onlegacyfinish);\n\t\tstream.removeListener('close', onlegacyfinish);\n\t\tstream.removeListener('finish', onfinish);\n\t\tstream.removeListener('exit', onexit);\n\t\tstream.removeListener('end', onend);\n\t\tstream.removeListener('error', onerror);\n\t\tstream.removeListener('close', onclose);\n\t};\n};\n\nmodule.exports = eos;\n", "import { notImplemented } from \"../../../_internal/utils.mjs\";\nexport const access = /* @__PURE__ */ notImplemented(\"fs.access\");\nexport const copyFile = /* @__PURE__ */ notImplemented(\"fs.copyFile\");\nexport const cp = /* @__PURE__ */ notImplemented(\"fs.cp\");\nexport const open = /* @__PURE__ */ notImplemented(\"fs.open\");\nexport const opendir = /* @__PURE__ */ notImplemented(\"fs.opendir\");\nexport const rename = /* @__PURE__ */ notImplemented(\"fs.rename\");\nexport const truncate = /* @__PURE__ */ notImplemented(\"fs.truncate\");\nexport const rm = /* @__PURE__ */ notImplemented(\"fs.rm\");\nexport const rmdir = /* @__PURE__ */ notImplemented(\"fs.rmdir\");\nexport const mkdir = /* @__PURE__ */ notImplemented(\"fs.mkdir\");\nexport const readdir = /* @__PURE__ */ notImplemented(\"fs.readdir\");\nexport const readlink = /* @__PURE__ */ notImplemented(\"fs.readlink\");\nexport const symlink = /* @__PURE__ */ notImplemented(\"fs.symlink\");\nexport const lstat = /* @__PURE__ */ notImplemented(\"fs.lstat\");\nexport const stat = /* @__PURE__ */ notImplemented(\"fs.stat\");\nexport const link = /* @__PURE__ */ notImplemented(\"fs.link\");\nexport const unlink = /* @__PURE__ */ notImplemented(\"fs.unlink\");\nexport const chmod = /* @__PURE__ */ notImplemented(\"fs.chmod\");\nexport const lchmod = /* @__PURE__ */ notImplemented(\"fs.lchmod\");\nexport const lchown = /* @__PURE__ */ notImplemented(\"fs.lchown\");\nexport const chown = /* @__PURE__ */ notImplemented(\"fs.chown\");\nexport const utimes = /* @__PURE__ */ notImplemented(\"fs.utimes\");\nexport const lutimes = /* @__PURE__ */ notImplemented(\"fs.lutimes\");\nexport const realpath = /* @__PURE__ */ notImplemented(\"fs.realpath\");\nexport const mkdtemp = /* @__PURE__ */ notImplemented(\"fs.mkdtemp\");\nexport const writeFile = /* @__PURE__ */ notImplemented(\"fs.writeFile\");\nexport const appendFile = /* @__PURE__ */ notImplemented(\"fs.appendFile\");\nexport const readFile = /* @__PURE__ */ notImplemented(\"fs.readFile\");\nexport const watch = /* @__PURE__ */ notImplemented(\"fs.watch\");\nexport const statfs = /* @__PURE__ */ notImplemented(\"fs.statfs\");\nexport const glob = /* @__PURE__ */ notImplemented(\"fs.glob\");\n", "export const UV_FS_SYMLINK_DIR = 1;\nexport const UV_FS_SYMLINK_JUNCTION = 2;\nexport const O_RDONLY = 0;\nexport const O_WRONLY = 1;\nexport const O_RDWR = 2;\nexport const UV_DIRENT_UNKNOWN = 0;\nexport const UV_DIRENT_FILE = 1;\nexport const UV_DIRENT_DIR = 2;\nexport const UV_DIRENT_LINK = 3;\nexport const UV_DIRENT_FIFO = 4;\nexport const UV_DIRENT_SOCKET = 5;\nexport const UV_DIRENT_CHAR = 6;\nexport const UV_DIRENT_BLOCK = 7;\nexport const EXTENSIONLESS_FORMAT_JAVASCRIPT = 0;\nexport const EXTENSIONLESS_FORMAT_WASM = 1;\nexport const S_IFMT = 61440;\nexport const S_IFREG = 32768;\nexport const S_IFDIR = 16384;\nexport const S_IFCHR = 8192;\nexport const S_IFBLK = 24576;\nexport const S_IFIFO = 4096;\nexport const S_IFLNK = 40960;\nexport const S_IFSOCK = 49152;\nexport const O_CREAT = 64;\nexport const O_EXCL = 128;\nexport const UV_FS_O_FILEMAP = 0;\nexport const O_NOCTTY = 256;\nexport const O_TRUNC = 512;\nexport const O_APPEND = 1024;\nexport const O_DIRECTORY = 65536;\nexport const O_NOATIME = 262144;\nexport const O_NOFOLLOW = 131072;\nexport const O_SYNC = 1052672;\nexport const O_DSYNC = 4096;\nexport const O_DIRECT = 16384;\nexport const O_NONBLOCK = 2048;\nexport const S_IRWXU = 448;\nexport const S_IRUSR = 256;\nexport const S_IWUSR = 128;\nexport const S_IXUSR = 64;\nexport const S_IRWXG = 56;\nexport const S_IRGRP = 32;\nexport const S_IWGRP = 16;\nexport const S_IXGRP = 8;\nexport const S_IRWXO = 7;\nexport const S_IROTH = 4;\nexport const S_IWOTH = 2;\nexport const S_IXOTH = 1;\nexport const F_OK = 0;\nexport const R_OK = 4;\nexport const W_OK = 2;\nexport const X_OK = 1;\nexport const UV_FS_COPYFILE_EXCL = 1;\nexport const COPYFILE_EXCL = 1;\nexport const UV_FS_COPYFILE_FICLONE = 2;\nexport const COPYFILE_FICLONE = 2;\nexport const UV_FS_COPYFILE_FICLONE_FORCE = 4;\nexport const COPYFILE_FICLONE_FORCE = 4;\n", "import { access, appendFile, chmod, chown, copyFile, cp, glob, lchmod, lchown, link, lstat, lutimes, mkdir, mkdtemp, open, opendir, readFile, readdir, readlink, realpath, rename, rm, rmdir, stat, statfs, symlink, truncate, unlink, utimes, watch, writeFile } from \"../internal/fs/promises.mjs\";\nimport * as constants from \"../internal/fs/constants.mjs\";\nexport { constants };\nexport * from \"../internal/fs/promises.mjs\";\nexport default {\n\tconstants,\n\taccess,\n\tappendFile,\n\tchmod,\n\tchown,\n\tcopyFile,\n\tcp,\n\tglob,\n\tlchmod,\n\tlchown,\n\tlink,\n\tlstat,\n\tlutimes,\n\tmkdir,\n\tmkdtemp,\n\topen,\n\topendir,\n\treadFile,\n\treaddir,\n\treadlink,\n\trealpath,\n\trename,\n\trm,\n\trmdir,\n\tstat,\n\tstatfs,\n\tsymlink,\n\ttruncate,\n\tunlink,\n\tutimes,\n\twatch,\n\twriteFile\n};\n", "import { notImplementedClass } from \"../../../_internal/utils.mjs\";\nexport const Dir = /* @__PURE__ */ notImplementedClass(\"fs.Dir\");\nexport const Dirent = /* @__PURE__ */ notImplementedClass(\"fs.Dirent\");\nexport const Stats = /* @__PURE__ */ notImplementedClass(\"fs.Stats\");\nexport const ReadStream = /* @__PURE__ */ notImplementedClass(\"fs.ReadStream\");\nexport const WriteStream = /* @__PURE__ */ notImplementedClass(\"fs.WriteStream\");\nexport const FileReadStream = ReadStream;\nexport const FileWriteStream = WriteStream;\n", "import { notImplemented, notImplementedAsync } from \"../../../_internal/utils.mjs\";\nimport * as fsp from \"./promises.mjs\";\nfunction callbackify(fn) {\n\tconst fnc = function(...args) {\n\t\tconst cb = args.pop();\n\t\tfn().catch((error) => cb(error)).then((val) => cb(undefined, val));\n\t};\n\tfnc.__promisify__ = fn;\n\tfnc.native = fnc;\n\treturn fnc;\n}\nexport const access = callbackify(fsp.access);\nexport const appendFile = callbackify(fsp.appendFile);\nexport const chown = callbackify(fsp.chown);\nexport const chmod = callbackify(fsp.chmod);\nexport const copyFile = callbackify(fsp.copyFile);\nexport const cp = callbackify(fsp.cp);\nexport const lchown = callbackify(fsp.lchown);\nexport const lchmod = callbackify(fsp.lchmod);\nexport const link = callbackify(fsp.link);\nexport const lstat = callbackify(fsp.lstat);\nexport const lutimes = callbackify(fsp.lutimes);\nexport const mkdir = callbackify(fsp.mkdir);\nexport const mkdtemp = callbackify(fsp.mkdtemp);\nexport const realpath = callbackify(fsp.realpath);\nexport const open = callbackify(fsp.open);\nexport const opendir = callbackify(fsp.opendir);\nexport const readdir = callbackify(fsp.readdir);\nexport const readFile = callbackify(fsp.readFile);\nexport const readlink = callbackify(fsp.readlink);\nexport const rename = callbackify(fsp.rename);\nexport const rm = callbackify(fsp.rm);\nexport const rmdir = callbackify(fsp.rmdir);\nexport const stat = callbackify(fsp.stat);\nexport const symlink = callbackify(fsp.symlink);\nexport const truncate = callbackify(fsp.truncate);\nexport const unlink = callbackify(fsp.unlink);\nexport const utimes = callbackify(fsp.utimes);\nexport const writeFile = callbackify(fsp.writeFile);\nexport const statfs = callbackify(fsp.statfs);\nexport const close = /* @__PURE__ */ notImplementedAsync(\"fs.close\");\nexport const createReadStream = /* @__PURE__ */ notImplementedAsync(\"fs.createReadStream\");\nexport const createWriteStream = /* @__PURE__ */ notImplementedAsync(\"fs.createWriteStream\");\nexport const exists = /* @__PURE__ */ notImplementedAsync(\"fs.exists\");\nexport const fchown = /* @__PURE__ */ notImplementedAsync(\"fs.fchown\");\nexport const fchmod = /* @__PURE__ */ notImplementedAsync(\"fs.fchmod\");\nexport const fdatasync = /* @__PURE__ */ notImplementedAsync(\"fs.fdatasync\");\nexport const fstat = /* @__PURE__ */ notImplementedAsync(\"fs.fstat\");\nexport const fsync = /* @__PURE__ */ notImplementedAsync(\"fs.fsync\");\nexport const ftruncate = /* @__PURE__ */ notImplementedAsync(\"fs.ftruncate\");\nexport const futimes = /* @__PURE__ */ notImplementedAsync(\"fs.futimes\");\nexport const lstatSync = /* @__PURE__ */ notImplementedAsync(\"fs.lstatSync\");\nexport const read = /* @__PURE__ */ notImplementedAsync(\"fs.read\");\nexport const readv = /* @__PURE__ */ notImplementedAsync(\"fs.readv\");\nexport const realpathSync = /* @__PURE__ */ notImplementedAsync(\"fs.realpathSync\");\nexport const statSync = /* @__PURE__ */ notImplementedAsync(\"fs.statSync\");\nexport const unwatchFile = /* @__PURE__ */ notImplementedAsync(\"fs.unwatchFile\");\nexport const watch = /* @__PURE__ */ notImplementedAsync(\"fs.watch\");\nexport const watchFile = /* @__PURE__ */ notImplementedAsync(\"fs.watchFile\");\nexport const write = /* @__PURE__ */ notImplementedAsync(\"fs.write\");\nexport const writev = /* @__PURE__ */ notImplementedAsync(\"fs.writev\");\nexport const _toUnixTimestamp = /* @__PURE__ */ notImplementedAsync(\"fs._toUnixTimestamp\");\nexport const openAsBlob = /* @__PURE__ */ notImplementedAsync(\"fs.openAsBlob\");\nexport const glob = /* @__PURE__ */ notImplementedAsync(\"fs.glob\");\nexport const appendFileSync = /* @__PURE__ */ notImplemented(\"fs.appendFileSync\");\nexport const accessSync = /* @__PURE__ */ notImplemented(\"fs.accessSync\");\nexport const chownSync = /* @__PURE__ */ notImplemented(\"fs.chownSync\");\nexport const chmodSync = /* @__PURE__ */ notImplemented(\"fs.chmodSync\");\nexport const closeSync = /* @__PURE__ */ notImplemented(\"fs.closeSync\");\nexport const copyFileSync = /* @__PURE__ */ notImplemented(\"fs.copyFileSync\");\nexport const cpSync = /* @__PURE__ */ notImplemented(\"fs.cpSync\");\nexport const existsSync = () => false;\nexport const fchownSync = /* @__PURE__ */ notImplemented(\"fs.fchownSync\");\nexport const fchmodSync = /* @__PURE__ */ notImplemented(\"fs.fchmodSync\");\nexport const fdatasyncSync = /* @__PURE__ */ notImplemented(\"fs.fdatasyncSync\");\nexport const fstatSync = /* @__PURE__ */ notImplemented(\"fs.fstatSync\");\nexport const fsyncSync = /* @__PURE__ */ notImplemented(\"fs.fsyncSync\");\nexport const ftruncateSync = /* @__PURE__ */ notImplemented(\"fs.ftruncateSync\");\nexport const futimesSync = /* @__PURE__ */ notImplemented(\"fs.futimesSync\");\nexport const lchownSync = /* @__PURE__ */ notImplemented(\"fs.lchownSync\");\nexport const lchmodSync = /* @__PURE__ */ notImplemented(\"fs.lchmodSync\");\nexport const linkSync = /* @__PURE__ */ notImplemented(\"fs.linkSync\");\nexport const lutimesSync = /* @__PURE__ */ notImplemented(\"fs.lutimesSync\");\nexport const mkdirSync = /* @__PURE__ */ notImplemented(\"fs.mkdirSync\");\nexport const mkdtempSync = /* @__PURE__ */ notImplemented(\"fs.mkdtempSync\");\nexport const openSync = /* @__PURE__ */ notImplemented(\"fs.openSync\");\nexport const opendirSync = /* @__PURE__ */ notImplemented(\"fs.opendirSync\");\nexport const readdirSync = /* @__PURE__ */ notImplemented(\"fs.readdirSync\");\nexport const readSync = /* @__PURE__ */ notImplemented(\"fs.readSync\");\nexport const readvSync = /* @__PURE__ */ notImplemented(\"fs.readvSync\");\nexport const readFileSync = /* @__PURE__ */ notImplemented(\"fs.readFileSync\");\nexport const readlinkSync = /* @__PURE__ */ notImplemented(\"fs.readlinkSync\");\nexport const renameSync = /* @__PURE__ */ notImplemented(\"fs.renameSync\");\nexport const rmSync = /* @__PURE__ */ notImplemented(\"fs.rmSync\");\nexport const rmdirSync = /* @__PURE__ */ notImplemented(\"fs.rmdirSync\");\nexport const symlinkSync = /* @__PURE__ */ notImplemented(\"fs.symlinkSync\");\nexport const truncateSync = /* @__PURE__ */ notImplemented(\"fs.truncateSync\");\nexport const unlinkSync = /* @__PURE__ */ notImplemented(\"fs.unlinkSync\");\nexport const utimesSync = /* @__PURE__ */ notImplemented(\"fs.utimesSync\");\nexport const writeFileSync = /* @__PURE__ */ notImplemented(\"fs.writeFileSync\");\nexport const writeSync = /* @__PURE__ */ notImplemented(\"fs.writeSync\");\nexport const writevSync = /* @__PURE__ */ notImplemented(\"fs.writevSync\");\nexport const statfsSync = /* @__PURE__ */ notImplemented(\"fs.statfsSync\");\nexport const globSync = /* @__PURE__ */ notImplemented(\"fs.globSync\");\n", "import promises from \"node:fs/promises\";\nimport { Dir, Dirent, FileReadStream, FileWriteStream, ReadStream, Stats, WriteStream } from \"./internal/fs/classes.mjs\";\nimport { _toUnixTimestamp, access, accessSync, appendFile, appendFileSync, chmod, chmodSync, chown, chownSync, close, closeSync, copyFile, copyFileSync, cp, cpSync, createReadStream, createWriteStream, exists, existsSync, fchmod, fchmodSync, fchown, fchownSync, fdatasync, fdatasyncSync, fstat, fstatSync, fsync, fsyncSync, ftruncate, ftruncateSync, futimes, futimesSync, glob, lchmod, globSync, lchmodSync, lchown, lchownSync, link, linkSync, lstat, lstatSync, lutimes, lutimesSync, mkdir, mkdirSync, mkdtemp, mkdtempSync, open, openAsBlob, openSync, opendir, opendirSync, read, readFile, readFileSync, readSync, readdir, readdirSync, readlink, readlinkSync, readv, readvSync, realpath, realpathSync, rename, renameSync, rm, rmSync, rmdir, rmdirSync, stat, statSync, statfs, statfsSync, symlink, symlinkSync, truncate, truncateSync, unlink, unlinkSync, unwatchFile, utimes, utimesSync, watch, watchFile, write, writeFile, writeFileSync, writeSync, writev, writevSync } from \"./internal/fs/fs.mjs\";\nimport * as constants from \"./internal/fs/constants.mjs\";\nimport { F_OK, R_OK, W_OK, X_OK } from \"./internal/fs/constants.mjs\";\nexport { F_OK, R_OK, W_OK, X_OK } from \"./internal/fs/constants.mjs\";\nexport { promises, constants };\nexport * from \"./internal/fs/fs.mjs\";\nexport * from \"./internal/fs/classes.mjs\";\nexport default {\n\tF_OK,\n\tR_OK,\n\tW_OK,\n\tX_OK,\n\tconstants,\n\tpromises,\n\tDir,\n\tDirent,\n\tFileReadStream,\n\tFileWriteStream,\n\tReadStream,\n\tStats,\n\tWriteStream,\n\t_toUnixTimestamp,\n\taccess,\n\taccessSync,\n\tappendFile,\n\tappendFileSync,\n\tchmod,\n\tchmodSync,\n\tchown,\n\tchownSync,\n\tclose,\n\tcloseSync,\n\tcopyFile,\n\tcopyFileSync,\n\tcp,\n\tcpSync,\n\tcreateReadStream,\n\tcreateWriteStream,\n\texists,\n\texistsSync,\n\tfchmod,\n\tfchmodSync,\n\tfchown,\n\tfchownSync,\n\tfdatasync,\n\tfdatasyncSync,\n\tfstat,\n\tfstatSync,\n\tfsync,\n\tfsyncSync,\n\tftruncate,\n\tftruncateSync,\n\tfutimes,\n\tfutimesSync,\n\tglob,\n\tlchmod,\n\tglobSync,\n\tlchmodSync,\n\tlchown,\n\tlchownSync,\n\tlink,\n\tlinkSync,\n\tlstat,\n\tlstatSync,\n\tlutimes,\n\tlutimesSync,\n\tmkdir,\n\tmkdirSync,\n\tmkdtemp,\n\tmkdtempSync,\n\topen,\n\topenAsBlob,\n\topenSync,\n\topendir,\n\topendirSync,\n\tread,\n\treadFile,\n\treadFileSync,\n\treadSync,\n\treaddir,\n\treaddirSync,\n\treadlink,\n\treadlinkSync,\n\treadv,\n\treadvSync,\n\trealpath,\n\trealpathSync,\n\trename,\n\trenameSync,\n\trm,\n\trmSync,\n\trmdir,\n\trmdirSync,\n\tstat,\n\tstatSync,\n\tstatfs,\n\tstatfsSync,\n\tsymlink,\n\tsymlinkSync,\n\ttruncate,\n\ttruncateSync,\n\tunlink,\n\tunlinkSync,\n\tunwatchFile,\n\tutimes,\n\tutimesSync,\n\twatch,\n\twatchFile,\n\twrite,\n\twriteFile,\n\twriteFileSync,\n\twriteSync,\n\twritev,\n\twritevSync\n};\n", "import libDefault from 'fs';\nmodule.exports = libDefault;", "var once = require('once')\nvar eos = require('end-of-stream')\nvar fs\n\ntry {\n  fs = require('fs') // we only need fs to get the ReadStream and WriteStream prototypes\n} catch (e) {}\n\nvar noop = function () {}\nvar ancient = /^v?\\.0/.test(process.version)\n\nvar isFn = function (fn) {\n  return typeof fn === 'function'\n}\n\nvar isFS = function (stream) {\n  if (!ancient) return false // newer node version do not need to care about fs is a special way\n  if (!fs) return false // browser\n  return (stream instanceof (fs.ReadStream || noop) || stream instanceof (fs.WriteStream || noop)) && isFn(stream.close)\n}\n\nvar isRequest = function (stream) {\n  return stream.setHeader && isFn(stream.abort)\n}\n\nvar destroyer = function (stream, reading, writing, callback) {\n  callback = once(callback)\n\n  var closed = false\n  stream.on('close', function () {\n    closed = true\n  })\n\n  eos(stream, {readable: reading, writable: writing}, function (err) {\n    if (err) return callback(err)\n    closed = true\n    callback()\n  })\n\n  var destroyed = false\n  return function (err) {\n    if (closed) return\n    if (destroyed) return\n    destroyed = true\n\n    if (isFS(stream)) return stream.close(noop) // use close for fs streams to avoid fd leaks\n    if (isRequest(stream)) return stream.abort() // request.destroy just do .end - .abort is what we want\n\n    if (isFn(stream.destroy)) return stream.destroy()\n\n    callback(err || new Error('stream was destroyed'))\n  }\n}\n\nvar call = function (fn) {\n  fn()\n}\n\nvar pipe = function (from, to) {\n  return from.pipe(to)\n}\n\nvar pump = function () {\n  var streams = Array.prototype.slice.call(arguments)\n  var callback = isFn(streams[streams.length - 1] || noop) && streams.pop() || noop\n\n  if (Array.isArray(streams[0])) streams = streams[0]\n  if (streams.length < 2) throw new Error('pump requires two streams per minimum')\n\n  var error\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1\n    var writing = i > 0\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err\n      if (err) destroys.forEach(call)\n      if (reading) return\n      destroys.forEach(call)\n      callback(error)\n    })\n  })\n\n  return streams.reduce(pipe)\n}\n\nmodule.exports = pump\n", "import libDefault from 'stream';\nmodule.exports = libDefault;", "import libDefault from 'string_decoder';\nmodule.exports = libDefault;", "/*\nCopyright (c) 2014-2021, Matteo Collina <hello@matteocollina.com>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\n\n'use strict'\n\nconst { Transform } = require('stream')\nconst { StringDecoder } = require('string_decoder')\nconst kLast = Symbol('last')\nconst kDecoder = Symbol('decoder')\n\nfunction transform (chunk, enc, cb) {\n  let list\n  if (this.overflow) { // Line buffer is full. Skip to start of next line.\n    const buf = this[kDecoder].write(chunk)\n    list = buf.split(this.matcher)\n\n    if (list.length === 1) return cb() // Line ending not found. Discard entire chunk.\n\n    // Line ending found. Discard trailing fragment of previous line and reset overflow state.\n    list.shift()\n    this.overflow = false\n  } else {\n    this[kLast] += this[kDecoder].write(chunk)\n    list = this[kLast].split(this.matcher)\n  }\n\n  this[kLast] = list.pop()\n\n  for (let i = 0; i < list.length; i++) {\n    try {\n      push(this, this.mapper(list[i]))\n    } catch (error) {\n      return cb(error)\n    }\n  }\n\n  this.overflow = this[kLast].length > this.maxLength\n  if (this.overflow && !this.skipOverflow) {\n    cb(new Error('maximum buffer reached'))\n    return\n  }\n\n  cb()\n}\n\nfunction flush (cb) {\n  // forward any gibberish left in there\n  this[kLast] += this[kDecoder].end()\n\n  if (this[kLast]) {\n    try {\n      push(this, this.mapper(this[kLast]))\n    } catch (error) {\n      return cb(error)\n    }\n  }\n\n  cb()\n}\n\nfunction push (self, val) {\n  if (val !== undefined) {\n    self.push(val)\n  }\n}\n\nfunction noop (incoming) {\n  return incoming\n}\n\nfunction split (matcher, mapper, options) {\n  // Set defaults for any arguments not supplied.\n  matcher = matcher || /\\r?\\n/\n  mapper = mapper || noop\n  options = options || {}\n\n  // Test arguments explicitly.\n  switch (arguments.length) {\n    case 1:\n      // If mapper is only argument.\n      if (typeof matcher === 'function') {\n        mapper = matcher\n        matcher = /\\r?\\n/\n      // If options is only argument.\n      } else if (typeof matcher === 'object' && !(matcher instanceof RegExp) && !matcher[Symbol.split]) {\n        options = matcher\n        matcher = /\\r?\\n/\n      }\n      break\n\n    case 2:\n      // If mapper and options are arguments.\n      if (typeof matcher === 'function') {\n        options = mapper\n        mapper = matcher\n        matcher = /\\r?\\n/\n      // If matcher and options are arguments.\n      } else if (typeof mapper === 'object') {\n        options = mapper\n        mapper = noop\n      }\n  }\n\n  options = Object.assign({}, options)\n  options.autoDestroy = true\n  options.transform = transform\n  options.flush = flush\n  options.readableObjectMode = true\n\n  const stream = new Transform(options)\n\n  stream[kLast] = ''\n  stream[kDecoder] = new StringDecoder('utf8')\n  stream.matcher = matcher\n  stream.mapper = mapper\n  stream.maxLength = options.maxLength\n  stream.skipOverflow = options.skipOverflow || false\n  stream.overflow = false\n  stream._destroy = function (err, cb) {\n    // Weird Node v12 bug that we need to work around\n    this._writableState.errorEmitted = false\n    cb(err)\n  }\n\n  return stream\n}\n\nmodule.exports = split\n", "export class BroadcastChannel {\n\tname = \"\";\n\tonmessage = (message) => {};\n\tonmessageerror = (message) => {};\n\tclose() {}\n\tpostMessage(message) {}\n\tref() {\n\t\treturn this;\n\t}\n\tunref() {\n\t\treturn this;\n\t}\n}\n", "import { EventEmitter } from \"node:events\";\nexport class MessagePort extends EventEmitter {\n\tclose() {}\n\tpostMessage(value, transferList) {}\n\tref() {}\n\tunref() {}\n\tstart() {}\n\taddEventListener(type, listener) {\n\t\tthis.on(type, listener);\n\t}\n\tremoveEventListener(type, listener) {\n\t\tthis.off(type, listener);\n\t}\n\tdispatchEvent(event) {\n\t\treturn this.emit(event.type, event);\n\t}\n}\n", "import { MessagePort } from \"./message-port.mjs\";\nexport class MessageChannel {\n\tport1 = new MessagePort();\n\tport2 = new MessagePort();\n}\n", "import { EventEmitter } from \"node:events\";\nimport { Readable } from \"node:stream\";\nexport class Worker extends EventEmitter {\n\tstdin = null;\n\tstdout = new Readable();\n\tstderr = new Readable();\n\tthreadId = 0;\n\tperformance = { eventLoopUtilization: () => ({\n\t\tidle: 0,\n\t\tactive: 0,\n\t\tutilization: 0\n\t}) };\n\tpostMessage(_value, _transferList) {}\n\tpostMessageToThread(_threadId, _value, _transferList, _timeout) {\n\t\treturn Promise.resolve();\n\t}\n\tref() {}\n\tunref() {}\n\tterminate() {\n\t\treturn Promise.resolve(0);\n\t}\n\tgetHeapSnapshot() {\n\t\treturn Promise.resolve(new Readable());\n\t}\n}\n", "import { BroadcastChannel } from \"./internal/worker_threads/broadcast-channel.mjs\";\nimport { MessageChannel } from \"./internal/worker_threads/message-channel.mjs\";\nimport { MessagePort } from \"./internal/worker_threads/message-port.mjs\";\nimport { Worker } from \"./internal/worker_threads/worker.mjs\";\nimport { notImplemented } from \"../_internal/utils.mjs\";\nexport { BroadcastChannel } from \"./internal/worker_threads/broadcast-channel.mjs\";\nexport { MessageChannel } from \"./internal/worker_threads/message-channel.mjs\";\nexport { MessagePort } from \"./internal/worker_threads/message-port.mjs\";\nexport { Worker } from \"./internal/worker_threads/worker.mjs\";\nconst _environmentData = new Map();\nexport const getEnvironmentData = function getEnvironmentData(key) {\n\treturn _environmentData.get(key);\n};\nexport const setEnvironmentData = function setEnvironmentData(key, value) {\n\t_environmentData.set(key, value);\n};\nexport const isMainThread = true;\nexport const isMarkedAsUntransferable = () => false;\nexport const markAsUntransferable = function markAsUntransferable(value) {};\nexport const markAsUncloneable = () => {};\nexport const moveMessagePortToContext = () => new MessagePort();\nexport const parentPort = null;\nexport const receiveMessageOnPort = () => undefined;\nexport const SHARE_ENV = /* @__PURE__ */ Symbol.for(\"nodejs.worker_threads.SHARE_ENV\");\nexport const resourceLimits = {};\nexport const threadId = 0;\nexport const workerData = null;\nexport const postMessageToThread = /* @__PURE__ */ notImplemented(\"worker_threads.postMessageToThread\");\nexport const isInternalThread = false;\nexport default {\n\tBroadcastChannel,\n\tMessageChannel,\n\tMessagePort,\n\tWorker,\n\tSHARE_ENV,\n\tgetEnvironmentData,\n\tisMainThread,\n\tisMarkedAsUntransferable,\n\tmarkAsUntransferable,\n\tmarkAsUncloneable,\n\tmoveMessagePortToContext,\n\tparentPort,\n\treceiveMessageOnPort,\n\tresourceLimits,\n\tsetEnvironmentData,\n\tpostMessageToThread,\n\tthreadId,\n\tworkerData,\n\tisInternalThread\n};\n", "import libDefault from 'worker_threads';\nmodule.exports = libDefault;", "'use strict'\n\nconst metadata = Symbol.for('pino.metadata')\nconst split = require('split2')\nconst { Duplex } = require('stream')\nconst { parentPort, workerData } = require('worker_threads')\n\nfunction createDeferred () {\n  let resolve\n  let reject\n  const promise = new Promise((_resolve, _reject) => {\n    resolve = _resolve\n    reject = _reject\n  })\n  promise.resolve = resolve\n  promise.reject = reject\n  return promise\n}\n\nmodule.exports = function build (fn, opts = {}) {\n  const waitForConfig = opts.expectPinoConfig === true && workerData?.workerData?.pinoWillSendConfig === true\n  const parseLines = opts.parse === 'lines'\n  const parseLine = typeof opts.parseLine === 'function' ? opts.parseLine : JSON.parse\n  const close = opts.close || defaultClose\n  const stream = split(function (line) {\n    let value\n\n    try {\n      value = parseLine(line)\n    } catch (error) {\n      this.emit('unknown', line, error)\n      return\n    }\n\n    if (value === null) {\n      this.emit('unknown', line, 'Null value ignored')\n      return\n    }\n\n    if (typeof value !== 'object') {\n      value = {\n        data: value,\n        time: Date.now()\n      }\n    }\n\n    if (stream[metadata]) {\n      stream.lastTime = value.time\n      stream.lastLevel = value.level\n      stream.lastObj = value\n    }\n\n    if (parseLines) {\n      return line\n    }\n\n    return value\n  }, { autoDestroy: true })\n\n  stream._destroy = function (err, cb) {\n    const promise = close(err, cb)\n    if (promise && typeof promise.then === 'function') {\n      promise.then(cb, cb)\n    }\n  }\n\n  if (opts.expectPinoConfig === true && workerData?.workerData?.pinoWillSendConfig !== true) {\n    setImmediate(() => {\n      stream.emit('error', new Error('This transport is not compatible with the current version of pino. Please upgrade pino to the latest version.'))\n    })\n  }\n\n  if (opts.metadata !== false) {\n    stream[metadata] = true\n    stream.lastTime = 0\n    stream.lastLevel = 0\n    stream.lastObj = null\n  }\n\n  if (waitForConfig) {\n    let pinoConfig = {}\n    const configReceived = createDeferred()\n    parentPort.on('message', function handleMessage (message) {\n      if (message.code === 'PINO_CONFIG') {\n        pinoConfig = message.config\n        configReceived.resolve()\n        parentPort.off('message', handleMessage)\n      }\n    })\n\n    Object.defineProperties(stream, {\n      levels: {\n        get () { return pinoConfig.levels }\n      },\n      messageKey: {\n        get () { return pinoConfig.messageKey }\n      },\n      errorKey: {\n        get () { return pinoConfig.errorKey }\n      }\n    })\n\n    return configReceived.then(finish)\n  }\n\n  return finish()\n\n  function finish () {\n    let res = fn(stream)\n\n    if (res && typeof res.catch === 'function') {\n      res.catch((err) => {\n        stream.destroy(err)\n      })\n\n      // set it to null to not retain a reference to the promise\n      res = null\n    } else if (opts.enablePipelining && res) {\n      return Duplex.from({ writable: stream, readable: res })\n    }\n\n    return stream\n  }\n}\n\nfunction defaultClose (err, cb) {\n  process.nextTick(cb, err)\n}\n", "'use strict'\n\n/**\n * A set of property names that indicate the value represents an error object.\n *\n * @typedef {string[]} K_ERROR_LIKE_KEYS\n */\n\nmodule.exports = {\n  DATE_FORMAT: 'yyyy-mm-dd HH:MM:ss.l o',\n  DATE_FORMAT_SIMPLE: 'HH:MM:ss.l',\n\n  /**\n   * @type {K_ERROR_LIKE_KEYS}\n   */\n  ERROR_LIKE_KEYS: ['err', 'error'],\n\n  MESSAGE_KEY: 'msg',\n\n  LEVEL_KEY: 'level',\n\n  LEVEL_LABEL: 'levelLabel',\n\n  TIMESTAMP_KEY: 'time',\n\n  LEVELS: {\n    default: 'USERLVL',\n    60: 'FATAL',\n    50: 'ERROR',\n    40: 'WARN',\n    30: 'INFO',\n    20: 'DEBUG',\n    10: 'TRACE'\n  },\n\n  LEVEL_NAMES: {\n    fatal: 60,\n    error: 50,\n    warn: 40,\n    info: 30,\n    debug: 20,\n    trace: 10\n  },\n\n  // Object keys that probably came from a logger like Pino or Bunyan.\n  LOGGER_KEYS: [\n    'pid',\n    'hostname',\n    'name',\n    'level',\n    'time',\n    'timestamp',\n    'caller'\n  ]\n}\n", "'use strict'\n\nmodule.exports = getLevelLabelData\nconst { LEVELS, LEVEL_NAMES } = require('../constants')\n\n/**\n * Given initial settings for custom levels/names and use of only custom props\n * get the level label that corresponds with a given level number\n *\n * @param {boolean} useOnlyCustomProps\n * @param {object} customLevels\n * @param {object} customLevelNames\n *\n * @returns {function} A function that takes a number level and returns the level's label string\n */\nfunction getLevelLabelData (useOnlyCustomProps, customLevels, customLevelNames) {\n  const levels = useOnlyCustomProps ? customLevels || LEVELS : Object.assign({}, LEVELS, customLevels)\n  const levelNames = useOnlyCustomProps ? customLevelNames || LEVEL_NAMES : Object.assign({}, LEVEL_NAMES, customLevelNames)\n  return function (level) {\n    let levelNum = 'default'\n    if (Number.isInteger(+level)) {\n      levelNum = Object.prototype.hasOwnProperty.call(levels, level) ? level : levelNum\n    } else {\n      levelNum = Object.prototype.hasOwnProperty.call(levelNames, level.toLowerCase()) ? levelNames[level.toLowerCase()] : levelNum\n    }\n\n    return [levels[levelNum], levelNum]\n  }\n}\n", "'use strict'\n\nconst nocolor = input => input\nconst plain = {\n  default: nocolor,\n  60: nocolor,\n  50: nocolor,\n  40: nocolor,\n  30: nocolor,\n  20: nocolor,\n  10: nocolor,\n  message: nocolor,\n  greyMessage: nocolor\n}\n\nconst { createColors } = require('colorette')\nconst getLevelLabelData = require('./utils/get-level-label-data')\nconst availableColors = createColors({ useColor: true })\nconst { white, bgRed, red, yellow, green, blue, gray, cyan } = availableColors\n\nconst colored = {\n  default: white,\n  60: bgRed,\n  50: red,\n  40: yellow,\n  30: green,\n  20: blue,\n  10: gray,\n  message: cyan,\n  greyMessage: gray\n}\n\nfunction resolveCustomColoredColorizer (customColors) {\n  return customColors.reduce(\n    function (agg, [level, color]) {\n      agg[level] = typeof availableColors[color] === 'function' ? availableColors[color] : white\n\n      return agg\n    },\n    { default: white, message: cyan, greyMessage: gray }\n  )\n}\n\nfunction colorizeLevel (useOnlyCustomProps) {\n  return function (level, colorizer, { customLevels, customLevelNames } = {}) {\n    const [levelStr, levelNum] = getLevelLabelData(useOnlyCustomProps, customLevels, customLevelNames)(level)\n\n    return Object.prototype.hasOwnProperty.call(colorizer, levelNum) ? colorizer[levelNum](levelStr) : colorizer.default(levelStr)\n  }\n}\n\nfunction plainColorizer (useOnlyCustomProps) {\n  const newPlainColorizer = colorizeLevel(useOnlyCustomProps)\n  const customColoredColorizer = function (level, opts) {\n    return newPlainColorizer(level, plain, opts)\n  }\n  customColoredColorizer.message = plain.message\n  customColoredColorizer.greyMessage = plain.greyMessage\n  customColoredColorizer.colors = createColors({ useColor: false })\n  return customColoredColorizer\n}\n\nfunction coloredColorizer (useOnlyCustomProps) {\n  const newColoredColorizer = colorizeLevel(useOnlyCustomProps)\n  const customColoredColorizer = function (level, opts) {\n    return newColoredColorizer(level, colored, opts)\n  }\n  customColoredColorizer.message = colored.message\n  customColoredColorizer.greyMessage = colored.greyMessage\n  customColoredColorizer.colors = availableColors\n  return customColoredColorizer\n}\n\nfunction customColoredColorizerFactory (customColors, useOnlyCustomProps) {\n  const onlyCustomColored = resolveCustomColoredColorizer(customColors)\n  const customColored = useOnlyCustomProps ? onlyCustomColored : Object.assign({}, colored, onlyCustomColored)\n  const colorizeLevelCustom = colorizeLevel(useOnlyCustomProps)\n\n  const customColoredColorizer = function (level, opts) {\n    return colorizeLevelCustom(level, customColored, opts)\n  }\n  customColoredColorizer.colors = availableColors\n  customColoredColorizer.message = customColoredColorizer.message || customColored.message\n  customColoredColorizer.greyMessage = customColoredColorizer.greyMessage || customColored.greyMessage\n\n  return customColoredColorizer\n}\n\n/**\n * Applies colorization, if possible, to a string representing the passed in\n * `level`. For example, the default colorizer will return a \"green\" colored\n * string for the \"info\" level.\n *\n * @typedef {function} ColorizerFunc\n * @param {string|number} level In either case, the input will map to a color\n * for the specified level or to the color for `USERLVL` if the level is not\n * recognized.\n * @property {function} message Accepts one string parameter that will be\n * colorized to a predefined color.\n * @property {Colorette.Colorette} colors Available color functions based on `useColor` (or `colorize`) context\n */\n\n/**\n * Factory function get a function to colorized levels. The returned function\n * also includes a `.message(str)` method to colorize strings.\n *\n * @param {boolean} [useColors=false] When `true` a function that applies standard\n * terminal colors is returned.\n * @param {array[]} [customColors] Tuple where first item of each array is the\n * level index and the second item is the color\n * @param {boolean} [useOnlyCustomProps] When `true`, only use the provided\n * custom colors provided and not fallback to default\n *\n * @returns {ColorizerFunc} `function (level) {}` has a `.message(str)` method to\n * apply colorization to a string. The core function accepts either an integer\n * `level` or a `string` level. The integer level will map to a known level\n * string or to `USERLVL` if not known.  The string `level` will map to the same\n * colors as the integer `level` and will also default to `USERLVL` if the given\n * string is not a recognized level name.\n */\nmodule.exports = function getColorizer (useColors = false, customColors, useOnlyCustomProps) {\n  if (useColors && customColors !== undefined) {\n    return customColoredColorizerFactory(customColors, useOnlyCustomProps)\n  } else if (useColors) {\n    return coloredColorizer(useOnlyCustomProps)\n  }\n\n  return plainColorizer(useOnlyCustomProps)\n}\n", "import libDefault from 'events';\nmodule.exports = libDefault;", "export const isRegExp = (val) => val instanceof RegExp;\nexport const isDate = (val) => val instanceof Date;\nexport const isArray = (val) => Array.isArray(val);\nexport const isBoolean = (val) => typeof val === \"boolean\";\nexport const isNull = (val) => val === null;\nexport const isNullOrUndefined = (val) => val === null || val === undefined;\nexport const isNumber = (val) => typeof val === \"number\";\nexport const isString = (val) => typeof val === \"string\";\nexport const isSymbol = (val) => typeof val === \"symbol\";\nexport const isUndefined = (val) => val === undefined;\nexport const isFunction = (val) => typeof val === \"function\";\nexport const isBuffer = (val) => {\n\treturn val && typeof val === \"object\" && typeof val.copy === \"function\" && typeof val.fill === \"function\" && typeof val.readUInt8 === \"function\";\n};\nexport const isDeepStrictEqual = (a, b) => JSON.stringify(a) === JSON.stringify(b);\nexport const isObject = (val) => val !== null && typeof val === \"object\" && Object.getPrototypeOf(val).isPrototypeOf(Object);\nexport const isError = (val) => val instanceof Error;\nexport const isPrimitive = (val) => {\n\tif (typeof val === \"object\") {\n\t\treturn val === null;\n\t}\n\treturn typeof val !== \"function\";\n};\n", "export const log = (...args) => {\n\tconsole.log(...args);\n};\nexport const debuglog = (section, _cb) => {\n\tconst fn = (msg, ...params) => {\n\t\tif (fn.enabled) {\n\t\t\tconsole.debug(`[${section}] ${msg}`, ...params);\n\t\t}\n\t};\n\tfn.enabled = true;\n\treturn fn;\n};\nexport const debug = debuglog;\nexport const inspect = (object) => JSON.stringify(object, null, 2);\nexport const format = (...args) => _format(...args);\nexport const formatWithOptions = (_options, ...args) => _format(...args);\nfunction _format(fmt, ...args) {\n\tconst re = /(%?)(%([djos]))/g;\n\tif (args.length > 0) {\n\t\tfmt = fmt.replace(re, (match, escaped, ptn, flag) => {\n\t\t\tlet arg = args.shift();\n\t\t\tswitch (flag) {\n\t\t\t\tcase \"o\":\n\t\t\t\t\tif (Array.isArray(arg)) {\n\t\t\t\t\t\targ = JSON.stringify(arg);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"s\":\n\t\t\t\t\targ = \"\" + arg;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"d\":\n\t\t\t\t\targ = Number(arg);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"j\":\n\t\t\t\t\targ = JSON.stringify(arg);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!escaped) {\n\t\t\t\treturn arg;\n\t\t\t}\n\t\t\targs.unshift(arg);\n\t\t\treturn match;\n\t\t});\n\t}\n\tif (args.length > 0) {\n\t\tfmt += \" \" + args.join(\" \");\n\t}\n\tfmt = fmt.replace(/%{2}/g, \"%\");\n\treturn \"\" + fmt;\n}\n", "import types from \"node:util/types\";\nimport { notImplemented } from \"../_internal/utils.mjs\";\nimport { inherits } from \"./internal/util/inherits.mjs\";\nimport { promisify } from \"./internal/util/promisify.mjs\";\nimport { MIMEParams, MIMEType } from \"./internal/util/mime.mjs\";\nimport { isArray, isBoolean, isBuffer, isDate, isDeepStrictEqual, isError, isFunction, isNull, isNullOrUndefined, isNumber, isObject, isPrimitive, isRegExp, isString, isSymbol, isUndefined } from \"./internal/util/legacy-types.mjs\";\nimport { debug, debuglog, format, formatWithOptions, inspect, log } from \"./internal/util/log.mjs\";\nexport { MIMEParams, MIMEType } from \"./internal/util/mime.mjs\";\nexport * from \"./internal/util/legacy-types.mjs\";\nexport * from \"./internal/util/log.mjs\";\nexport { inherits } from \"./internal/util/inherits.mjs\";\nexport { promisify } from \"./internal/util/promisify.mjs\";\nexport { default as types } from \"node:util/types\";\nexport const TextDecoder = globalThis.TextDecoder;\nexport const TextEncoder = globalThis.TextEncoder;\nexport const deprecate = (fn) => fn;\nexport const _errnoException = /* @__PURE__ */ notImplemented(\"util._errnoException\");\nexport const _exceptionWithHostPort = /* @__PURE__ */ notImplemented(\"util._exceptionWithHostPort\");\nexport const _extend = /* @__PURE__ */ notImplemented(\"util._extend\");\nexport const aborted = /* @__PURE__ */ notImplemented(\"util.aborted\");\nexport const callbackify = /* @__PURE__ */ notImplemented(\"util.callbackify\");\nexport const getSystemErrorMap = /* @__PURE__ */ notImplemented(\"util.getSystemErrorMap\");\nexport const getSystemErrorName = /* @__PURE__ */ notImplemented(\"util.getSystemErrorName\");\nexport const toUSVString = /* @__PURE__ */ notImplemented(\"util.toUSVString\");\nexport const stripVTControlCharacters = /* @__PURE__ */ notImplemented(\"util.stripVTControlCharacters\");\nexport const transferableAbortController = /* @__PURE__ */ notImplemented(\"util.transferableAbortController\");\nexport const transferableAbortSignal = /* @__PURE__ */ notImplemented(\"util.transferableAbortSignal\");\nexport const parseArgs = /* @__PURE__ */ notImplemented(\"util.parseArgs\");\nexport const parseEnv = /* @__PURE__ */ notImplemented(\"util.parseEnv\");\nexport const styleText = /* @__PURE__ */ notImplemented(\"util.styleText\");\n/** @deprecated */\nexport const getCallSite = /* @__PURE__ */ notImplemented(\"util.getCallSite\");\nexport const getCallSites = /* @__PURE__ */ notImplemented(\"util.getCallSites\");\nexport const getSystemErrorMessage = /* @__PURE__ */ notImplemented(\"util.getSystemErrorMessage\");\nexport default {\n\t_errnoException,\n\t_exceptionWithHostPort,\n\t_extend,\n\taborted,\n\tcallbackify,\n\tdeprecate,\n\tgetCallSite,\n\tgetCallSites,\n\tgetSystemErrorMessage,\n\tgetSystemErrorMap,\n\tgetSystemErrorName,\n\tinherits,\n\tpromisify,\n\tstripVTControlCharacters,\n\ttoUSVString,\n\tTextDecoder,\n\tTextEncoder,\n\ttypes,\n\ttransferableAbortController,\n\ttransferableAbortSignal,\n\tparseArgs,\n\tparseEnv,\n\tstyleText,\n\tMIMEParams,\n\tMIMEType,\n\tisArray,\n\tisBoolean,\n\tisBuffer,\n\tisDate,\n\tisDeepStrictEqual,\n\tisError,\n\tisFunction,\n\tisNull,\n\tisNullOrUndefined,\n\tisNumber,\n\tisObject,\n\tisPrimitive,\n\tisRegExp,\n\tisString,\n\tisSymbol,\n\tisUndefined,\n\tdebug,\n\tdebuglog,\n\tformat,\n\tformatWithOptions,\n\tinspect,\n\tlog\n};\n", "import {\n  _errnoException,\n  _exceptionWithHostPort,\n  getSystemErrorMap,\n  getSystemErrorName,\n  isBoolean,\n  isBuffer,\n  isDate,\n  isError,\n  isFunction,\n  isNull,\n  isNullOrUndefined,\n  isNumber,\n  isObject,\n  isPrimitive,\n  isRegExp,\n  isString,\n  isSymbol,\n  isUndefined,\n  parseEnv,\n  styleText\n} from \"unenv/node/util\";\nexport {\n  _errnoException,\n  _exceptionWithHostPort,\n  getSystemErrorMap,\n  getSystemErrorName,\n  isBoolean,\n  isBuffer,\n  isDate,\n  isError,\n  isFunction,\n  isNull,\n  isNullOrUndefined,\n  isNumber,\n  isObject,\n  isPrimitive,\n  isRegExp,\n  isString,\n  isSymbol,\n  isUndefined,\n  parseEnv,\n  styleText\n} from \"unenv/node/util\";\nconst workerdUtil = process.getBuiltinModule(\"node:util\");\nexport const {\n  MIMEParams,\n  MIMEType,\n  TextDecoder,\n  TextEncoder,\n  // @ts-expect-error missing types?\n  _extend,\n  aborted,\n  callbackify,\n  debug,\n  debuglog,\n  deprecate,\n  format,\n  formatWithOptions,\n  // @ts-expect-error unknown type\n  getCallSite,\n  inherits,\n  inspect,\n  isArray,\n  isDeepStrictEqual,\n  log,\n  parseArgs,\n  promisify,\n  stripVTControlCharacters,\n  toUSVString,\n  transferableAbortController,\n  transferableAbortSignal\n} = workerdUtil;\nexport const types = workerdUtil.types;\nexport default {\n  /**\n   * manually unroll unenv-polyfilled-symbols to make it tree-shakeable\n   */\n  _errnoException,\n  _exceptionWithHostPort,\n  // @ts-expect-error unenv has unknown type\n  getSystemErrorMap,\n  // @ts-expect-error unenv has unknown type\n  getSystemErrorName,\n  isBoolean,\n  isBuffer,\n  isDate,\n  isError,\n  isFunction,\n  isNull,\n  isNullOrUndefined,\n  isNumber,\n  isObject,\n  isPrimitive,\n  isRegExp,\n  isString,\n  isSymbol,\n  isUndefined,\n  // @ts-expect-error unenv has unknown type\n  parseEnv,\n  // @ts-expect-error unenv has unknown type\n  styleText,\n  /**\n   * manually unroll workerd-polyfilled-symbols to make it tree-shakeable\n   */\n  _extend,\n  aborted,\n  callbackify,\n  debug,\n  debuglog,\n  deprecate,\n  format,\n  formatWithOptions,\n  getCallSite,\n  inherits,\n  inspect,\n  isArray,\n  isDeepStrictEqual,\n  log,\n  MIMEParams,\n  MIMEType,\n  parseArgs,\n  promisify,\n  stripVTControlCharacters,\n  TextDecoder,\n  TextEncoder,\n  toUSVString,\n  transferableAbortController,\n  transferableAbortSignal,\n  // special-cased deep merged symbols\n  types\n};\n", "import libDefault from 'util';\nmodule.exports = libDefault;", "import libDefault from 'path';\nmodule.exports = libDefault;", "'use strict'\n\n/* global SharedArrayBuffer, Atomics */\n\nif (typeof SharedArrayBuffer !== 'undefined' && typeof Atomics !== 'undefined') {\n  const nil = new Int32Array(new SharedArrayBuffer(4))\n\n  function sleep (ms) {\n    // also filters out NaN, non-number types, including empty strings, but allows bigints\n    const valid = ms > 0 && ms < Infinity \n    if (valid === false) {\n      if (typeof ms !== 'number' && typeof ms !== 'bigint') {\n        throw TypeError('sleep: ms must be a number')\n      }\n      throw RangeError('sleep: ms must be a number that is greater than 0 but less than Infinity')\n    }\n\n    Atomics.wait(nil, 0, 0, Number(ms))\n  }\n  module.exports = sleep\n} else {\n\n  function sleep (ms) {\n    // also filters out NaN, non-number types, including empty strings, but allows bigints\n    const valid = ms > 0 && ms < Infinity \n    if (valid === false) {\n      if (typeof ms !== 'number' && typeof ms !== 'bigint') {\n        throw TypeError('sleep: ms must be a number')\n      }\n      throw RangeError('sleep: ms must be a number that is greater than 0 but less than Infinity')\n    }\n    const target = Date.now() + Number(ms)\n    while (target > Date.now()){}\n  }\n\n  module.exports = sleep\n\n}\n", "import libDefault from 'assert';\nmodule.exports = libDefault;", "'use strict'\n\nconst fs = require('fs')\nconst EventEmitter = require('events')\nconst inherits = require('util').inherits\nconst path = require('path')\nconst sleep = require('atomic-sleep')\nconst assert = require('assert')\n\nconst BUSY_WRITE_TIMEOUT = 100\nconst kEmptyBuffer = Buffer.allocUnsafe(0)\n\n// 16 KB. Don't write more than docker buffer size.\n// https://github.com/moby/moby/blob/513ec73831269947d38a644c278ce3cac36783b2/daemon/logger/copier.go#L13\nconst MAX_WRITE = 16 * 1024\n\nconst kContentModeBuffer = 'buffer'\nconst kContentModeUtf8 = 'utf8'\n\nconst [major, minor] = (process.versions.node || '0.0').split('.').map(Number)\nconst kCopyBuffer = major >= 22 && minor >= 7\n\nfunction openFile (file, sonic) {\n  sonic._opening = true\n  sonic._writing = true\n  sonic._asyncDrainScheduled = false\n\n  // NOTE: 'error' and 'ready' events emitted below only relevant when sonic.sync===false\n  // for sync mode, there is no way to add a listener that will receive these\n\n  function fileOpened (err, fd) {\n    if (err) {\n      sonic._reopening = false\n      sonic._writing = false\n      sonic._opening = false\n\n      if (sonic.sync) {\n        process.nextTick(() => {\n          if (sonic.listenerCount('error') > 0) {\n            sonic.emit('error', err)\n          }\n        })\n      } else {\n        sonic.emit('error', err)\n      }\n      return\n    }\n\n    const reopening = sonic._reopening\n\n    sonic.fd = fd\n    sonic.file = file\n    sonic._reopening = false\n    sonic._opening = false\n    sonic._writing = false\n\n    if (sonic.sync) {\n      process.nextTick(() => sonic.emit('ready'))\n    } else {\n      sonic.emit('ready')\n    }\n\n    if (sonic.destroyed) {\n      return\n    }\n\n    // start\n    if ((!sonic._writing && sonic._len > sonic.minLength) || sonic._flushPending) {\n      sonic._actualWrite()\n    } else if (reopening) {\n      process.nextTick(() => sonic.emit('drain'))\n    }\n  }\n\n  const flags = sonic.append ? 'a' : 'w'\n  const mode = sonic.mode\n\n  if (sonic.sync) {\n    try {\n      if (sonic.mkdir) fs.mkdirSync(path.dirname(file), { recursive: true })\n      const fd = fs.openSync(file, flags, mode)\n      fileOpened(null, fd)\n    } catch (err) {\n      fileOpened(err)\n      throw err\n    }\n  } else if (sonic.mkdir) {\n    fs.mkdir(path.dirname(file), { recursive: true }, (err) => {\n      if (err) return fileOpened(err)\n      fs.open(file, flags, mode, fileOpened)\n    })\n  } else {\n    fs.open(file, flags, mode, fileOpened)\n  }\n}\n\nfunction SonicBoom (opts) {\n  if (!(this instanceof SonicBoom)) {\n    return new SonicBoom(opts)\n  }\n\n  let { fd, dest, minLength, maxLength, maxWrite, periodicFlush, sync, append = true, mkdir, retryEAGAIN, fsync, contentMode, mode } = opts || {}\n\n  fd = fd || dest\n\n  this._len = 0\n  this.fd = -1\n  this._bufs = []\n  this._lens = []\n  this._writing = false\n  this._ending = false\n  this._reopening = false\n  this._asyncDrainScheduled = false\n  this._flushPending = false\n  this._hwm = Math.max(minLength || 0, 16387)\n  this.file = null\n  this.destroyed = false\n  this.minLength = minLength || 0\n  this.maxLength = maxLength || 0\n  this.maxWrite = maxWrite || MAX_WRITE\n  this._periodicFlush = periodicFlush || 0\n  this._periodicFlushTimer = undefined\n  this.sync = sync || false\n  this.writable = true\n  this._fsync = fsync || false\n  this.append = append || false\n  this.mode = mode\n  this.retryEAGAIN = retryEAGAIN || (() => true)\n  this.mkdir = mkdir || false\n\n  let fsWriteSync\n  let fsWrite\n  if (contentMode === kContentModeBuffer) {\n    this._writingBuf = kEmptyBuffer\n    this.write = writeBuffer\n    this.flush = flushBuffer\n    this.flushSync = flushBufferSync\n    this._actualWrite = actualWriteBuffer\n    fsWriteSync = () => fs.writeSync(this.fd, this._writingBuf)\n    fsWrite = () => fs.write(this.fd, this._writingBuf, this.release)\n  } else if (contentMode === undefined || contentMode === kContentModeUtf8) {\n    this._writingBuf = ''\n    this.write = write\n    this.flush = flush\n    this.flushSync = flushSync\n    this._actualWrite = actualWrite\n    fsWriteSync = () => fs.writeSync(this.fd, this._writingBuf, 'utf8')\n    fsWrite = () => fs.write(this.fd, this._writingBuf, 'utf8', this.release)\n  } else {\n    throw new Error(`SonicBoom supports \"${kContentModeUtf8}\" and \"${kContentModeBuffer}\", but passed ${contentMode}`)\n  }\n\n  if (typeof fd === 'number') {\n    this.fd = fd\n    process.nextTick(() => this.emit('ready'))\n  } else if (typeof fd === 'string') {\n    openFile(fd, this)\n  } else {\n    throw new Error('SonicBoom supports only file descriptors and files')\n  }\n  if (this.minLength >= this.maxWrite) {\n    throw new Error(`minLength should be smaller than maxWrite (${this.maxWrite})`)\n  }\n\n  this.release = (err, n) => {\n    if (err) {\n      if ((err.code === 'EAGAIN' || err.code === 'EBUSY') && this.retryEAGAIN(err, this._writingBuf.length, this._len - this._writingBuf.length)) {\n        if (this.sync) {\n          // This error code should not happen in sync mode, because it is\n          // not using the underlining operating system asynchronous functions.\n          // However it happens, and so we handle it.\n          // Ref: https://github.com/pinojs/pino/issues/783\n          try {\n            sleep(BUSY_WRITE_TIMEOUT)\n            this.release(undefined, 0)\n          } catch (err) {\n            this.release(err)\n          }\n        } else {\n          // Let's give the destination some time to process the chunk.\n          setTimeout(fsWrite, BUSY_WRITE_TIMEOUT)\n        }\n      } else {\n        this._writing = false\n\n        this.emit('error', err)\n      }\n      return\n    }\n\n    this.emit('write', n)\n    const releasedBufObj = releaseWritingBuf(this._writingBuf, this._len, n)\n    this._len = releasedBufObj.len\n    this._writingBuf = releasedBufObj.writingBuf\n\n    if (this._writingBuf.length) {\n      if (!this.sync) {\n        fsWrite()\n        return\n      }\n\n      try {\n        do {\n          const n = fsWriteSync()\n          const releasedBufObj = releaseWritingBuf(this._writingBuf, this._len, n)\n          this._len = releasedBufObj.len\n          this._writingBuf = releasedBufObj.writingBuf\n        } while (this._writingBuf.length)\n      } catch (err) {\n        this.release(err)\n        return\n      }\n    }\n\n    if (this._fsync) {\n      fs.fsyncSync(this.fd)\n    }\n\n    const len = this._len\n    if (this._reopening) {\n      this._writing = false\n      this._reopening = false\n      this.reopen()\n    } else if (len > this.minLength) {\n      this._actualWrite()\n    } else if (this._ending) {\n      if (len > 0) {\n        this._actualWrite()\n      } else {\n        this._writing = false\n        actualClose(this)\n      }\n    } else {\n      this._writing = false\n      if (this.sync) {\n        if (!this._asyncDrainScheduled) {\n          this._asyncDrainScheduled = true\n          process.nextTick(emitDrain, this)\n        }\n      } else {\n        this.emit('drain')\n      }\n    }\n  }\n\n  this.on('newListener', function (name) {\n    if (name === 'drain') {\n      this._asyncDrainScheduled = false\n    }\n  })\n\n  if (this._periodicFlush !== 0) {\n    this._periodicFlushTimer = setInterval(() => this.flush(null), this._periodicFlush)\n    this._periodicFlushTimer.unref()\n  }\n}\n\n/**\n * Release the writingBuf after fs.write n bytes data\n * @param {string | Buffer} writingBuf - currently writing buffer, usually be instance._writingBuf.\n * @param {number} len - currently buffer length, usually be instance._len.\n * @param {number} n - number of bytes fs already written\n * @returns {{writingBuf: string | Buffer, len: number}} released writingBuf and length\n */\nfunction releaseWritingBuf (writingBuf, len, n) {\n  // if Buffer.byteLength is equal to n, that means writingBuf contains no multi-byte character\n  if (typeof writingBuf === 'string' && Buffer.byteLength(writingBuf) !== n) {\n    // Since the fs.write callback parameter `n` means how many bytes the passed of string\n    // We calculate the original string length for avoiding the multi-byte character issue\n    n = Buffer.from(writingBuf).subarray(0, n).toString().length\n  }\n  len = Math.max(len - n, 0)\n  writingBuf = writingBuf.slice(n)\n  return { writingBuf, len }\n}\n\nfunction emitDrain (sonic) {\n  const hasListeners = sonic.listenerCount('drain') > 0\n  if (!hasListeners) return\n  sonic._asyncDrainScheduled = false\n  sonic.emit('drain')\n}\n\ninherits(SonicBoom, EventEmitter)\n\nfunction mergeBuf (bufs, len) {\n  if (bufs.length === 0) {\n    return kEmptyBuffer\n  }\n\n  if (bufs.length === 1) {\n    return bufs[0]\n  }\n\n  return Buffer.concat(bufs, len)\n}\n\nfunction write (data) {\n  if (this.destroyed) {\n    throw new Error('SonicBoom destroyed')\n  }\n\n  const len = this._len + data.length\n  const bufs = this._bufs\n\n  if (this.maxLength && len > this.maxLength) {\n    this.emit('drop', data)\n    return this._len < this._hwm\n  }\n\n  if (\n    bufs.length === 0 ||\n    bufs[bufs.length - 1].length + data.length > this.maxWrite\n  ) {\n    bufs.push('' + data)\n  } else {\n    bufs[bufs.length - 1] += data\n  }\n\n  this._len = len\n\n  if (!this._writing && this._len >= this.minLength) {\n    this._actualWrite()\n  }\n\n  return this._len < this._hwm\n}\n\nfunction writeBuffer (data) {\n  if (this.destroyed) {\n    throw new Error('SonicBoom destroyed')\n  }\n\n  const len = this._len + data.length\n  const bufs = this._bufs\n  const lens = this._lens\n\n  if (this.maxLength && len > this.maxLength) {\n    this.emit('drop', data)\n    return this._len < this._hwm\n  }\n\n  if (\n    bufs.length === 0 ||\n    lens[lens.length - 1] + data.length > this.maxWrite\n  ) {\n    bufs.push([data])\n    lens.push(data.length)\n  } else {\n    bufs[bufs.length - 1].push(data)\n    lens[lens.length - 1] += data.length\n  }\n\n  this._len = len\n\n  if (!this._writing && this._len >= this.minLength) {\n    this._actualWrite()\n  }\n\n  return this._len < this._hwm\n}\n\nfunction callFlushCallbackOnDrain (cb) {\n  this._flushPending = true\n  const onDrain = () => {\n    // only if _fsync is false to avoid double fsync\n    if (!this._fsync) {\n      try {\n        fs.fsync(this.fd, (err) => {\n          this._flushPending = false\n          cb(err)\n        })\n      } catch (err) {\n        cb(err)\n      }\n    } else {\n      this._flushPending = false\n      cb()\n    }\n    this.off('error', onError)\n  }\n  const onError = (err) => {\n    this._flushPending = false\n    cb(err)\n    this.off('drain', onDrain)\n  }\n\n  this.once('drain', onDrain)\n  this.once('error', onError)\n}\n\nfunction flush (cb) {\n  if (cb != null && typeof cb !== 'function') {\n    throw new Error('flush cb must be a function')\n  }\n\n  if (this.destroyed) {\n    const error = new Error('SonicBoom destroyed')\n    if (cb) {\n      cb(error)\n      return\n    }\n\n    throw error\n  }\n\n  if (this.minLength <= 0) {\n    cb?.()\n    return\n  }\n\n  if (cb) {\n    callFlushCallbackOnDrain.call(this, cb)\n  }\n\n  if (this._writing) {\n    return\n  }\n\n  if (this._bufs.length === 0) {\n    this._bufs.push('')\n  }\n\n  this._actualWrite()\n}\n\nfunction flushBuffer (cb) {\n  if (cb != null && typeof cb !== 'function') {\n    throw new Error('flush cb must be a function')\n  }\n\n  if (this.destroyed) {\n    const error = new Error('SonicBoom destroyed')\n    if (cb) {\n      cb(error)\n      return\n    }\n\n    throw error\n  }\n\n  if (this.minLength <= 0) {\n    cb?.()\n    return\n  }\n\n  if (cb) {\n    callFlushCallbackOnDrain.call(this, cb)\n  }\n\n  if (this._writing) {\n    return\n  }\n\n  if (this._bufs.length === 0) {\n    this._bufs.push([])\n    this._lens.push(0)\n  }\n\n  this._actualWrite()\n}\n\nSonicBoom.prototype.reopen = function (file) {\n  if (this.destroyed) {\n    throw new Error('SonicBoom destroyed')\n  }\n\n  if (this._opening) {\n    this.once('ready', () => {\n      this.reopen(file)\n    })\n    return\n  }\n\n  if (this._ending) {\n    return\n  }\n\n  if (!this.file) {\n    throw new Error('Unable to reopen a file descriptor, you must pass a file to SonicBoom')\n  }\n\n  if (file) {\n    this.file = file\n  }\n  this._reopening = true\n\n  if (this._writing) {\n    return\n  }\n\n  const fd = this.fd\n  this.once('ready', () => {\n    if (fd !== this.fd) {\n      fs.close(fd, (err) => {\n        if (err) {\n          return this.emit('error', err)\n        }\n      })\n    }\n  })\n\n  openFile(this.file, this)\n}\n\nSonicBoom.prototype.end = function () {\n  if (this.destroyed) {\n    throw new Error('SonicBoom destroyed')\n  }\n\n  if (this._opening) {\n    this.once('ready', () => {\n      this.end()\n    })\n    return\n  }\n\n  if (this._ending) {\n    return\n  }\n\n  this._ending = true\n\n  if (this._writing) {\n    return\n  }\n\n  if (this._len > 0 && this.fd >= 0) {\n    this._actualWrite()\n  } else {\n    actualClose(this)\n  }\n}\n\nfunction flushSync () {\n  if (this.destroyed) {\n    throw new Error('SonicBoom destroyed')\n  }\n\n  if (this.fd < 0) {\n    throw new Error('sonic boom is not ready yet')\n  }\n\n  if (!this._writing && this._writingBuf.length > 0) {\n    this._bufs.unshift(this._writingBuf)\n    this._writingBuf = ''\n  }\n\n  let buf = ''\n  while (this._bufs.length || buf) {\n    if (buf.length <= 0) {\n      buf = this._bufs[0]\n    }\n    try {\n      const n = fs.writeSync(this.fd, buf, 'utf8')\n      const releasedBufObj = releaseWritingBuf(buf, this._len, n)\n      buf = releasedBufObj.writingBuf\n      this._len = releasedBufObj.len\n      if (buf.length <= 0) {\n        this._bufs.shift()\n      }\n    } catch (err) {\n      const shouldRetry = err.code === 'EAGAIN' || err.code === 'EBUSY'\n      if (shouldRetry && !this.retryEAGAIN(err, buf.length, this._len - buf.length)) {\n        throw err\n      }\n\n      sleep(BUSY_WRITE_TIMEOUT)\n    }\n  }\n\n  try {\n    fs.fsyncSync(this.fd)\n  } catch {\n    // Skip the error. The fd might not support fsync.\n  }\n}\n\nfunction flushBufferSync () {\n  if (this.destroyed) {\n    throw new Error('SonicBoom destroyed')\n  }\n\n  if (this.fd < 0) {\n    throw new Error('sonic boom is not ready yet')\n  }\n\n  if (!this._writing && this._writingBuf.length > 0) {\n    this._bufs.unshift([this._writingBuf])\n    this._writingBuf = kEmptyBuffer\n  }\n\n  let buf = kEmptyBuffer\n  while (this._bufs.length || buf.length) {\n    if (buf.length <= 0) {\n      buf = mergeBuf(this._bufs[0], this._lens[0])\n    }\n    try {\n      const n = fs.writeSync(this.fd, buf)\n      buf = buf.subarray(n)\n      this._len = Math.max(this._len - n, 0)\n      if (buf.length <= 0) {\n        this._bufs.shift()\n        this._lens.shift()\n      }\n    } catch (err) {\n      const shouldRetry = err.code === 'EAGAIN' || err.code === 'EBUSY'\n      if (shouldRetry && !this.retryEAGAIN(err, buf.length, this._len - buf.length)) {\n        throw err\n      }\n\n      sleep(BUSY_WRITE_TIMEOUT)\n    }\n  }\n}\n\nSonicBoom.prototype.destroy = function () {\n  if (this.destroyed) {\n    return\n  }\n  actualClose(this)\n}\n\nfunction actualWrite () {\n  const release = this.release\n  this._writing = true\n  this._writingBuf = this._writingBuf || this._bufs.shift() || ''\n\n  if (this.sync) {\n    try {\n      const written = fs.writeSync(this.fd, this._writingBuf, 'utf8')\n      release(null, written)\n    } catch (err) {\n      release(err)\n    }\n  } else {\n    fs.write(this.fd, this._writingBuf, 'utf8', release)\n  }\n}\n\nfunction actualWriteBuffer () {\n  const release = this.release\n  this._writing = true\n  this._writingBuf = this._writingBuf.length ? this._writingBuf : mergeBuf(this._bufs.shift(), this._lens.shift())\n\n  if (this.sync) {\n    try {\n      const written = fs.writeSync(this.fd, this._writingBuf)\n      release(null, written)\n    } catch (err) {\n      release(err)\n    }\n  } else {\n    // fs.write will need to copy string to buffer anyway so\n    // we do it here to avoid the overhead of calculating the buffer size\n    // in releaseWritingBuf.\n    if (kCopyBuffer) {\n      this._writingBuf = Buffer.from(this._writingBuf)\n    }\n    fs.write(this.fd, this._writingBuf, release)\n  }\n}\n\nfunction actualClose (sonic) {\n  if (sonic.fd === -1) {\n    sonic.once('ready', actualClose.bind(null, sonic))\n    return\n  }\n\n  if (sonic._periodicFlushTimer !== undefined) {\n    clearInterval(sonic._periodicFlushTimer)\n  }\n\n  sonic.destroyed = true\n  sonic._bufs = []\n  sonic._lens = []\n\n  assert(typeof sonic.fd === 'number', `sonic.fd must be a number, got ${typeof sonic.fd}`)\n  try {\n    fs.fsync(sonic.fd, closeWrapped)\n  } catch {\n  }\n\n  function closeWrapped () {\n    // We skip errors in fsync\n\n    if (sonic.fd !== 1 && sonic.fd !== 2) {\n      fs.close(sonic.fd, done)\n    } else {\n      done()\n    }\n  }\n\n  function done (err) {\n    if (err) {\n      sonic.emit('error', err)\n      return\n    }\n\n    if (sonic._ending && !sonic._writing) {\n      sonic.emit('finish')\n    }\n    sonic.emit('close')\n  }\n}\n\n/**\n * These export configurations enable JS and TS developers\n * to consumer SonicBoom in whatever way best suits their needs.\n * Some examples of supported import syntax includes:\n * - `const SonicBoom = require('SonicBoom')`\n * - `const { SonicBoom } = require('SonicBoom')`\n * - `import * as SonicBoom from 'SonicBoom'`\n * - `import { SonicBoom } from 'SonicBoom'`\n * - `import SonicBoom from 'SonicBoom'`\n */\nSonicBoom.SonicBoom = SonicBoom\nSonicBoom.default = SonicBoom\nmodule.exports = SonicBoom\n", "'use strict'\n\nmodule.exports = function noop () {}\n", "'use strict'\n\nconst refs = {\n  exit: [],\n  beforeExit: []\n}\nconst functions = {\n  exit: onExit,\n  beforeExit: onBeforeExit\n}\n\nlet registry\n\nfunction ensureRegistry () {\n  if (registry === undefined) {\n    registry = new FinalizationRegistry(clear)\n  }\n}\n\nfunction install (event) {\n  if (refs[event].length > 0) {\n    return\n  }\n\n  process.on(event, functions[event])\n}\n\nfunction uninstall (event) {\n  if (refs[event].length > 0) {\n    return\n  }\n  process.removeListener(event, functions[event])\n  if (refs.exit.length === 0 && refs.beforeExit.length === 0) {\n    registry = undefined\n  }\n}\n\nfunction onExit () {\n  callRefs('exit')\n}\n\nfunction onBeforeExit () {\n  callRefs('beforeExit')\n}\n\nfunction callRefs (event) {\n  for (const ref of refs[event]) {\n    const obj = ref.deref()\n    const fn = ref.fn\n\n    // This should always happen, however GC is\n    // undeterministic so it might not happen.\n    /* istanbul ignore else */\n    if (obj !== undefined) {\n      fn(obj, event)\n    }\n  }\n  refs[event] = []\n}\n\nfunction clear (ref) {\n  for (const event of ['exit', 'beforeExit']) {\n    const index = refs[event].indexOf(ref)\n    refs[event].splice(index, index + 1)\n    uninstall(event)\n  }\n}\n\nfunction _register (event, obj, fn) {\n  if (obj === undefined) {\n    throw new Error('the object can\\'t be undefined')\n  }\n  install(event)\n  const ref = new WeakRef(obj)\n  ref.fn = fn\n\n  ensureRegistry()\n  registry.register(obj, ref)\n  refs[event].push(ref)\n}\n\nfunction register (obj, fn) {\n  _register('exit', obj, fn)\n}\n\nfunction registerBeforeExit (obj, fn) {\n  _register('beforeExit', obj, fn)\n}\n\nfunction unregister (obj) {\n  if (registry === undefined) {\n    return\n  }\n  registry.unregister(obj)\n  for (const event of ['exit', 'beforeExit']) {\n    refs[event] = refs[event].filter((ref) => {\n      const _obj = ref.deref()\n      return _obj && _obj !== obj\n    })\n    uninstall(event)\n  }\n}\n\nmodule.exports = {\n  register,\n  registerBeforeExit,\n  unregister\n}\n", "'use strict'\n\nmodule.exports = buildSafeSonicBoom\n\nconst { isMainThread } = require('worker_threads')\nconst SonicBoom = require('sonic-boom')\nconst noop = require('./noop')\n\n/**\n * Creates a safe SonicBoom instance\n *\n * @param {object} opts Options for SonicBoom\n *\n * @returns {object} A new SonicBoom stream\n */\nfunction buildSafeSonicBoom (opts) {\n  const stream = new SonicBoom(opts)\n  stream.on('error', filterBrokenPipe)\n  // if we are sync: false, we must flush on exit\n  // NODE_V8_COVERAGE must breaks everything\n  // https://github.com/nodejs/node/issues/49344\n  if (!process.env.NODE_V8_COVERAGE && !opts.sync && isMainThread) {\n    setupOnExit(stream)\n  }\n  return stream\n\n  function filterBrokenPipe (err) {\n    if (err.code === 'EPIPE') {\n      stream.write = noop\n      stream.end = noop\n      stream.flushSync = noop\n      stream.destroy = noop\n      return\n    }\n    stream.removeListener('error', filterBrokenPipe)\n  }\n}\n\nfunction setupOnExit (stream) {\n  /* istanbul ignore next */\n  if (global.WeakRef && global.WeakMap && global.FinalizationRegistry) {\n    // This is leak free, it does not leave event handlers\n    const onExit = require('on-exit-leak-free')\n\n    onExit.register(stream, autoEnd)\n\n    stream.on('close', function () {\n      onExit.unregister(stream)\n    })\n  }\n}\n\n/* istanbul ignore next */\nfunction autoEnd (stream, eventName) {\n  // This check is needed only on some platforms\n\n  if (stream.destroyed) {\n    return\n  }\n\n  if (eventName === 'beforeExit') {\n    // We still have an event loop, let's use it\n    stream.flush()\n    stream.on('drain', function () {\n      stream.end()\n    })\n  } else {\n    // We do not have an event loop, so flush synchronously\n    stream.flushSync()\n  }\n}\n", "'use strict'\n\nmodule.exports = isValidDate\n\n/**\n * Checks if the argument is a JS Date and not 'Invalid Date'.\n *\n * @param {Date} date The date to check.\n *\n * @returns {boolean} true if the argument is a JS Date and not 'Invalid Date'.\n */\nfunction isValidDate (date) {\n  return date instanceof Date && !Number.isNaN(date.getTime())\n}\n", "'use strict'\n\nmodule.exports = createDate\n\nconst isValidDate = require('./is-valid-date')\n\n/**\n * Constructs a JS Date from a number or string. Accepts any single number\n * or single string argument that is valid for the Date() constructor,\n * or an epoch as a string.\n *\n * @param {string|number} epoch The representation of the Date.\n *\n * @returns {Date} The constructed Date.\n */\nfunction createDate (epoch) {\n  // If epoch is already a valid argument, return the valid Date\n  let date = new Date(epoch)\n  if (isValidDate(date)) {\n    return date\n  }\n\n  // Convert to a number to permit epoch as a string\n  date = new Date(+epoch)\n  return date\n}\n", "'use strict'\n\nmodule.exports = splitPropertyKey\n\n/**\n * Splits the property key delimited by a dot character but not when it is preceded\n * by a backslash.\n *\n * @param {string} key A string identifying the property.\n *\n * @returns {string[]} Returns a list of string containing each delimited property.\n * e.g. `'prop2\\.domain\\.corp.prop2'` should return [ 'prop2.domain.com', 'prop2' ]\n */\nfunction splitPropertyKey (key) {\n  const result = []\n  let backslash = false\n  let segment = ''\n\n  for (let i = 0; i < key.length; i++) {\n    const c = key.charAt(i)\n\n    if (c === '\\\\') {\n      backslash = true\n      continue\n    }\n\n    if (backslash) {\n      backslash = false\n      segment += c\n      continue\n    }\n\n    /* Non-escaped dot, push to result */\n    if (c === '.') {\n      result.push(segment)\n      segment = ''\n      continue\n    }\n\n    segment += c\n  }\n\n  /* Push last entry to result */\n  if (segment.length) {\n    result.push(segment)\n  }\n\n  return result\n}\n", "'use strict'\n\nmodule.exports = getPropertyValue\n\nconst splitPropertyKey = require('./split-property-key')\n\n/**\n * Gets a specified property from an object if it exists.\n *\n * @param {object} obj The object to be searched.\n * @param {string|string[]} property A string, or an array of strings, identifying\n * the property to be retrieved from the object.\n * Accepts nested properties delimited by a `.`.\n * Delimiter can be escaped to preserve property names that contain the delimiter.\n * e.g. `'prop1.prop2'` or `'prop2\\.domain\\.corp.prop2'`.\n *\n * @returns {*}\n */\nfunction getPropertyValue (obj, property) {\n  const props = Array.isArray(property) ? property : splitPropertyKey(property)\n\n  for (const prop of props) {\n    if (!Object.prototype.hasOwnProperty.call(obj, prop)) {\n      return\n    }\n    obj = obj[prop]\n  }\n\n  return obj\n}\n", "'use strict'\n\nmodule.exports = deleteLogProperty\n\nconst getPropertyValue = require('./get-property-value')\nconst splitPropertyKey = require('./split-property-key')\n\n/**\n * Deletes a specified property from a log object if it exists.\n * This function mutates the passed in `log` object.\n *\n * @param {object} log The log object to be modified.\n * @param {string} property A string identifying the property to be deleted from\n * the log object. Accepts nested properties delimited by a `.`\n * Delimiter can be escaped to preserve property names that contain the delimiter.\n * e.g. `'prop1.prop2'` or `'prop2\\.domain\\.corp.prop2'`\n */\nfunction deleteLogProperty (log, property) {\n  const props = splitPropertyKey(property)\n  const propToDelete = props.pop()\n\n  log = getPropertyValue(log, props)\n\n  /* istanbul ignore else */\n  if (log !== null && typeof log === 'object' && Object.prototype.hasOwnProperty.call(log, propToDelete)) {\n    delete log[propToDelete]\n  }\n}\n", "export interface Cache {\n  has: (value: any) => boolean;\n  set: (key: any, value: any) => void;\n  get: (key: any) => any;\n}\n\nconst { toString: toStringFunction } = Function.prototype;\nconst { create } = Object;\nconst { toString: toStringObject } = Object.prototype;\n\n/**\n * @classdesc Fallback cache for when WeakMap is not natively supported\n */\nclass LegacyCache {\n  private _keys: any[] = [];\n  private _values: any[] = [];\n\n  has(key: any) {\n    return !!~this._keys.indexOf(key);\n  }\n\n  get(key: any) {\n    return this._values[this._keys.indexOf(key)];\n  }\n\n  set(key: any, value: any) {\n    this._keys.push(key);\n    this._values.push(value);\n  }\n}\n\nfunction createCacheLegacy(): Cache {\n  return new LegacyCache();\n}\n\nfunction createCacheModern(): Cache {\n  return new WeakMap();\n}\n\n/**\n * Get a new cache object to prevent circular references.\n */\nexport const createCache =\n  typeof WeakMap !== 'undefined' ? createCacheModern : createCacheLegacy;\n\n/**\n * Get an empty version of the object with the same prototype it has.\n */\nexport function getCleanClone(prototype: any): any {\n  if (!prototype) {\n    return create(null);\n  }\n\n  const Constructor = prototype.constructor;\n\n  if (Constructor === Object) {\n    return prototype === Object.prototype ? {} : create(prototype);\n  }\n\n  if (\n    Constructor &&\n    ~toStringFunction.call(Constructor).indexOf('[native code]')\n  ) {\n    try {\n      return new Constructor();\n    } catch {}\n  }\n\n  return create(prototype);\n}\n\nfunction getRegExpFlagsLegacy(regExp: RegExp): string {\n  let flags = '';\n\n  if (regExp.global) {\n    flags += 'g';\n  }\n\n  if (regExp.ignoreCase) {\n    flags += 'i';\n  }\n\n  if (regExp.multiline) {\n    flags += 'm';\n  }\n\n  if (regExp.unicode) {\n    flags += 'u';\n  }\n\n  if (regExp.sticky) {\n    flags += 'y';\n  }\n\n  return flags;\n}\n\nfunction getRegExpFlagsModern(regExp: RegExp): string {\n  return regExp.flags;\n}\n\n/**\n * Get the flags to apply to the copied regexp.\n */\nexport const getRegExpFlags =\n  /test/g.flags === 'g' ? getRegExpFlagsModern : getRegExpFlagsLegacy;\n\nfunction getTagLegacy(value: any): string {\n  const type = toStringObject.call(value);\n\n  return type.substring(8, type.length - 1);\n}\n\nfunction getTagModern(value: any): string {\n  return value[Symbol.toStringTag] || getTagLegacy(value);\n}\n\n/**\n * Get the tag of the value passed, so that the correct copier can be used.\n */\nexport const getTag =\n  typeof Symbol !== 'undefined' ? getTagModern : getTagLegacy;\n", "import { getCleanClone, getRegExpFlags } from './utils';\n\nimport type { Cache } from './utils';\n\nexport type InternalCopier<Value> = (value: Value, state: State) => Value;\n\nexport interface State {\n  Constructor: any;\n  cache: Cache;\n  copier: InternalCopier<any>;\n  prototype: any;\n}\n\nconst {\n  defineProperty,\n  getOwnPropertyDescriptor,\n  getOwnPropertyNames,\n  getOwnPropertySymbols,\n} = Object;\nconst { hasOwnProperty, propertyIsEnumerable } = Object.prototype;\n\nconst SUPPORTS_SYMBOL = typeof getOwnPropertySymbols === 'function';\n\nfunction getStrictPropertiesModern(object: any): Array<string | symbol> {\n  return (getOwnPropertyNames(object) as Array<string | symbol>).concat(\n    getOwnPropertySymbols(object)\n  );\n}\n\n/**\n * Get the properites used when copying objects strictly. This includes both keys and symbols.\n */\nconst getStrictProperties = SUPPORTS_SYMBOL\n  ? getStrictPropertiesModern\n  : getOwnPropertyNames;\n\n/**\n * Striclty copy all properties contained on the object.\n */\nfunction copyOwnPropertiesStrict<Value>(\n  value: Value,\n  clone: Value,\n  state: State\n): Value {\n  const properties = getStrictProperties(value);\n\n  for (\n    let index = 0, length = properties.length, property, descriptor;\n    index < length;\n    ++index\n  ) {\n    property = properties[index];\n\n    if (property === 'callee' || property === 'caller') {\n      continue;\n    }\n\n    descriptor = getOwnPropertyDescriptor(value, property);\n\n    if (!descriptor) {\n      // In extra edge cases where the property descriptor cannot be retrived, fall back to\n      // the loose assignment.\n      (clone as any)[property] = state.copier((value as any)[property], state);\n      continue;\n    }\n\n    // Only clone the value if actually a value, not a getter / setter.\n    if (!descriptor.get && !descriptor.set) {\n      descriptor.value = state.copier(descriptor.value, state);\n    }\n\n    try {\n      defineProperty(clone, property, descriptor);\n    } catch (error) {\n      // Tee above can fail on node in edge cases, so fall back to the loose assignment.\n      (clone as any)[property] = descriptor.value;\n    }\n  }\n\n  return clone;\n}\n\n/**\n * Deeply copy the indexed values in the array.\n */\nexport function copyArrayLoose(array: any[], state: State) {\n  const clone = new state.Constructor();\n\n  // set in the cache immediately to be able to reuse the object recursively\n  state.cache.set(array, clone);\n\n  for (let index = 0, length = array.length; index < length; ++index) {\n    clone[index] = state.copier(array[index], state);\n  }\n\n  return clone;\n}\n\n/**\n * Deeply copy the indexed values in the array, as well as any custom properties.\n */\nexport function copyArrayStrict<Value extends any[]>(\n  array: Value,\n  state: State\n) {\n  const clone = new state.Constructor() as Value;\n\n  // set in the cache immediately to be able to reuse the object recursively\n  state.cache.set(array, clone);\n\n  return copyOwnPropertiesStrict(array, clone, state);\n}\n\n/**\n * Copy the contents of the ArrayBuffer.\n */\nexport function copyArrayBuffer<Value extends ArrayBuffer>(\n  arrayBuffer: Value,\n  _state: State\n): Value {\n  return arrayBuffer.slice(0) as Value;\n}\n\n/**\n * Create a new Blob with the contents of the original.\n */\nexport function copyBlob<Value extends Blob>(\n  blob: Value,\n  _state: State\n): Value {\n  return blob.slice(0, blob.size, blob.type) as Value;\n}\n\n/**\n * Create a new DataView with the contents of the original.\n */\nexport function copyDataView<Value extends DataView>(\n  dataView: Value,\n  state: State\n): Value {\n  return new state.Constructor(copyArrayBuffer(dataView.buffer, state));\n}\n\n/**\n * Create a new Date based on the time of the original.\n */\nexport function copyDate<Value extends Date>(date: Value, state: State): Value {\n  return new state.Constructor(date.getTime());\n}\n\n/**\n * Deeply copy the keys and values of the original.\n */\nexport function copyMapLoose<Value extends Map<any, any>>(\n  map: Value,\n  state: State\n): Value {\n  const clone = new state.Constructor() as Value;\n\n  // set in the cache immediately to be able to reuse the object recursively\n  state.cache.set(map, clone);\n\n  map.forEach((value, key) => {\n    clone.set(key, state.copier(value, state));\n  });\n\n  return clone;\n}\n\n/**\n * Deeply copy the keys and values of the original, as well as any custom properties.\n */\nexport function copyMapStrict<Value extends Map<any, any>>(\n  map: Value,\n  state: State\n) {\n  return copyOwnPropertiesStrict(map, copyMapLoose(map, state), state);\n}\n\nfunction copyObjectLooseLegacy<Value extends Record<string, any>>(\n  object: Value,\n  state: State\n): Value {\n  const clone: any = getCleanClone(state.prototype);\n\n  // set in the cache immediately to be able to reuse the object recursively\n  state.cache.set(object, clone);\n\n  for (const key in object) {\n    if (hasOwnProperty.call(object, key)) {\n      clone[key] = state.copier(object[key], state);\n    }\n  }\n\n  return clone;\n}\n\nfunction copyObjectLooseModern<Value extends Record<string, any>>(\n  object: Value,\n  state: State\n): Value {\n  const clone = getCleanClone(state.prototype);\n\n  // set in the cache immediately to be able to reuse the object recursively\n  state.cache.set(object, clone);\n\n  for (const key in object) {\n    if (hasOwnProperty.call(object, key)) {\n      clone[key] = state.copier(object[key], state);\n    }\n  }\n\n  const symbols = getOwnPropertySymbols(object);\n\n  for (\n    let index = 0, length = symbols.length, symbol;\n    index < length;\n    ++index\n  ) {\n    symbol = symbols[index];\n\n    if (propertyIsEnumerable.call(object, symbol)) {\n      clone[symbol] = state.copier((object as any)[symbol], state);\n    }\n  }\n\n  return clone;\n}\n\n/**\n * Deeply copy the properties (keys and symbols) and values of the original.\n */\nexport const copyObjectLoose = SUPPORTS_SYMBOL\n  ? copyObjectLooseModern\n  : copyObjectLooseLegacy;\n\n/**\n * Deeply copy the properties (keys and symbols) and values of the original, as well\n * as any hidden or non-enumerable properties.\n */\nexport function copyObjectStrict<Value extends Record<string, any>>(\n  object: Value,\n  state: State\n): Value {\n  const clone = getCleanClone(state.prototype);\n\n  // set in the cache immediately to be able to reuse the object recursively\n  state.cache.set(object, clone);\n\n  return copyOwnPropertiesStrict(object, clone, state);\n}\n\n/**\n * Create a new primitive wrapper from the value of the original.\n */\nexport function copyPrimitiveWrapper<\n  // Specifically use the object constructor types\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  Value extends Boolean | Number | String\n>(primitiveObject: Value, state: State): Value {\n  return new state.Constructor(primitiveObject.valueOf());\n}\n\n/**\n * Create a new RegExp based on the value and flags of the original.\n */\nexport function copyRegExp<Value extends RegExp>(\n  regExp: Value,\n  state: State\n): Value {\n  const clone = new state.Constructor(\n    regExp.source,\n    getRegExpFlags(regExp)\n  ) as Value;\n\n  clone.lastIndex = regExp.lastIndex;\n\n  return clone;\n}\n\n/**\n * Return the original value (an identity function).\n *\n * @note\n * THis is used for objects that cannot be copied, such as WeakMap.\n */\nexport function copySelf<Value>(value: Value, _state: State): Value {\n  return value;\n}\n\n/**\n * Deeply copy the values of the original.\n */\nexport function copySetLoose<Value extends Set<any>>(\n  set: Value,\n  state: State\n): Value {\n  const clone = new state.Constructor() as Value;\n\n  // set in the cache immediately to be able to reuse the object recursively\n  state.cache.set(set, clone);\n\n  set.forEach((value) => {\n    clone.add(state.copier(value, state));\n  });\n\n  return clone;\n}\n\n/**\n * Deeply copy the values of the original, as well as any custom properties.\n */\nexport function copySetStrict<Value extends Set<any>>(\n  set: Value,\n  state: State\n): Value {\n  return copyOwnPropertiesStrict(set, copySetLoose(set, state), state);\n}\n", "import {\n  copyArrayBuffer,\n  copyArrayLoose,\n  copyArrayStrict,\n  copyBlob,\n  copyDataView,\n  copyDate,\n  copyMapLoose,\n  copyMapStrict,\n  copyObjectLoose,\n  copyObjectStrict,\n  copyPrimitiveWrapper,\n  copyRegExp,\n  copySelf,\n  copySetLoose,\n  copySetStrict,\n} from './copier';\nimport { createCache, getTag } from './utils';\n\nimport type { InternalCopier, State } from './copier';\n\nexport type { State } from './copier';\n\nconst { isArray } = Array;\nconst { assign } = Object;\nconst getPrototypeOf = Object.getPrototypeOf || ((obj) => obj.__proto__)\n\nexport interface CreateCopierOptions {\n  array?: InternalCopier<any[]>;\n  arrayBuffer?: InternalCopier<ArrayBuffer>;\n  blob?: InternalCopier<Blob>;\n  dataView?: InternalCopier<DataView>;\n  date?: InternalCopier<Date>;\n  error?: InternalCopier<any>;\n  map?: InternalCopier<Map<any, any>>;\n  object?: InternalCopier<Record<string, any>>;\n  regExp?: InternalCopier<RegExp>;\n  set?: InternalCopier<Set<any>>;\n}\n\nconst DEFAULT_LOOSE_OPTIONS: Required<CreateCopierOptions> = {\n  array: copyArrayLoose,\n  arrayBuffer: copyArrayBuffer,\n  blob: copyBlob,\n  dataView: copyDataView,\n  date: copyDate,\n  error: copySelf,\n  map: copyMapLoose,\n  object: copyObjectLoose,\n  regExp: copyRegExp,\n  set: copySetLoose,\n};\nconst DEFAULT_STRICT_OPTIONS: Required<CreateCopierOptions> = assign(\n  {},\n  DEFAULT_LOOSE_OPTIONS,\n  {\n    array: copyArrayStrict,\n    map: copyMapStrict,\n    object: copyObjectStrict,\n    set: copySetStrict,\n  }\n);\n\n/**\n * Get the copiers used for each specific object tag.\n */\nfunction getTagSpecificCopiers(\n  options: Required<CreateCopierOptions>\n): Record<string, InternalCopier<any>> {\n  return {\n    Arguments: options.object,\n    Array: options.array,\n    ArrayBuffer: options.arrayBuffer,\n    Blob: options.blob,\n    Boolean: copyPrimitiveWrapper,\n    DataView: options.dataView,\n    Date: options.date,\n    Error: options.error,\n    Float32Array: options.arrayBuffer,\n    Float64Array: options.arrayBuffer,\n    Int8Array: options.arrayBuffer,\n    Int16Array: options.arrayBuffer,\n    Int32Array: options.arrayBuffer,\n    Map: options.map,\n    Number: copyPrimitiveWrapper,\n    Object: options.object,\n    Promise: copySelf,\n    RegExp: options.regExp,\n    Set: options.set,\n    String: copyPrimitiveWrapper,\n    WeakMap: copySelf,\n    WeakSet: copySelf,\n    Uint8Array: options.arrayBuffer,\n    Uint8ClampedArray: options.arrayBuffer,\n    Uint16Array: options.arrayBuffer,\n    Uint32Array: options.arrayBuffer,\n    Uint64Array: options.arrayBuffer,\n  };\n}\n\n/**\n * Create a custom copier based on the object-specific copy methods passed.\n */\nexport function createCopier(options: CreateCopierOptions) {\n  const normalizedOptions = assign({}, DEFAULT_LOOSE_OPTIONS, options);\n  const tagSpecificCopiers = getTagSpecificCopiers(normalizedOptions);\n  const { Array: array, Object: object } = tagSpecificCopiers;\n\n  function copier(value: any, state: State): any {\n    state.prototype = state.Constructor = undefined;\n\n    if (!value || typeof value !== 'object') {\n      return value;\n    }\n\n    if (state.cache.has(value)) {\n      return state.cache.get(value);\n    }\n\n    state.prototype = getPrototypeOf(value);\n    state.Constructor = state.prototype && state.prototype.constructor;\n\n    // plain objects\n    if (!state.Constructor || state.Constructor === Object) {\n      return object(value, state);\n    }\n\n    // arrays\n    if (isArray(value)) {\n      return array(value, state);\n    }\n\n    const tagSpecificCopier = tagSpecificCopiers[getTag(value)];\n\n    if (tagSpecificCopier) {\n      return tagSpecificCopier(value, state);\n    }\n\n    return typeof value.then === 'function' ? value : object(value, state);\n  }\n\n  return function copy<Value>(value: Value): Value {\n    return copier(value, {\n      Constructor: undefined,\n      cache: createCache(),\n      copier,\n      prototype: undefined,\n    });\n  };\n}\n\n/**\n * Create a custom copier based on the object-specific copy methods passed, defaulting to the\n * same internals as `copyStrict`.\n */\nexport function createStrictCopier(options: CreateCopierOptions) {\n  return createCopier(assign({}, DEFAULT_STRICT_OPTIONS, options));\n}\n\n/**\n * Copy an value deeply as much as possible, where strict recreation of object properties\n * are maintained. All properties (including non-enumerable ones) are copied with their\n * original property descriptors on both objects and arrays.\n */\nexport const copyStrict = createStrictCopier({});\n\n/**\n * Copy an value deeply as much as possible.\n */\nexport default createCopier({});\n", "'use strict'\n\nmodule.exports = filterLog\n\nconst { createCopier } = require('fast-copy')\nconst fastCopy = createCopier({})\n\nconst deleteLogProperty = require('./delete-log-property')\n\n/**\n * @typedef {object} FilterLogParams\n * @property {object} log The log object to be modified.\n * @property {PrettyContext} context The context object built from parsing\n * the options.\n */\n\n/**\n * Filter a log object by removing or including keys accordingly.\n * When `includeKeys` is passed, `ignoredKeys` will be ignored.\n * One of ignoreKeys or includeKeys must be pass in.\n *\n * @param {FilterLogParams} input\n *\n * @returns {object} A new `log` object instance that\n *  either only includes the keys in ignoreKeys\n *  or does not include those in ignoredKeys.\n */\nfunction filterLog ({ log, context }) {\n  const { ignoreKeys, includeKeys } = context\n  const logCopy = fastCopy(log)\n\n  if (includeKeys) {\n    const logIncluded = {}\n\n    includeKeys.forEach((key) => {\n      logIncluded[key] = logCopy[key]\n    })\n    return logIncluded\n  }\n\n  ignoreKeys.forEach((ignoreKey) => {\n    deleteLogProperty(logCopy, ignoreKey)\n  })\n  return logCopy\n}\n", "\"use strict\";function _typeof(obj){\"@babel/helpers - typeof\";if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj}}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj}}return _typeof(obj)}(function(global){var _arguments=arguments;var dateFormat=function(){var token=/d{1,4}|D{3,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|W{1,2}|[LlopSZN]|\"[^\"]*\"|'[^']*'/g;var timezone=/\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g;var timezoneClip=/[^-+\\dA-Z]/g;return function(date,mask,utc,gmt){if(_arguments.length===1&&kindOf(date)===\"string\"&&!/\\d/.test(date)){mask=date;date=undefined}date=date||date===0?date:new Date;if(!(date instanceof Date)){date=new Date(date)}if(isNaN(date)){throw TypeError(\"Invalid date\")}mask=String(dateFormat.masks[mask]||mask||dateFormat.masks[\"default\"]);var maskSlice=mask.slice(0,4);if(maskSlice===\"UTC:\"||maskSlice===\"GMT:\"){mask=mask.slice(4);utc=true;if(maskSlice===\"GMT:\"){gmt=true}}var _=function _(){return utc?\"getUTC\":\"get\"};var _d=function d(){return date[_()+\"Date\"]()};var D=function D(){return date[_()+\"Day\"]()};var _m=function m(){return date[_()+\"Month\"]()};var y=function y(){return date[_()+\"FullYear\"]()};var _H=function H(){return date[_()+\"Hours\"]()};var _M=function M(){return date[_()+\"Minutes\"]()};var _s=function s(){return date[_()+\"Seconds\"]()};var _L=function L(){return date[_()+\"Milliseconds\"]()};var _o=function o(){return utc?0:date.getTimezoneOffset()};var _W=function W(){return getWeek(date)};var _N=function N(){return getDayOfWeek(date)};var flags={d:function d(){return _d()},dd:function dd(){return pad(_d())},ddd:function ddd(){return dateFormat.i18n.dayNames[D()]},DDD:function DDD(){return getDayName({y:y(),m:_m(),d:_d(),_:_(),dayName:dateFormat.i18n.dayNames[D()],short:true})},dddd:function dddd(){return dateFormat.i18n.dayNames[D()+7]},DDDD:function DDDD(){return getDayName({y:y(),m:_m(),d:_d(),_:_(),dayName:dateFormat.i18n.dayNames[D()+7]})},m:function m(){return _m()+1},mm:function mm(){return pad(_m()+1)},mmm:function mmm(){return dateFormat.i18n.monthNames[_m()]},mmmm:function mmmm(){return dateFormat.i18n.monthNames[_m()+12]},yy:function yy(){return String(y()).slice(2)},yyyy:function yyyy(){return pad(y(),4)},h:function h(){return _H()%12||12},hh:function hh(){return pad(_H()%12||12)},H:function H(){return _H()},HH:function HH(){return pad(_H())},M:function M(){return _M()},MM:function MM(){return pad(_M())},s:function s(){return _s()},ss:function ss(){return pad(_s())},l:function l(){return pad(_L(),3)},L:function L(){return pad(Math.floor(_L()/10))},t:function t(){return _H()<12?dateFormat.i18n.timeNames[0]:dateFormat.i18n.timeNames[1]},tt:function tt(){return _H()<12?dateFormat.i18n.timeNames[2]:dateFormat.i18n.timeNames[3]},T:function T(){return _H()<12?dateFormat.i18n.timeNames[4]:dateFormat.i18n.timeNames[5]},TT:function TT(){return _H()<12?dateFormat.i18n.timeNames[6]:dateFormat.i18n.timeNames[7]},Z:function Z(){return gmt?\"GMT\":utc?\"UTC\":(String(date).match(timezone)||[\"\"]).pop().replace(timezoneClip,\"\").replace(/GMT\\+0000/g,\"UTC\")},o:function o(){return(_o()>0?\"-\":\"+\")+pad(Math.floor(Math.abs(_o())/60)*100+Math.abs(_o())%60,4)},p:function p(){return(_o()>0?\"-\":\"+\")+pad(Math.floor(Math.abs(_o())/60),2)+\":\"+pad(Math.floor(Math.abs(_o())%60),2)},S:function S(){return[\"th\",\"st\",\"nd\",\"rd\"][_d()%10>3?0:(_d()%100-_d()%10!=10)*_d()%10]},W:function W(){return _W()},WW:function WW(){return pad(_W())},N:function N(){return _N()}};return mask.replace(token,function(match){if(match in flags){return flags[match]()}return match.slice(1,match.length-1)})}}();dateFormat.masks={default:\"ddd mmm dd yyyy HH:MM:ss\",shortDate:\"m/d/yy\",paddedShortDate:\"mm/dd/yyyy\",mediumDate:\"mmm d, yyyy\",longDate:\"mmmm d, yyyy\",fullDate:\"dddd, mmmm d, yyyy\",shortTime:\"h:MM TT\",mediumTime:\"h:MM:ss TT\",longTime:\"h:MM:ss TT Z\",isoDate:\"yyyy-mm-dd\",isoTime:\"HH:MM:ss\",isoDateTime:\"yyyy-mm-dd'T'HH:MM:sso\",isoUtcDateTime:\"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\",expiresHeaderFormat:\"ddd, dd mmm yyyy HH:MM:ss Z\"};dateFormat.i18n={dayNames:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\",\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],monthNames:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],timeNames:[\"a\",\"p\",\"am\",\"pm\",\"A\",\"P\",\"AM\",\"PM\"]};var pad=function pad(val,len){val=String(val);len=len||2;while(val.length<len){val=\"0\"+val}return val};var getDayName=function getDayName(_ref){var y=_ref.y,m=_ref.m,d=_ref.d,_=_ref._,dayName=_ref.dayName,_ref$short=_ref[\"short\"],_short=_ref$short===void 0?false:_ref$short;var today=new Date;var yesterday=new Date;yesterday.setDate(yesterday[_+\"Date\"]()-1);var tomorrow=new Date;tomorrow.setDate(tomorrow[_+\"Date\"]()+1);var today_d=function today_d(){return today[_+\"Date\"]()};var today_m=function today_m(){return today[_+\"Month\"]()};var today_y=function today_y(){return today[_+\"FullYear\"]()};var yesterday_d=function yesterday_d(){return yesterday[_+\"Date\"]()};var yesterday_m=function yesterday_m(){return yesterday[_+\"Month\"]()};var yesterday_y=function yesterday_y(){return yesterday[_+\"FullYear\"]()};var tomorrow_d=function tomorrow_d(){return tomorrow[_+\"Date\"]()};var tomorrow_m=function tomorrow_m(){return tomorrow[_+\"Month\"]()};var tomorrow_y=function tomorrow_y(){return tomorrow[_+\"FullYear\"]()};if(today_y()===y&&today_m()===m&&today_d()===d){return _short?\"Tdy\":\"Today\"}else if(yesterday_y()===y&&yesterday_m()===m&&yesterday_d()===d){return _short?\"Ysd\":\"Yesterday\"}else if(tomorrow_y()===y&&tomorrow_m()===m&&tomorrow_d()===d){return _short?\"Tmw\":\"Tomorrow\"}return dayName};var getWeek=function getWeek(date){var targetThursday=new Date(date.getFullYear(),date.getMonth(),date.getDate());targetThursday.setDate(targetThursday.getDate()-(targetThursday.getDay()+6)%7+3);var firstThursday=new Date(targetThursday.getFullYear(),0,4);firstThursday.setDate(firstThursday.getDate()-(firstThursday.getDay()+6)%7+3);var ds=targetThursday.getTimezoneOffset()-firstThursday.getTimezoneOffset();targetThursday.setHours(targetThursday.getHours()-ds);var weekDiff=(targetThursday-firstThursday)/(864e5*7);return 1+Math.floor(weekDiff)};var getDayOfWeek=function getDayOfWeek(date){var dow=date.getDay();if(dow===0){dow=7}return dow};var kindOf=function kindOf(val){if(val===null){return\"null\"}if(val===undefined){return\"undefined\"}if(_typeof(val)!==\"object\"){return _typeof(val)}if(Array.isArray(val)){return\"array\"}return{}.toString.call(val).slice(8,-1).toLowerCase()};if(typeof define===\"function\"&&define.amd){define(function(){return dateFormat})}else if((typeof exports===\"undefined\"?\"undefined\":_typeof(exports))===\"object\"){module.exports=dateFormat}else{global.dateFormat=dateFormat}})(void 0);", "'use strict'\n\nmodule.exports = formatTime\n\nconst {\n  DATE_FORMAT,\n  DATE_FORMAT_SIMPLE\n} = require('../constants')\n\nconst dateformat = require('dateformat')\nconst createDate = require('./create-date')\nconst isValidDate = require('./is-valid-date')\n\n/**\n * Converts a given `epoch` to a desired display format.\n *\n * @param {number|string} epoch The time to convert. May be any value that is\n * valid for `new Date()`.\n * @param {boolean|string} [translateTime=false] When `false`, the given `epoch`\n * will simply be returned. When `true`, the given `epoch` will be converted\n * to a string at UTC using the `DATE_FORMAT` constant. If `translateTime` is\n * a string, the following rules are available:\n *\n * - `<format string>`: The string is a literal format string. This format\n * string will be used to interpret the `epoch` and return a display string\n * at UTC.\n * - `SYS:STANDARD`: The returned display string will follow the `DATE_FORMAT`\n * constant at the system's local timezone.\n * - `SYS:<format string>`: The returned display string will follow the given\n * `<format string>` at the system's local timezone.\n * - `UTC:<format string>`: The returned display string will follow the given\n * `<format string>` at UTC.\n *\n * @returns {number|string} The formatted time.\n */\nfunction formatTime (epoch, translateTime = false) {\n  if (translateTime === false) {\n    return epoch\n  }\n\n  const instant = createDate(epoch)\n\n  // If the Date is invalid, do not attempt to format\n  if (!isValidDate(instant)) {\n    return epoch\n  }\n\n  if (translateTime === true) {\n    return dateformat(instant, DATE_FORMAT_SIMPLE)\n  }\n\n  const upperFormat = translateTime.toUpperCase()\n  if (upperFormat === 'SYS:STANDARD') {\n    return dateformat(instant, DATE_FORMAT)\n  }\n\n  const prefix = upperFormat.substr(0, 4)\n  if (prefix === 'SYS:' || prefix === 'UTC:') {\n    if (prefix === 'UTC:') {\n      return dateformat(instant, translateTime)\n    }\n    return dateformat(instant, translateTime.slice(4))\n  }\n\n  return dateformat(instant, `UTC:${translateTime}`)\n}\n", "'use strict'\n\nmodule.exports = handleCustomLevelsNamesOpts\n\n/**\n * Parse a CSV string or options object that maps level\n * labels to level values.\n *\n * @param {string|object} cLevels An object mapping level\n * names to level values, e.g. `{ info: 30, debug: 65 }`, or a\n * CSV string in the format `level_name:level_value`, e.g.\n * `info:30,debug:65`.\n *\n * @returns {object} An object mapping levels names to level values\n * e.g. `{ info: 30, debug: 65 }`.\n */\nfunction handleCustomLevelsNamesOpts (cLevels) {\n  if (!cLevels) return {}\n\n  if (typeof cLevels === 'string') {\n    return cLevels\n      .split(',')\n      .reduce((agg, value, idx) => {\n        const [levelName, levelNum = idx] = value.split(':')\n        agg[levelName.toLowerCase()] = levelNum\n        return agg\n      }, {})\n  } else if (Object.prototype.toString.call(cLevels) === '[object Object]') {\n    return Object\n      .keys(cLevels)\n      .reduce((agg, levelName) => {\n        agg[levelName.toLowerCase()] = cLevels[levelName]\n        return agg\n      }, {})\n  } else {\n    return {}\n  }\n}\n", "'use strict'\n\nmodule.exports = handleCustomLevelsOpts\n\n/**\n * Parse a CSV string or options object that specifies\n * configuration for custom levels.\n *\n * @param {string|object} cLevels An object mapping level\n * names to values, e.g. `{ info: 30, debug: 65 }`, or a\n * CSV string in the format `level_name:level_value`, e.g.\n * `info:30,debug:65`.\n *\n * @returns {object} An object mapping levels to labels that\n * appear in logs, e.g. `{ '30': 'INFO', '65': 'DEBUG' }`.\n */\nfunction handleCustomLevelsOpts (cLevels) {\n  if (!cLevels) return {}\n\n  if (typeof cLevels === 'string') {\n    return cLevels\n      .split(',')\n      .reduce((agg, value, idx) => {\n        const [levelName, levelNum = idx] = value.split(':')\n        agg[levelNum] = levelName.toUpperCase()\n        return agg\n      },\n      { default: 'USERLVL' })\n  } else if (Object.prototype.toString.call(cLevels) === '[object Object]') {\n    return Object\n      .keys(cLevels)\n      .reduce((agg, levelName) => {\n        agg[cLevels[levelName]] = levelName.toUpperCase()\n        return agg\n      }, { default: 'USERLVL' })\n  } else {\n    return {}\n  }\n}\n", "'use strict'\n\nmodule.exports = interpretConditionals\n\nconst getPropertyValue = require('./get-property-value')\n\n/**\n * Translates all conditional blocks from within the messageFormat. Translates\n * any matching {if key}{key}{end} statements and returns everything between\n * if and else blocks if the key provided was found in log.\n *\n * @param {MessageFormatString|MessageFormatFunction} messageFormat A format\n * string or function that defines how the logged message should be\n * conditionally formatted.\n * @param {object} log The log object to be modified.\n *\n * @returns {string} The parsed messageFormat.\n */\nfunction interpretConditionals (messageFormat, log) {\n  messageFormat = messageFormat.replace(/{if (.*?)}(.*?){end}/g, replacer)\n\n  // Remove non-terminated if blocks\n  messageFormat = messageFormat.replace(/{if (.*?)}/g, '')\n  // Remove floating end blocks\n  messageFormat = messageFormat.replace(/{end}/g, '')\n\n  return messageFormat.replace(/\\s+/g, ' ').trim()\n\n  function replacer (_, key, value) {\n    const propertyValue = getPropertyValue(log, key)\n    if (propertyValue && value.includes(key)) {\n      return value.replace(new RegExp('{' + key + '}', 'g'), propertyValue)\n    } else {\n      return ''\n    }\n  }\n}\n", "'use strict'\n\nmodule.exports = isObject\n\nfunction isObject (input) {\n  return Object.prototype.toString.apply(input) === '[object Object]'\n}\n", "'use strict'\n\nmodule.exports = joinLinesWithIndentation\n\n/**\n * @typedef {object} JoinLinesWithIndentationParams\n * @property {string} input The string to split and reformat.\n * @property {string} [ident] The indentation string. Default: `    ` (4 spaces).\n * @property {string} [eol] The end of line sequence to use when rejoining\n * the lines. Default: `'\\n'`.\n */\n\n/**\n * Given a string with line separators, either `\\r\\n` or `\\n`, add indentation\n * to all lines subsequent to the first line and rejoin the lines using an\n * end of line sequence.\n *\n * @param {JoinLinesWithIndentationParams} input\n *\n * @returns {string} A string with lines subsequent to the first indented\n * with the given indentation sequence.\n */\nfunction joinLinesWithIndentation ({ input, ident = '    ', eol = '\\n' }) {\n  const lines = input.split(/\\r?\\n/)\n  for (let i = 1; i < lines.length; i += 1) {\n    lines[i] = ident + lines[i]\n  }\n  return lines.join(eol)\n}\n", "'use strict'\n\nmodule.exports = parseFactoryOptions\n\nconst {\n  LEVEL_NAMES\n} = require('../constants')\nconst colors = require('../colors')\nconst handleCustomLevelsOpts = require('./handle-custom-levels-opts')\nconst handleCustomLevelsNamesOpts = require('./handle-custom-levels-names-opts')\nconst handleLevelLabelData = require('./get-level-label-data')\n\n/**\n * A `PrettyContext` is an object to be used by the various functions that\n * process log data. It is derived from the provided {@link PinoPrettyOptions}.\n * It may be used as a `this` context.\n *\n * @typedef {object} PrettyContext\n * @property {string} EOL The escape sequence chosen as the line terminator.\n * @property {string} IDENT The string to use as the indentation sequence.\n * @property {ColorizerFunc} colorizer A configured colorizer function.\n * @property {Array[Array<number, string>]} customColors A set of custom color\n * names associated with level numbers.\n * @property {object} customLevelNames A hash of level numbers to level names,\n * e.g. `{ 30: \"info\" }`.\n * @property {object} customLevels A hash of level names to level numbers,\n * e.g. `{ info: 30 }`.\n * @property {CustomPrettifiers} customPrettifiers A hash of custom prettifier\n * functions.\n * @property {object} customProperties Comprised of `customLevels` and\n * `customLevelNames` if such options are provided.\n * @property {string[]} errorLikeObjectKeys The key names in the log data that\n * should be considered as holding error objects.\n * @property {string[]} errorProps A list of error object keys that should be\n * included in the output.\n * @property {function} getLevelLabelData Pass a numeric level to return [levelLabelString,levelNum]\n * @property {boolean} hideObject Indicates the prettifier should omit objects\n * in the output.\n * @property {string[]} ignoreKeys Set of log data keys to omit.\n * @property {string[]} includeKeys Opposite of `ignoreKeys`.\n * @property {boolean} levelFirst Indicates the level should be printed first.\n * @property {string} levelKey Name of the key in the log data that contains\n * the message.\n * @property {string} levelLabel Format token to represent the position of the\n * level name in the output string.\n * @property {MessageFormatString|MessageFormatFunction} messageFormat\n * @property {string} messageKey Name of the key in the log data that contains\n * the message.\n * @property {string|number} minimumLevel The minimum log level to process\n * and output.\n * @property {ColorizerFunc} objectColorizer\n * @property {boolean} singleLine Indicates objects should be printed on a\n * single output line.\n * @property {string} timestampKey The name of the key in the log data that\n * contains the log timestamp.\n * @property {boolean} translateTime Indicates if timestamps should be\n * translated to a human-readable string.\n * @property {boolean} useOnlyCustomProps\n */\n\n/**\n * @param {PinoPrettyOptions} options The user supplied object of options.\n *\n * @returns {PrettyContext}\n */\nfunction parseFactoryOptions (options) {\n  const EOL = options.crlf ? '\\r\\n' : '\\n'\n  const IDENT = '    '\n  const {\n    customPrettifiers,\n    errorLikeObjectKeys,\n    hideObject,\n    levelFirst,\n    levelKey,\n    levelLabel,\n    messageFormat,\n    messageKey,\n    minimumLevel,\n    singleLine,\n    timestampKey,\n    translateTime\n  } = options\n  const errorProps = options.errorProps.split(',')\n  const useOnlyCustomProps = typeof options.useOnlyCustomProps === 'boolean'\n    ? options.useOnlyCustomProps\n    : (options.useOnlyCustomProps === 'true')\n  const customLevels = handleCustomLevelsOpts(options.customLevels)\n  const customLevelNames = handleCustomLevelsNamesOpts(options.customLevels)\n  const getLevelLabelData = handleLevelLabelData(useOnlyCustomProps, customLevels, customLevelNames)\n\n  let customColors\n  if (options.customColors) {\n    if (typeof options.customColors === 'string') {\n      customColors = options.customColors.split(',').reduce((agg, value) => {\n        const [level, color] = value.split(':')\n        const condition = useOnlyCustomProps\n          ? options.customLevels\n          : customLevelNames[level] !== undefined\n        const levelNum = condition\n          ? customLevelNames[level]\n          : LEVEL_NAMES[level]\n        const colorIdx = levelNum !== undefined\n          ? levelNum\n          : level\n        agg.push([colorIdx, color])\n        return agg\n      }, [])\n    } else if (typeof options.customColors === 'object') {\n      customColors = Object.keys(options.customColors).reduce((agg, value) => {\n        const [level, color] = [value, options.customColors[value]]\n        const condition = useOnlyCustomProps\n          ? options.customLevels\n          : customLevelNames[level] !== undefined\n        const levelNum = condition\n          ? customLevelNames[level]\n          : LEVEL_NAMES[level]\n        const colorIdx = levelNum !== undefined\n          ? levelNum\n          : level\n        agg.push([colorIdx, color])\n        return agg\n      }, [])\n    } else {\n      throw new Error('options.customColors must be of type string or object.')\n    }\n  }\n\n  const customProperties = { customLevels, customLevelNames }\n  if (useOnlyCustomProps === true && !options.customLevels) {\n    customProperties.customLevels = undefined\n    customProperties.customLevelNames = undefined\n  }\n\n  const includeKeys = options.include !== undefined\n    ? new Set(options.include.split(','))\n    : undefined\n  const ignoreKeys = (!includeKeys && options.ignore)\n    ? new Set(options.ignore.split(','))\n    : undefined\n\n  const colorizer = colors(options.colorize, customColors, useOnlyCustomProps)\n  const objectColorizer = options.colorizeObjects\n    ? colorizer\n    : colors(false, [], false)\n\n  return {\n    EOL,\n    IDENT,\n    colorizer,\n    customColors,\n    customLevelNames,\n    customLevels,\n    customPrettifiers,\n    customProperties,\n    errorLikeObjectKeys,\n    errorProps,\n    getLevelLabelData,\n    hideObject,\n    ignoreKeys,\n    includeKeys,\n    levelFirst,\n    levelKey,\n    levelLabel,\n    messageFormat,\n    messageKey,\n    minimumLevel,\n    objectColorizer,\n    singleLine,\n    timestampKey,\n    translateTime,\n    useOnlyCustomProps\n  }\n}\n", "module.exports = stringify\nstringify.default = stringify\nstringify.stable = deterministicStringify\nstringify.stableStringify = deterministicStringify\n\nvar LIMIT_REPLACE_NODE = '[...]'\nvar CIRCULAR_REPLACE_NODE = '[Circular]'\n\nvar arr = []\nvar replacerStack = []\n\nfunction defaultOptions () {\n  return {\n    depthLimit: Number.MAX_SAFE_INTEGER,\n    edgesLimit: Number.MAX_SAFE_INTEGER\n  }\n}\n\n// Regular stringify\nfunction stringify (obj, replacer, spacer, options) {\n  if (typeof options === 'undefined') {\n    options = defaultOptions()\n  }\n\n  decirc(obj, '', 0, [], undefined, 0, options)\n  var res\n  try {\n    if (replacerStack.length === 0) {\n      res = JSON.stringify(obj, replacer, spacer)\n    } else {\n      res = JSON.stringify(obj, replaceGetterValues(replacer), spacer)\n    }\n  } catch (_) {\n    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]')\n  } finally {\n    while (arr.length !== 0) {\n      var part = arr.pop()\n      if (part.length === 4) {\n        Object.defineProperty(part[0], part[1], part[3])\n      } else {\n        part[0][part[1]] = part[2]\n      }\n    }\n  }\n  return res\n}\n\nfunction setReplace (replace, val, k, parent) {\n  var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k)\n  if (propertyDescriptor.get !== undefined) {\n    if (propertyDescriptor.configurable) {\n      Object.defineProperty(parent, k, { value: replace })\n      arr.push([parent, k, val, propertyDescriptor])\n    } else {\n      replacerStack.push([val, k, replace])\n    }\n  } else {\n    parent[k] = replace\n    arr.push([parent, k, val])\n  }\n}\n\nfunction decirc (val, k, edgeIndex, stack, parent, depth, options) {\n  depth += 1\n  var i\n  if (typeof val === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent)\n        return\n      }\n    }\n\n    if (\n      typeof options.depthLimit !== 'undefined' &&\n      depth > options.depthLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    if (\n      typeof options.edgesLimit !== 'undefined' &&\n      edgeIndex + 1 > options.edgesLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    stack.push(val)\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        decirc(val[i], i, i, stack, val, depth, options)\n      }\n    } else {\n      var keys = Object.keys(val)\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i]\n        decirc(val[key], key, i, stack, val, depth, options)\n      }\n    }\n    stack.pop()\n  }\n}\n\n// Stable-stringify\nfunction compareFunction (a, b) {\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\nfunction deterministicStringify (obj, replacer, spacer, options) {\n  if (typeof options === 'undefined') {\n    options = defaultOptions()\n  }\n\n  var tmp = deterministicDecirc(obj, '', 0, [], undefined, 0, options) || obj\n  var res\n  try {\n    if (replacerStack.length === 0) {\n      res = JSON.stringify(tmp, replacer, spacer)\n    } else {\n      res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer)\n    }\n  } catch (_) {\n    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]')\n  } finally {\n    // Ensure that we restore the object as it was.\n    while (arr.length !== 0) {\n      var part = arr.pop()\n      if (part.length === 4) {\n        Object.defineProperty(part[0], part[1], part[3])\n      } else {\n        part[0][part[1]] = part[2]\n      }\n    }\n  }\n  return res\n}\n\nfunction deterministicDecirc (val, k, edgeIndex, stack, parent, depth, options) {\n  depth += 1\n  var i\n  if (typeof val === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent)\n        return\n      }\n    }\n    try {\n      if (typeof val.toJSON === 'function') {\n        return\n      }\n    } catch (_) {\n      return\n    }\n\n    if (\n      typeof options.depthLimit !== 'undefined' &&\n      depth > options.depthLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    if (\n      typeof options.edgesLimit !== 'undefined' &&\n      edgeIndex + 1 > options.edgesLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    stack.push(val)\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        deterministicDecirc(val[i], i, i, stack, val, depth, options)\n      }\n    } else {\n      // Create a temporary object in the required way\n      var tmp = {}\n      var keys = Object.keys(val).sort(compareFunction)\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i]\n        deterministicDecirc(val[key], key, i, stack, val, depth, options)\n        tmp[key] = val[key]\n      }\n      if (typeof parent !== 'undefined') {\n        arr.push([parent, k, val])\n        parent[k] = tmp\n      } else {\n        return tmp\n      }\n    }\n    stack.pop()\n  }\n}\n\n// wraps replacer function to handle values we couldn't replace\n// and mark them as replaced value\nfunction replaceGetterValues (replacer) {\n  replacer =\n    typeof replacer !== 'undefined'\n      ? replacer\n      : function (k, v) {\n        return v\n      }\n  return function (key, val) {\n    if (replacerStack.length > 0) {\n      for (var i = 0; i < replacerStack.length; i++) {\n        var part = replacerStack[i]\n        if (part[1] === key && part[0] === val) {\n          val = part[2]\n          replacerStack.splice(i, 1)\n          break\n        }\n      }\n    }\n    return replacer.call(this, key, val)\n  }\n}\n", "'use strict'\n\nmodule.exports = prettifyError\n\nconst joinLinesWithIndentation = require('./join-lines-with-indentation')\n\n/**\n * @typedef {object} PrettifyErrorParams\n * @property {string} keyName The key assigned to this error in the log object.\n * @property {string} lines The STRINGIFIED error. If the error field has a\n *  custom prettifier, that should be pre-applied as well.\n * @property {string} ident The indentation sequence to use.\n * @property {string} eol The EOL sequence to use.\n */\n\n/**\n * Prettifies an error string into a multi-line format.\n *\n * @param {PrettifyErrorParams} input\n *\n * @returns {string}\n */\nfunction prettifyError ({ keyName, lines, eol, ident }) {\n  let result = ''\n  const joinedLines = joinLinesWithIndentation({ input: lines, ident, eol })\n  const splitLines = `${ident}${keyName}: ${joinedLines}${eol}`.split(eol)\n\n  for (let j = 0; j < splitLines.length; j += 1) {\n    if (j !== 0) result += eol\n\n    const line = splitLines[j]\n    if (/^\\s*\"stack\"/.test(line)) {\n      const matches = /^(\\s*\"stack\":)\\s*(\".*\"),?$/.exec(line)\n      /* istanbul ignore else */\n      if (matches && matches.length === 3) {\n        const indentSize = /^\\s*/.exec(line)[0].length + 4\n        const indentation = ' '.repeat(indentSize)\n        const stackMessage = matches[2]\n        result += matches[1] + eol + indentation + JSON.parse(stackMessage).replace(/\\n/g, eol + indentation)\n      } else {\n        result += line\n      }\n    } else {\n      result += line\n    }\n  }\n\n  return result\n}\n", "'use strict'\n\nmodule.exports = prettifyObject\n\nconst {\n  LOGGER_KEYS\n} = require('../constants')\n\nconst stringifySafe = require('fast-safe-stringify')\nconst joinLinesWithIndentation = require('./join-lines-with-indentation')\nconst prettifyError = require('./prettify-error')\n\n/**\n * @typedef {object} PrettifyObjectParams\n * @property {object} log The object to prettify.\n * @property {boolean} [excludeLoggerKeys] Indicates if known logger specific\n * keys should be excluded from prettification. Default: `true`.\n * @property {string[]} [skipKeys] A set of object keys to exclude from the\n *  * prettified result. Default: `[]`.\n * @property {PrettyContext} context The context object built from parsing\n * the options.\n */\n\n/**\n * Prettifies a standard object. Special care is taken when processing the object\n * to handle child objects that are attached to keys known to contain error\n * objects.\n *\n * @param {PrettifyObjectParams} input\n *\n * @returns {string} The prettified string. This can be as little as `''` if\n * there was nothing to prettify.\n */\nfunction prettifyObject ({\n  log,\n  excludeLoggerKeys = true,\n  skipKeys = [],\n  context\n}) {\n  const {\n    EOL: eol,\n    IDENT: ident,\n    customPrettifiers,\n    errorLikeObjectKeys: errorLikeKeys,\n    objectColorizer,\n    singleLine,\n    colorizer\n  } = context\n  const keysToIgnore = [].concat(skipKeys)\n\n  /* istanbul ignore else */\n  if (excludeLoggerKeys === true) Array.prototype.push.apply(keysToIgnore, LOGGER_KEYS)\n\n  let result = ''\n\n  // Split object keys into two categories: error and non-error\n  const { plain, errors } = Object.entries(log).reduce(({ plain, errors }, [k, v]) => {\n    if (keysToIgnore.includes(k) === false) {\n      // Pre-apply custom prettifiers, because all 3 cases below will need this\n      const pretty = typeof customPrettifiers[k] === 'function'\n        ? customPrettifiers[k](v, k, log, { colors: colorizer.colors })\n        : v\n      if (errorLikeKeys.includes(k)) {\n        errors[k] = pretty\n      } else {\n        plain[k] = pretty\n      }\n    }\n    return { plain, errors }\n  }, { plain: {}, errors: {} })\n\n  if (singleLine) {\n    // Stringify the entire object as a single JSON line\n    /* istanbul ignore else */\n    if (Object.keys(plain).length > 0) {\n      result += objectColorizer.greyMessage(stringifySafe(plain))\n    }\n    result += eol\n    // Avoid printing the escape character on escaped backslashes.\n    result = result.replace(/\\\\\\\\/gi, '\\\\')\n  } else {\n    // Put each object entry on its own line\n    Object.entries(plain).forEach(([keyName, keyValue]) => {\n      // custom prettifiers are already applied above, so we can skip it now\n      let lines = typeof customPrettifiers[keyName] === 'function'\n        ? keyValue\n        : stringifySafe(keyValue, null, 2)\n\n      if (lines === undefined) return\n\n      // Avoid printing the escape character on escaped backslashes.\n      lines = lines.replace(/\\\\\\\\/gi, '\\\\')\n\n      const joinedLines = joinLinesWithIndentation({ input: lines, ident, eol })\n      result += `${ident}${keyName}:${joinedLines.startsWith(eol) ? '' : ' '}${joinedLines}${eol}`\n    })\n  }\n\n  // Errors\n  Object.entries(errors).forEach(([keyName, keyValue]) => {\n    // custom prettifiers are already applied above, so we can skip it now\n    const lines = typeof customPrettifiers[keyName] === 'function'\n      ? keyValue\n      : stringifySafe(keyValue, null, 2)\n\n    if (lines === undefined) return\n\n    result += prettifyError({ keyName, lines, eol, ident })\n  })\n\n  return result\n}\n", "'use strict'\n\nmodule.exports = prettifyErrorLog\n\nconst {\n  LOGGER_KEYS\n} = require('../constants')\n\nconst isObject = require('./is-object')\nconst joinLinesWithIndentation = require('./join-lines-with-indentation')\nconst prettifyObject = require('./prettify-object')\n\n/**\n * @typedef {object} PrettifyErrorLogParams\n * @property {object} log The error log to prettify.\n * @property {PrettyContext} context The context object built from parsing\n * the options.\n */\n\n/**\n * Given a log object that has a `type: 'Error'` key, prettify the object and\n * return the result. In other\n *\n * @param {PrettifyErrorLogParams} input\n *\n * @returns {string} A string that represents the prettified error log.\n */\nfunction prettifyErrorLog ({ log, context }) {\n  const {\n    EOL: eol,\n    IDENT: ident,\n    errorProps: errorProperties,\n    messageKey\n  } = context\n  const stack = log.stack\n  const joinedLines = joinLinesWithIndentation({ input: stack, ident, eol })\n  let result = `${ident}${joinedLines}${eol}`\n\n  if (errorProperties.length > 0) {\n    const excludeProperties = LOGGER_KEYS.concat(messageKey, 'type', 'stack')\n    let propertiesToPrint\n    if (errorProperties[0] === '*') {\n      // Print all sibling properties except for the standard exclusions.\n      propertiesToPrint = Object.keys(log).filter(k => excludeProperties.includes(k) === false)\n    } else {\n      // Print only specified properties unless the property is a standard exclusion.\n      propertiesToPrint = errorProperties.filter(k => excludeProperties.includes(k) === false)\n    }\n\n    for (let i = 0; i < propertiesToPrint.length; i += 1) {\n      const key = propertiesToPrint[i]\n      if (key in log === false) continue\n      if (isObject(log[key])) {\n        // The nested object may have \"logger\" type keys but since they are not\n        // at the root level of the object being processed, we want to print them.\n        // Thus, we invoke with `excludeLoggerKeys: false`.\n        const prettifiedObject = prettifyObject({\n          log: log[key],\n          excludeLoggerKeys: false,\n          context: {\n            ...context,\n            IDENT: ident + ident\n          }\n        })\n        result = `${result}${ident}${key}: {${eol}${prettifiedObject}${ident}}${eol}`\n        continue\n      }\n      result = `${result}${ident}${key}: ${log[key]}${eol}`\n    }\n  }\n\n  return result\n}\n", "'use strict'\n\nmodule.exports = prettifyLevel\n\nconst getPropertyValue = require('./get-property-value')\n\n/**\n * @typedef {object} PrettifyLevelParams\n * @property {object} log The log object.\n * @property {PrettyContext} context The context object built from parsing\n * the options.\n */\n\n/**\n * Checks if the passed in log has a `level` value and returns a prettified\n * string for that level if so.\n *\n * @param {PrettifyLevelParams} input\n *\n * @returns {undefined|string} If `log` does not have a `level` property then\n * `undefined` will be returned. Otherwise, a string from the specified\n * `colorizer` is returned.\n */\nfunction prettifyLevel ({ log, context }) {\n  const {\n    colorizer,\n    customLevels,\n    customLevelNames,\n    levelKey,\n    getLevelLabelData\n  } = context\n  const prettifier = context.customPrettifiers?.level\n  const output = getPropertyValue(log, levelKey)\n  if (output === undefined) return undefined\n  const labelColorized = colorizer(output, { customLevels, customLevelNames })\n  if (prettifier) {\n    const [label] = getLevelLabelData(output)\n    return prettifier(output, levelKey, log, { label, labelColorized, colors: colorizer.colors })\n  }\n  return labelColorized\n}\n", "'use strict'\n\nmodule.exports = prettifyMessage\n\nconst {\n  LEVELS\n} = require('../constants')\n\nconst getPropertyValue = require('./get-property-value')\nconst interpretConditionals = require('./interpret-conditionals')\n\n/**\n * @typedef {object} PrettifyMessageParams\n * @property {object} log The log object with the message to colorize.\n * @property {PrettyContext} context The context object built from parsing\n * the options.\n */\n\n/**\n * Prettifies a message string if the given `log` has a message property.\n *\n * @param {PrettifyMessageParams} input\n *\n * @returns {undefined|string} If the message key is not found, or the message\n * key is not a string, then `undefined` will be returned. Otherwise, a string\n * that is the prettified message.\n */\nfunction prettifyMessage ({ log, context }) {\n  const {\n    colorizer,\n    customLevels,\n    levelKey,\n    levelLabel,\n    messageFormat,\n    messageKey,\n    useOnlyCustomProps\n  } = context\n  if (messageFormat && typeof messageFormat === 'string') {\n    const parsedMessageFormat = interpretConditionals(messageFormat, log)\n\n    const message = String(parsedMessageFormat).replace(\n      /{([^{}]+)}/g,\n      function (match, p1) {\n        // return log level as string instead of int\n        let level\n        if (p1 === levelLabel && (level = getPropertyValue(log, levelKey)) !== undefined) {\n          const condition = useOnlyCustomProps ? customLevels === undefined : customLevels[level] === undefined\n          return condition ? LEVELS[level] : customLevels[level]\n        }\n\n        // Parse nested key access, e.g. `{keyA.subKeyB}`.\n        return getPropertyValue(log, p1) || ''\n      })\n    return colorizer.message(message)\n  }\n  if (messageFormat && typeof messageFormat === 'function') {\n    const msg = messageFormat(log, messageKey, levelLabel, { colors: colorizer.colors })\n    return colorizer.message(msg)\n  }\n  if (messageKey in log === false) return undefined\n  if (typeof log[messageKey] !== 'string' && typeof log[messageKey] !== 'number' && typeof log[messageKey] !== 'boolean') return undefined\n  return colorizer.message(log[messageKey])\n}\n", "'use strict'\n\nmodule.exports = prettifyMetadata\n\n/**\n * @typedef {object} PrettifyMetadataParams\n * @property {object} log The log that may or may not contain metadata to\n * be prettified.\n * @property {PrettyContext} context The context object built from parsing\n * the options.\n */\n\n/**\n * Prettifies metadata that is usually present in a Pino log line. It looks for\n * fields `name`, `pid`, `hostname`, and `caller` and returns a formatted string using\n * the fields it finds.\n *\n * @param {PrettifyMetadataParams} input\n *\n * @returns {undefined|string} If no metadata is found then `undefined` is\n * returned. Otherwise, a string of prettified metadata is returned.\n */\nfunction prettifyMetadata ({ log, context }) {\n  const { customPrettifiers: prettifiers, colorizer } = context\n  let line = ''\n\n  if (log.name || log.pid || log.hostname) {\n    line += '('\n\n    if (log.name) {\n      line += prettifiers.name\n        ? prettifiers.name(log.name, 'name', log, { colors: colorizer.colors })\n        : log.name\n    }\n\n    if (log.pid) {\n      const prettyPid = prettifiers.pid\n        ? prettifiers.pid(log.pid, 'pid', log, { colors: colorizer.colors })\n        : log.pid\n      if (log.name && log.pid) {\n        line += '/' + prettyPid\n      } else {\n        line += prettyPid\n      }\n    }\n\n    if (log.hostname) {\n      // If `pid` and `name` were in the ignore keys list then we don't need\n      // the leading space.\n      const prettyHostname = prettifiers.hostname\n        ? prettifiers.hostname(log.hostname, 'hostname', log, { colors: colorizer.colors })\n        : log.hostname\n\n      line += `${line === '(' ? 'on' : ' on'} ${prettyHostname}`\n    }\n\n    line += ')'\n  }\n\n  if (log.caller) {\n    const prettyCaller = prettifiers.caller\n      ? prettifiers.caller(log.caller, 'caller', log, { colors: colorizer.colors })\n      : log.caller\n\n    line += `${line === '' ? '' : ' '}<${prettyCaller}>`\n  }\n\n  if (line === '') {\n    return undefined\n  } else {\n    return line\n  }\n}\n", "'use strict'\n\nmodule.exports = prettifyTime\n\nconst formatTime = require('./format-time')\n\n/**\n * @typedef {object} PrettifyTimeParams\n * @property {object} log The log object with the timestamp to be prettified.\n * @property {PrettyContext} context The context object built from parsing\n * the options.\n */\n\n/**\n * Prettifies a timestamp if the given `log` has either `time`, `timestamp` or custom specified timestamp\n * property.\n *\n * @param {PrettifyTimeParams} input\n *\n * @returns {undefined|string} If a timestamp property cannot be found then\n * `undefined` is returned. Otherwise, the prettified time is returned as a\n * string.\n */\nfunction prettifyTime ({ log, context }) {\n  const {\n    timestampKey,\n    translateTime: translateFormat\n  } = context\n  const prettifier = context.customPrettifiers?.time\n  let time = null\n\n  if (timestampKey in log) {\n    time = log[timestampKey]\n  } else if ('timestamp' in log) {\n    time = log.timestamp\n  }\n\n  if (time === null) return undefined\n  const output = translateFormat ? formatTime(time, translateFormat) : time\n\n  return prettifier ? prettifier(output) : `[${output}]`\n}\n", "'use strict'\n\nmodule.exports = {\n  buildSafeSonicBoom: require('./build-safe-sonic-boom.js'),\n  createDate: require('./create-date.js'),\n  deleteLogProperty: require('./delete-log-property.js'),\n  filterLog: require('./filter-log.js'),\n  formatTime: require('./format-time.js'),\n  getPropertyValue: require('./get-property-value.js'),\n  handleCustomLevelsNamesOpts: require('./handle-custom-levels-names-opts.js'),\n  handleCustomLevelsOpts: require('./handle-custom-levels-opts.js'),\n  interpretConditionals: require('./interpret-conditionals.js'),\n  isObject: require('./is-object.js'),\n  isValidDate: require('./is-valid-date.js'),\n  joinLinesWithIndentation: require('./join-lines-with-indentation.js'),\n  noop: require('./noop.js'),\n  parseFactoryOptions: require('./parse-factory-options.js'),\n  prettifyErrorLog: require('./prettify-error-log.js'),\n  prettifyError: require('./prettify-error.js'),\n  prettifyLevel: require('./prettify-level.js'),\n  prettifyMessage: require('./prettify-message.js'),\n  prettifyMetadata: require('./prettify-metadata.js'),\n  prettifyObject: require('./prettify-object.js'),\n  prettifyTime: require('./prettify-time.js'),\n  splitPropertyKey: require('./split-property-key.js'),\n  getLevelLabelData: require('./get-level-label-data')\n}\n\n// The remainder of this file consists of jsdoc blocks that are difficult to\n// determine a more appropriate \"home\" for. As an example, the blocks associated\n// with custom prettifiers could live in either the `prettify-level`,\n// `prettify-metadata`, or `prettify-time` files since they are the primary\n// files where such code is used. But we want a central place to define common\n// doc blocks, so we are picking this file as the answer.\n\n/**\n * A hash of log property names mapped to prettifier functions. When the\n * incoming log data is being processed for prettification, any key on the log\n * that matches a key in a custom prettifiers hash will be prettified using\n * that matching custom prettifier. The value passed to the custom prettifier\n * will the value associated with the corresponding log key.\n *\n * The hash may contain any arbitrary keys for arbitrary log properties, but it\n * may also contain a set of predefined key names that map to well-known log\n * properties. These keys are:\n *\n * + `time` (for the timestamp field)\n * + `level` (for the level label field; value may be a level number instead\n * of a level label)\n * + `hostname`\n * + `pid`\n * + `name`\n * + `caller`\n *\n * @typedef {Object.<string, CustomPrettifierFunc>} CustomPrettifiers\n */\n\n/**\n * A synchronous function to be used for prettifying a log property. It must\n * return a string.\n *\n * @typedef {function} CustomPrettifierFunc\n * @param {any} value The value to be prettified for the key associated with\n * the prettifier.\n * @returns {string}\n */\n\n/**\n * A tokenized string that indicates how the prettified log line should be\n * formatted. Tokens are either log properties enclosed in curly braces, e.g.\n * `{levelLabel}`, `{pid}`, or `{req.url}`, or conditional directives in curly\n * braces. The only conditional directives supported are `if` and `end`, e.g.\n * `{if pid}{pid}{end}`; every `if` must have a matching `end`. Nested\n * conditions are not supported.\n *\n * @typedef {string} MessageFormatString\n *\n * @example\n * `{levelLabel} - {if pid}{pid} - {end}url:{req.url}`\n */\n\n/**\n * @typedef {object} PrettifyMessageExtras\n * @property {object} colors Available color functions based on `useColor` (or `colorize`) context\n * the options.\n */\n\n/**\n * A function that accepts a log object, name of the message key, and name of\n * the level label key and returns a formatted log line.\n *\n * Note: this function must be synchronous.\n *\n * @typedef {function} MessageFormatFunction\n * @param {object} log The log object to be processed.\n * @param {string} messageKey The name of the key in the `log` object that\n * contains the log message.\n * @param {string} levelLabel The name of the key in the `log` object that\n * contains the log level name.\n * @param {PrettifyMessageExtras} extras Additional data available for message context\n * @returns {string}\n *\n * @example\n * function (log, messageKey, levelLabel) {\n *   return `${log[levelLabel]} - ${log[messageKey]}`\n * }\n */\n", "'use strict'\n\nconst hasBuffer = typeof Buffer !== 'undefined'\nconst suspectProtoRx = /\"(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])(?:p|\\\\u0070)(?:r|\\\\u0072)(?:o|\\\\u006[Ff])(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])\"\\s*:/\nconst suspectConstructorRx = /\"(?:c|\\\\u0063)(?:o|\\\\u006[Ff])(?:n|\\\\u006[Ee])(?:s|\\\\u0073)(?:t|\\\\u0074)(?:r|\\\\u0072)(?:u|\\\\u0075)(?:c|\\\\u0063)(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:r|\\\\u0072)\"\\s*:/\n\nfunction _parse (text, reviver, options) {\n  // Normalize arguments\n  if (options == null) {\n    if (reviver !== null && typeof reviver === 'object') {\n      options = reviver\n      reviver = undefined\n    }\n  }\n\n  if (hasBuffer && Buffer.isBuffer(text)) {\n    text = text.toString()\n  }\n\n  // BOM checker\n  if (text && text.charCodeAt(0) === 0xFEFF) {\n    text = text.slice(1)\n  }\n\n  // Parse normally, allowing exceptions\n  const obj = JSON.parse(text, reviver)\n\n  // Ignore null and non-objects\n  if (obj === null || typeof obj !== 'object') {\n    return obj\n  }\n\n  const protoAction = (options && options.protoAction) || 'error'\n  const constructorAction = (options && options.constructorAction) || 'error'\n\n  // options: 'error' (default) / 'remove' / 'ignore'\n  if (protoAction === 'ignore' && constructorAction === 'ignore') {\n    return obj\n  }\n\n  if (protoAction !== 'ignore' && constructorAction !== 'ignore') {\n    if (suspectProtoRx.test(text) === false && suspectConstructorRx.test(text) === false) {\n      return obj\n    }\n  } else if (protoAction !== 'ignore' && constructorAction === 'ignore') {\n    if (suspectProtoRx.test(text) === false) {\n      return obj\n    }\n  } else {\n    if (suspectConstructorRx.test(text) === false) {\n      return obj\n    }\n  }\n\n  // Scan result for proto keys\n  return filter(obj, { protoAction, constructorAction, safe: options && options.safe })\n}\n\nfunction filter (obj, { protoAction = 'error', constructorAction = 'error', safe } = {}) {\n  let next = [obj]\n\n  while (next.length) {\n    const nodes = next\n    next = []\n\n    for (const node of nodes) {\n      if (protoAction !== 'ignore' && Object.prototype.hasOwnProperty.call(node, '__proto__')) { // Avoid calling node.hasOwnProperty directly\n        if (safe === true) {\n          return null\n        } else if (protoAction === 'error') {\n          throw new SyntaxError('Object contains forbidden prototype property')\n        }\n\n        delete node.__proto__ // eslint-disable-line no-proto\n      }\n\n      if (constructorAction !== 'ignore' &&\n          Object.prototype.hasOwnProperty.call(node, 'constructor') &&\n          Object.prototype.hasOwnProperty.call(node.constructor, 'prototype')) { // Avoid calling node.hasOwnProperty directly\n        if (safe === true) {\n          return null\n        } else if (constructorAction === 'error') {\n          throw new SyntaxError('Object contains forbidden prototype property')\n        }\n\n        delete node.constructor\n      }\n\n      for (const key in node) {\n        const value = node[key]\n        if (value && typeof value === 'object') {\n          next.push(value)\n        }\n      }\n    }\n  }\n  return obj\n}\n\nfunction parse (text, reviver, options) {\n  const stackTraceLimit = Error.stackTraceLimit\n  Error.stackTraceLimit = 0\n  try {\n    return _parse(text, reviver, options)\n  } finally {\n    Error.stackTraceLimit = stackTraceLimit\n  }\n}\n\nfunction safeParse (text, reviver) {\n  const stackTraceLimit = Error.stackTraceLimit\n  Error.stackTraceLimit = 0\n  try {\n    return _parse(text, reviver, { safe: true })\n  } catch (_e) {\n    return null\n  } finally {\n    Error.stackTraceLimit = stackTraceLimit\n  }\n}\n\nmodule.exports = parse\nmodule.exports.default = parse\nmodule.exports.parse = parse\nmodule.exports.safeParse = safeParse\nmodule.exports.scan = filter\n", "'use strict'\n\nmodule.exports = pretty\n\nconst sjs = require('secure-json-parse')\n\nconst isObject = require('./utils/is-object')\nconst prettifyErrorLog = require('./utils/prettify-error-log')\nconst prettifyLevel = require('./utils/prettify-level')\nconst prettifyMessage = require('./utils/prettify-message')\nconst prettifyMetadata = require('./utils/prettify-metadata')\nconst prettifyObject = require('./utils/prettify-object')\nconst prettifyTime = require('./utils/prettify-time')\nconst filterLog = require('./utils/filter-log')\n\nconst {\n  LEVELS,\n  LEVEL_KEY,\n  LEVEL_NAMES\n} = require('./constants')\n\nconst jsonParser = input => {\n  try {\n    return { value: sjs.parse(input, { protoAction: 'remove' }) }\n  } catch (err) {\n    return { err }\n  }\n}\n\n/**\n * Orchestrates processing the received log data according to the provided\n * configuration and returns a prettified log string.\n *\n * @typedef {function} LogPrettifierFunc\n * @param {string|object} inputData A log string or a log-like object.\n * @returns {string} A string that represents the prettified log data.\n */\nfunction pretty (inputData) {\n  let log\n  if (!isObject(inputData)) {\n    const parsed = jsonParser(inputData)\n    if (parsed.err || !isObject(parsed.value)) {\n      // pass through\n      return inputData + this.EOL\n    }\n    log = parsed.value\n  } else {\n    log = inputData\n  }\n\n  if (this.minimumLevel) {\n    // We need to figure out if the custom levels has the desired minimum\n    // level & use that one if found. If not, determine if the level exists\n    // in the standard levels. In both cases, make sure we have the level\n    // number instead of the level name.\n    let condition\n    if (this.useOnlyCustomProps) {\n      condition = this.customLevels\n    } else {\n      condition = this.customLevelNames[this.minimumLevel] !== undefined\n    }\n    let minimum\n    if (condition) {\n      minimum = this.customLevelNames[this.minimumLevel]\n    } else {\n      minimum = LEVEL_NAMES[this.minimumLevel]\n    }\n    if (!minimum) {\n      minimum = typeof this.minimumLevel === 'string'\n        ? LEVEL_NAMES[this.minimumLevel]\n        : LEVEL_NAMES[LEVELS[this.minimumLevel].toLowerCase()]\n    }\n\n    const level = log[this.levelKey === undefined ? LEVEL_KEY : this.levelKey]\n    if (level < minimum) return\n  }\n\n  const prettifiedMessage = prettifyMessage({ log, context: this.context })\n\n  if (this.ignoreKeys || this.includeKeys) {\n    log = filterLog({ log, context: this.context })\n  }\n\n  const prettifiedLevel = prettifyLevel({\n    log,\n    context: {\n      ...this.context,\n      // This is odd. The colorizer ends up relying on the value of\n      // `customProperties` instead of the original `customLevels` and\n      // `customLevelNames`.\n      ...this.context.customProperties\n    }\n  })\n  const prettifiedMetadata = prettifyMetadata({ log, context: this.context })\n  const prettifiedTime = prettifyTime({ log, context: this.context })\n\n  let line = ''\n  if (this.levelFirst && prettifiedLevel) {\n    line = `${prettifiedLevel}`\n  }\n\n  if (prettifiedTime && line === '') {\n    line = `${prettifiedTime}`\n  } else if (prettifiedTime) {\n    line = `${line} ${prettifiedTime}`\n  }\n\n  if (!this.levelFirst && prettifiedLevel) {\n    if (line.length > 0) {\n      line = `${line} ${prettifiedLevel}`\n    } else {\n      line = prettifiedLevel\n    }\n  }\n\n  if (prettifiedMetadata) {\n    if (line.length > 0) {\n      line = `${line} ${prettifiedMetadata}:`\n    } else {\n      line = prettifiedMetadata\n    }\n  }\n\n  if (line.endsWith(':') === false && line !== '') {\n    line += ':'\n  }\n\n  if (prettifiedMessage !== undefined) {\n    if (line.length > 0) {\n      line = `${line} ${prettifiedMessage}`\n    } else {\n      line = prettifiedMessage\n    }\n  }\n\n  if (line.length > 0 && !this.singleLine) {\n    line += this.EOL\n  }\n\n  // pino@7+ does not log this anymore\n  if (log.type === 'Error' && typeof log.stack === 'string') {\n    const prettifiedErrorLog = prettifyErrorLog({ log, context: this.context })\n    if (this.singleLine) line += this.EOL\n    line += prettifiedErrorLog\n  } else if (this.hideObject === false) {\n    const skipKeys = [\n      this.messageKey,\n      this.levelKey,\n      this.timestampKey\n    ]\n      .map((key) => key.replaceAll(/\\\\/g, ''))\n      .filter(key => {\n        return typeof log[key] === 'string' ||\n          typeof log[key] === 'number' ||\n          typeof log[key] === 'boolean'\n      })\n    const prettifiedObject = prettifyObject({\n      log,\n      skipKeys,\n      context: this.context\n    })\n\n    // In single line mode, include a space only if prettified version isn't empty\n    if (this.singleLine && !/^\\s$/.test(prettifiedObject)) {\n      line += ' '\n    }\n    line += prettifiedObject\n  }\n\n  return line\n}\n", "'use strict'\n\nconst { isColorSupported } = require('colorette')\nconst pump = require('pump')\nconst { Transform } = require('stream')\nconst abstractTransport = require('pino-abstract-transport')\nconst colors = require('./lib/colors')\nconst {\n  ERROR_LIKE_KEYS,\n  LEVEL_KEY,\n  LEVEL_LABEL,\n  MESSAGE_KEY,\n  TIMESTAMP_KEY\n} = require('./lib/constants')\nconst {\n  buildSafeSonicBoom,\n  parseFactoryOptions\n} = require('./lib/utils')\nconst pretty = require('./lib/pretty')\n\n/**\n * @typedef {object} PinoPrettyOptions\n * @property {boolean} [colorize] Indicates if colors should be used when\n * prettifying. The default will be determined by the terminal capabilities at\n * run time.\n * @property {boolean} [colorizeObjects=true] Apply coloring to rendered objects\n * when coloring is enabled.\n * @property {boolean} [crlf=false] End lines with `\\r\\n` instead of `\\n`.\n * @property {string|null} [customColors=null] A comma separated list of colors\n * to use for specific level labels, e.g. `err:red,info:blue`.\n * @property {string|null} [customLevels=null] A comma separated list of user\n * defined level names and numbers, e.g. `err:99,info:1`.\n * @property {CustomPrettifiers} [customPrettifiers={}] A set of prettifier\n * functions to apply to keys defined in this object.\n * @property {K_ERROR_LIKE_KEYS} [errorLikeObjectKeys] A list of string property\n * names to consider as error objects.\n * @property {string} [errorProps=''] A comma separated list of properties on\n * error objects to include in the output.\n * @property {boolean} [hideObject=false] When `true`, data objects will be\n * omitted from the output (except for error objects).\n * @property {string} [ignore='hostname'] A comma separated list of log keys\n * to omit when outputting the prettified log information.\n * @property {undefined|string} [include=undefined] A comma separated list of\n * log keys to include in the prettified log information. Only the keys in this\n * list will be included in the output.\n * @property {boolean} [levelFirst=false] When true, the log level will be the\n * first field in the prettified output.\n * @property {string} [levelKey='level'] The key name in the log data that\n * contains the level value for the log.\n * @property {string} [levelLabel='levelLabel'] Token name to use in\n * `messageFormat` to represent the name of the logged level.\n * @property {null|MessageFormatString|MessageFormatFunction} [messageFormat=null]\n * When a string, defines how the prettified line should be formatted according\n * to defined tokens. When a function, a synchronous function that returns a\n * formatted string.\n * @property {string} [messageKey='msg'] Defines the key in incoming logs that\n * contains the message of the log, if present.\n * @property {undefined|string|number} [minimumLevel=undefined] The minimum\n * level for logs that should be processed. Any logs below this level will\n * be omitted.\n * @property {object} [outputStream=process.stdout] The stream to write\n * prettified log lines to.\n * @property {boolean} [singleLine=false] When `true` any objects, except error\n * objects, in the log data will be printed as a single line instead as multiple\n * lines.\n * @property {string} [timestampKey='time'] Defines the key in incoming logs\n * that contains the timestamp of the log, if present.\n * @property {boolean|string} [translateTime=true] When true, will translate a\n * JavaScript date integer into a human-readable string. If set to a string,\n * it must be a format string.\n * @property {boolean} [useOnlyCustomProps=true] When true, only custom levels\n * and colors will be used if they have been provided.\n */\n\n/**\n * The default options that will be used when prettifying log lines.\n *\n * @type {PinoPrettyOptions}\n */\nconst defaultOptions = {\n  colorize: isColorSupported,\n  colorizeObjects: true,\n  crlf: false,\n  customColors: null,\n  customLevels: null,\n  customPrettifiers: {},\n  errorLikeObjectKeys: ERROR_LIKE_KEYS,\n  errorProps: '',\n  hideObject: false,\n  ignore: 'hostname',\n  include: undefined,\n  levelFirst: false,\n  levelKey: LEVEL_KEY,\n  levelLabel: LEVEL_LABEL,\n  messageFormat: null,\n  messageKey: MESSAGE_KEY,\n  minimumLevel: undefined,\n  outputStream: process.stdout,\n  singleLine: false,\n  timestampKey: TIMESTAMP_KEY,\n  translateTime: true,\n  useOnlyCustomProps: true\n}\n\n/**\n * Processes the supplied options and returns a function that accepts log data\n * and produces a prettified log string.\n *\n * @param {PinoPrettyOptions} options Configuration for the prettifier.\n * @returns {LogPrettifierFunc}\n */\nfunction prettyFactory (options) {\n  const context = parseFactoryOptions(Object.assign({}, defaultOptions, options))\n  return pretty.bind({ ...context, context })\n}\n\n/**\n * @typedef {PinoPrettyOptions} BuildStreamOpts\n * @property {object|number|string} [destination] A destination stream, file\n * descriptor, or target path to a file.\n * @property {boolean} [append]\n * @property {boolean} [mkdir]\n * @property {boolean} [sync=false]\n */\n\n/**\n * Constructs a {@link LogPrettifierFunc} and a stream to which the produced\n * prettified log data will be written.\n *\n * @param {BuildStreamOpts} opts\n * @returns {Transform | (Transform & OnUnknown)}\n */\nfunction build (opts = {}) {\n  let pretty = prettyFactory(opts)\n  let destination\n  return abstractTransport(function (source) {\n    source.on('message', function pinoConfigListener (message) {\n      if (!message || message.code !== 'PINO_CONFIG') return\n      Object.assign(opts, {\n        messageKey: message.config.messageKey,\n        errorLikeObjectKeys: Array.from(new Set([...(opts.errorLikeObjectKeys || ERROR_LIKE_KEYS), message.config.errorKey])),\n        customLevels: message.config.levels.values\n      })\n      pretty = prettyFactory(opts)\n      source.off('message', pinoConfigListener)\n    })\n    const stream = new Transform({\n      objectMode: true,\n      autoDestroy: true,\n      transform (chunk, enc, cb) {\n        const line = pretty(chunk)\n        cb(null, line)\n      }\n    })\n\n    if (typeof opts.destination === 'object' && typeof opts.destination.write === 'function') {\n      destination = opts.destination\n    } else {\n      destination = buildSafeSonicBoom({\n        dest: opts.destination || 1,\n        append: opts.append,\n        mkdir: opts.mkdir,\n        sync: opts.sync // by default sonic will be async\n      })\n    }\n\n    source.on('unknown', function (line) {\n      destination.write(line + '\\n')\n    })\n\n    pump(source, stream, destination)\n    return stream\n  }, {\n    parse: 'lines',\n    close (err, cb) {\n      destination.on('close', () => {\n        cb(err)\n      })\n    }\n  })\n}\n\nmodule.exports = build\nmodule.exports.build = build\nmodule.exports.PinoPretty = build\nmodule.exports.prettyFactory = prettyFactory\nmodule.exports.colorizerFactory = colors\nmodule.exports.isColorSupported = isColorSupported\nmodule.exports.default = build\n", "export const UV_UDP_REUSEADDR = 4;\nexport const dlopen = {\n\tRTLD_LAZY: 1,\n\tRTLD_NOW: 2,\n\tRTLD_GLOBAL: 256,\n\tRTLD_LOCAL: 0,\n\tRTLD_DEEPBIND: 8\n};\nexport const errno = {\n\tE2BIG: 7,\n\tEACCES: 13,\n\tEADDRINUSE: 98,\n\tEADDRNOTAVAIL: 99,\n\tEAFNOSUPPORT: 97,\n\tEAGAIN: 11,\n\tEALREADY: 114,\n\tEBADF: 9,\n\tEBADMSG: 74,\n\tEBUSY: 16,\n\tECANCELED: 125,\n\tECHILD: 10,\n\tECONNABORTED: 103,\n\tECONNREFUSED: 111,\n\tECONNRESET: 104,\n\tEDEADLK: 35,\n\tEDESTADDRREQ: 89,\n\tEDOM: 33,\n\tEDQUOT: 122,\n\tEEXIST: 17,\n\tEFAULT: 14,\n\tEFBIG: 27,\n\tEHOSTUNREACH: 113,\n\tEIDRM: 43,\n\tEILSEQ: 84,\n\tEINPROGRESS: 115,\n\tEINTR: 4,\n\tEINVAL: 22,\n\tEIO: 5,\n\tEISCONN: 106,\n\tEISDIR: 21,\n\tELOOP: 40,\n\tEMFILE: 24,\n\tEMLINK: 31,\n\tEMSGSIZE: 90,\n\tEMULTIHOP: 72,\n\tENAMETOOLONG: 36,\n\tENETDOWN: 100,\n\tENETRESET: 102,\n\tENETUNREACH: 101,\n\tENFILE: 23,\n\tENOBUFS: 105,\n\tENODATA: 61,\n\tENODEV: 19,\n\tENOENT: 2,\n\tENOEXEC: 8,\n\tENOLCK: 37,\n\tENOLINK: 67,\n\tENOMEM: 12,\n\tENOMSG: 42,\n\tENOPROTOOPT: 92,\n\tENOSPC: 28,\n\tENOSR: 63,\n\tENOSTR: 60,\n\tENOSYS: 38,\n\tENOTCONN: 107,\n\tENOTDIR: 20,\n\tENOTEMPTY: 39,\n\tENOTSOCK: 88,\n\tENOTSUP: 95,\n\tENOTTY: 25,\n\tENXIO: 6,\n\tEOPNOTSUPP: 95,\n\tEOVERFLOW: 75,\n\tEPERM: 1,\n\tEPIPE: 32,\n\tEPROTO: 71,\n\tEPROTONOSUPPORT: 93,\n\tEPROTOTYPE: 91,\n\tERANGE: 34,\n\tEROFS: 30,\n\tESPIPE: 29,\n\tESRCH: 3,\n\tESTALE: 116,\n\tETIME: 62,\n\tETIMEDOUT: 110,\n\tETXTBSY: 26,\n\tEWOULDBLOCK: 11,\n\tEXDEV: 18\n};\nexport const signals = {\n\tSIGHUP: 1,\n\tSIGINT: 2,\n\tSIGQUIT: 3,\n\tSIGILL: 4,\n\tSIGTRAP: 5,\n\tSIGABRT: 6,\n\tSIGIOT: 6,\n\tSIGBUS: 7,\n\tSIGFPE: 8,\n\tSIGKILL: 9,\n\tSIGUSR1: 10,\n\tSIGSEGV: 11,\n\tSIGUSR2: 12,\n\tSIGPIPE: 13,\n\tSIGALRM: 14,\n\tSIGTERM: 15,\n\tSIGCHLD: 17,\n\tSIGSTKFLT: 16,\n\tSIGCONT: 18,\n\tSIGSTOP: 19,\n\tSIGTSTP: 20,\n\tSIGTTIN: 21,\n\tSIGTTOU: 22,\n\tSIGURG: 23,\n\tSIGXCPU: 24,\n\tSIGXFSZ: 25,\n\tSIGVTALRM: 26,\n\tSIGPROF: 27,\n\tSIGWINCH: 28,\n\tSIGIO: 29,\n\tSIGPOLL: 29,\n\tSIGPWR: 30,\n\tSIGSYS: 31\n};\nexport const priority = {\n\tPRIORITY_LOW: 19,\n\tPRIORITY_BELOW_NORMAL: 10,\n\tPRIORITY_NORMAL: 0,\n\tPRIORITY_ABOVE_NORMAL: -7,\n\tPRIORITY_HIGH: -14,\n\tPRIORITY_HIGHEST: -20\n};\n", "import { notImplemented } from \"../_internal/utils.mjs\";\nimport { UV_UDP_REUSEADDR, dlopen, errno, signals, priority } from \"./internal/os/constants.mjs\";\nexport const constants = {\n\tUV_UDP_REUSEADDR,\n\tdlopen,\n\terrno,\n\tsignals,\n\tpriority\n};\nconst NUM_CPUS = 8;\nexport const availableParallelism = () => NUM_CPUS;\nexport const arch = () => \"\";\nexport const machine = () => \"\";\nexport const endianness = () => \"LE\";\nexport const cpus = () => {\n\tconst info = {\n\t\tmodel: \"\",\n\t\tspeed: 0,\n\t\ttimes: {\n\t\t\tuser: 0,\n\t\t\tnice: 0,\n\t\t\tsys: 0,\n\t\t\tidle: 0,\n\t\t\tirq: 0\n\t\t}\n\t};\n\treturn Array.from({ length: NUM_CPUS }, () => info);\n};\nexport const getPriority = () => 0;\nexport const setPriority = /* @__PURE__ */ notImplemented(\"os.setPriority\");\nexport const homedir = () => \"/\";\nexport const tmpdir = () => \"/tmp\";\nexport const devNull = \"/dev/null\";\nexport const freemem = () => 0;\nexport const totalmem = () => 0;\nexport const loadavg = () => [\n\t0,\n\t0,\n\t0\n];\nexport const uptime = () => 0;\nexport const hostname = () => \"\";\nexport const networkInterfaces = () => {\n\treturn { lo0: [\n\t\t{\n\t\t\taddress: \"127.0.0.1\",\n\t\t\tnetmask: \"255.0.0.0\",\n\t\t\tfamily: \"IPv4\",\n\t\t\tmac: \"00:00:00:00:00:00\",\n\t\t\tinternal: true,\n\t\t\tcidr: \"127.0.0.1/8\"\n\t\t},\n\t\t{\n\t\t\taddress: \"::1\",\n\t\t\tnetmask: \"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\",\n\t\t\tfamily: \"IPv6\",\n\t\t\tmac: \"00:00:00:00:00:00\",\n\t\t\tinternal: true,\n\t\t\tcidr: \"::1/128\",\n\t\t\tscopeid: 0\n\t\t},\n\t\t{\n\t\t\taddress: \"fe80::1\",\n\t\t\tnetmask: \"ffff:ffff:ffff:ffff::\",\n\t\t\tfamily: \"IPv6\",\n\t\t\tmac: \"00:00:00:00:00:00\",\n\t\t\tinternal: true,\n\t\t\tcidr: \"fe80::1/64\",\n\t\t\tscopeid: 1\n\t\t}\n\t] };\n};\nexport const platform = () => \"linux\";\nexport const type = () => \"Linux\";\nexport const release = () => \"\";\nexport const version = () => \"\";\nexport const userInfo = (opts) => {\n\tconst encode = (str) => {\n\t\tif (opts?.encoding) {\n\t\t\tconst buff = Buffer.from(str);\n\t\t\treturn opts.encoding === \"buffer\" ? buff : buff.toString(opts.encoding);\n\t\t}\n\t\treturn str;\n\t};\n\treturn {\n\t\tgid: 1e3,\n\t\tuid: 1e3,\n\t\thomedir: encode(\"/\"),\n\t\tshell: encode(\"/bin/sh\"),\n\t\tusername: encode(\"root\")\n\t};\n};\nexport const EOL = \"\\n\";\nexport default {\n\tarch,\n\tavailableParallelism,\n\tconstants,\n\tcpus,\n\tEOL,\n\tendianness,\n\tdevNull,\n\tfreemem,\n\tgetPriority,\n\thomedir,\n\thostname,\n\tloadavg,\n\tmachine,\n\tnetworkInterfaces,\n\tplatform,\n\trelease,\n\tsetPriority,\n\ttmpdir,\n\ttotalmem,\n\ttype,\n\tuptime,\n\tuserInfo,\n\tversion\n};\n", "import libDefault from 'os';\nmodule.exports = libDefault;", "export const subtle = globalThis.crypto?.subtle;\nexport const randomUUID = () => {\n\treturn globalThis.crypto?.randomUUID();\n};\nexport const getRandomValues = (array) => {\n\treturn globalThis.crypto?.getRandomValues(array);\n};\n", "import { notImplemented, notImplementedClass } from \"../../../_internal/utils.mjs\";\nimport { getRandomValues } from \"./web.mjs\";\nconst MAX_RANDOM_VALUE_BYTES = 65536;\nexport const webcrypto = new Proxy(globalThis.crypto, { get(_, key) {\n\tif (key === \"CryptoKey\") {\n\t\treturn globalThis.CryptoKey;\n\t}\n\tif (typeof globalThis.crypto[key] === \"function\") {\n\t\treturn globalThis.crypto[key].bind(globalThis.crypto);\n\t}\n\treturn globalThis.crypto[key];\n} });\nexport const randomBytes = (size, cb) => {\n\tconst bytes = Buffer.alloc(size, 0, undefined);\n\tfor (let generated = 0; generated < size; generated += MAX_RANDOM_VALUE_BYTES) {\n\t\tgetRandomValues(\n\t\t\t// Use subarray to get a view of the buffer\n\t\t\tUint8Array.prototype.subarray.call(bytes, generated, generated + MAX_RANDOM_VALUE_BYTES)\n);\n\t}\n\tif (typeof cb === \"function\") {\n\t\tcb(null, bytes);\n\t\treturn undefined;\n\t}\n\treturn bytes;\n};\nexport const rng = randomBytes;\nexport const prng = randomBytes;\nexport const fips = false;\nexport const checkPrime = /* @__PURE__ */ notImplemented(\"crypto.checkPrime\");\nexport const checkPrimeSync = /* @__PURE__ */ notImplemented(\"crypto.checkPrimeSync\");\n/** @deprecated */\nexport const createCipher = /* @__PURE__ */ notImplemented(\"crypto.createCipher\");\n/** @deprecated */\nexport const createDecipher = /* @__PURE__ */ notImplemented(\"crypto.createDecipher\");\nexport const pseudoRandomBytes = /* @__PURE__ */ notImplemented(\"crypto.pseudoRandomBytes\");\nexport const createCipheriv = /* @__PURE__ */ notImplemented(\"crypto.createCipheriv\");\nexport const createDecipheriv = /* @__PURE__ */ notImplemented(\"crypto.createDecipheriv\");\nexport const createDiffieHellman = /* @__PURE__ */ notImplemented(\"crypto.createDiffieHellman\");\nexport const createDiffieHellmanGroup = /* @__PURE__ */ notImplemented(\"crypto.createDiffieHellmanGroup\");\nexport const createECDH = /* @__PURE__ */ notImplemented(\"crypto.createECDH\");\nexport const createHash = /* @__PURE__ */ notImplemented(\"crypto.createHash\");\nexport const createHmac = /* @__PURE__ */ notImplemented(\"crypto.createHmac\");\nexport const createPrivateKey = /* @__PURE__ */ notImplemented(\"crypto.createPrivateKey\");\nexport const createPublicKey = /* @__PURE__ */ notImplemented(\"crypto.createPublicKey\");\nexport const createSecretKey = /* @__PURE__ */ notImplemented(\"crypto.createSecretKey\");\nexport const createSign = /* @__PURE__ */ notImplemented(\"crypto.createSign\");\nexport const createVerify = /* @__PURE__ */ notImplemented(\"crypto.createVerify\");\nexport const diffieHellman = /* @__PURE__ */ notImplemented(\"crypto.diffieHellman\");\nexport const generatePrime = /* @__PURE__ */ notImplemented(\"crypto.generatePrime\");\nexport const generatePrimeSync = /* @__PURE__ */ notImplemented(\"crypto.generatePrimeSync\");\nexport const getCiphers = /* @__PURE__ */ notImplemented(\"crypto.getCiphers\");\nexport const getCipherInfo = /* @__PURE__ */ notImplemented(\"crypto.getCipherInfo\");\nexport const getCurves = /* @__PURE__ */ notImplemented(\"crypto.getCurves\");\nexport const getDiffieHellman = /* @__PURE__ */ notImplemented(\"crypto.getDiffieHellman\");\nexport const getHashes = /* @__PURE__ */ notImplemented(\"crypto.getHashes\");\nexport const hkdf = /* @__PURE__ */ notImplemented(\"crypto.hkdf\");\nexport const hkdfSync = /* @__PURE__ */ notImplemented(\"crypto.hkdfSync\");\nexport const pbkdf2 = /* @__PURE__ */ notImplemented(\"crypto.pbkdf2\");\nexport const pbkdf2Sync = /* @__PURE__ */ notImplemented(\"crypto.pbkdf2Sync\");\nexport const generateKeyPair = /* @__PURE__ */ notImplemented(\"crypto.generateKeyPair\");\nexport const generateKeyPairSync = /* @__PURE__ */ notImplemented(\"crypto.generateKeyPairSync\");\nexport const generateKey = /* @__PURE__ */ notImplemented(\"crypto.generateKey\");\nexport const generateKeySync = /* @__PURE__ */ notImplemented(\"crypto.generateKeySync\");\nexport const privateDecrypt = /* @__PURE__ */ notImplemented(\"crypto.privateDecrypt\");\nexport const privateEncrypt = /* @__PURE__ */ notImplemented(\"crypto.privateEncrypt\");\nexport const publicDecrypt = /* @__PURE__ */ notImplemented(\"crypto.publicDecrypt\");\nexport const publicEncrypt = /* @__PURE__ */ notImplemented(\"crypto.publicEncrypt\");\nexport const randomFill = /* @__PURE__ */ notImplemented(\"crypto.randomFill\");\nexport const randomFillSync = /* @__PURE__ */ notImplemented(\"crypto.randomFillSync\");\nexport const randomInt = /* @__PURE__ */ notImplemented(\"crypto.randomInt\");\nexport const scrypt = /* @__PURE__ */ notImplemented(\"crypto.scrypt\");\nexport const scryptSync = /* @__PURE__ */ notImplemented(\"crypto.scryptSync\");\nexport const sign = /* @__PURE__ */ notImplemented(\"crypto.sign\");\nexport const setEngine = /* @__PURE__ */ notImplemented(\"crypto.setEngine\");\nexport const timingSafeEqual = /* @__PURE__ */ notImplemented(\"crypto.timingSafeEqual\");\nexport const getFips = /* @__PURE__ */ notImplemented(\"crypto.getFips\");\nexport const setFips = /* @__PURE__ */ notImplemented(\"crypto.setFips\");\nexport const verify = /* @__PURE__ */ notImplemented(\"crypto.verify\");\nexport const secureHeapUsed = /* @__PURE__ */ notImplemented(\"crypto.secureHeapUsed\");\nexport const hash = /* @__PURE__ */ notImplemented(\"crypto.hash\");\nexport const Certificate = /* @__PURE__ */ notImplementedClass(\"crypto.Certificate\");\nexport const Cipher = /* @__PURE__ */ notImplementedClass(\"crypto.Cipher\");\nexport const Cipheriv = /* @__PURE__ */ notImplementedClass(\n\t\"crypto.Cipheriv\"\n\t// @ts-expect-error not typed yet\n);\nexport const Decipher = /* @__PURE__ */ notImplementedClass(\"crypto.Decipher\");\nexport const Decipheriv = /* @__PURE__ */ notImplementedClass(\n\t\"crypto.Decipheriv\"\n\t// @ts-expect-error not typed yet\n);\nexport const DiffieHellman = /* @__PURE__ */ notImplementedClass(\"crypto.DiffieHellman\");\nexport const DiffieHellmanGroup = /* @__PURE__ */ notImplementedClass(\"crypto.DiffieHellmanGroup\");\nexport const ECDH = /* @__PURE__ */ notImplementedClass(\"crypto.ECDH\");\nexport const Hash = /* @__PURE__ */ notImplementedClass(\"crypto.Hash\");\nexport const Hmac = /* @__PURE__ */ notImplementedClass(\"crypto.Hmac\");\nexport const KeyObject = /* @__PURE__ */ notImplementedClass(\"crypto.KeyObject\");\nexport const Sign = /* @__PURE__ */ notImplementedClass(\"crypto.Sign\");\nexport const Verify = /* @__PURE__ */ notImplementedClass(\"crypto.Verify\");\nexport const X509Certificate = /* @__PURE__ */ notImplementedClass(\"crypto.X509Certificate\");\n", "export const SSL_OP_ALL = 2147485776;\nexport const SSL_OP_ALLOW_NO_DHE_KEX = 1024;\nexport const SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION = 262144;\nexport const SSL_OP_CIPHER_SERVER_PREFERENCE = 4194304;\nexport const SSL_OP_CISCO_ANYCONNECT = 32768;\nexport const SSL_OP_COOKIE_EXCHANGE = 8192;\nexport const SSL_OP_CRYPTOPRO_TLSEXT_BUG = 2147483648;\nexport const SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS = 2048;\nexport const SSL_OP_LEGACY_SERVER_CONNECT = 4;\nexport const SSL_OP_NO_COMPRESSION = 131072;\nexport const SSL_OP_NO_ENCRYPT_THEN_MAC = 524288;\nexport const SSL_OP_NO_QUERY_MTU = 4096;\nexport const SSL_OP_NO_RENEGOTIATION = 1073741824;\nexport const SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION = 65536;\nexport const SSL_OP_NO_SSLv2 = 0;\nexport const SSL_OP_NO_SSLv3 = 33554432;\nexport const SSL_OP_NO_TICKET = 16384;\nexport const SSL_OP_NO_TLSv1 = 67108864;\nexport const SSL_OP_NO_TLSv1_1 = 268435456;\nexport const SSL_OP_NO_TLSv1_2 = 134217728;\nexport const SSL_OP_NO_TLSv1_3 = 536870912;\nexport const SSL_OP_PRIORITIZE_CHACHA = 2097152;\nexport const SSL_OP_TLS_ROLLBACK_BUG = 8388608;\nexport const ENGINE_METHOD_RSA = 1;\nexport const ENGINE_METHOD_DSA = 2;\nexport const ENGINE_METHOD_DH = 4;\nexport const ENGINE_METHOD_RAND = 8;\nexport const ENGINE_METHOD_EC = 2048;\nexport const ENGINE_METHOD_CIPHERS = 64;\nexport const ENGINE_METHOD_DIGESTS = 128;\nexport const ENGINE_METHOD_PKEY_METHS = 512;\nexport const ENGINE_METHOD_PKEY_ASN1_METHS = 1024;\nexport const ENGINE_METHOD_ALL = 65535;\nexport const ENGINE_METHOD_NONE = 0;\nexport const DH_CHECK_P_NOT_SAFE_PRIME = 2;\nexport const DH_CHECK_P_NOT_PRIME = 1;\nexport const DH_UNABLE_TO_CHECK_GENERATOR = 4;\nexport const DH_NOT_SUITABLE_GENERATOR = 8;\nexport const RSA_PKCS1_PADDING = 1;\nexport const RSA_NO_PADDING = 3;\nexport const RSA_PKCS1_OAEP_PADDING = 4;\nexport const RSA_X931_PADDING = 5;\nexport const RSA_PKCS1_PSS_PADDING = 6;\nexport const RSA_PSS_SALTLEN_DIGEST = -1;\nexport const RSA_PSS_SALTLEN_MAX_SIGN = -2;\nexport const RSA_PSS_SALTLEN_AUTO = -2;\nexport const POINT_CONVERSION_COMPRESSED = 2;\nexport const POINT_CONVERSION_UNCOMPRESSED = 4;\nexport const POINT_CONVERSION_HYBRID = 6;\nexport const defaultCoreCipherList = \"\";\nexport const defaultCipherList = \"\";\nexport const OPENSSL_VERSION_NUMBER = 0;\nexport const TLS1_VERSION = 0;\nexport const TLS1_1_VERSION = 0;\nexport const TLS1_2_VERSION = 0;\nexport const TLS1_3_VERSION = 0;\n", "import { getRandomValues, randomUUID, subtle } from \"./internal/crypto/web.mjs\";\nimport { Certificate, Cipher, Cipheriv, Decipher, Decipheriv, DiffieHellman, DiffieHellmanGroup, ECDH, Hash, Hmac, KeyObject, Sign, Verify, X509Certificate, checkPrime, checkPrimeSync, createCipheriv, createDecipheriv, createDiffieHellman, createDiffieHellmanGroup, createECDH, createHash, createHmac, createPrivateKey, createPublicKey, createSecretKey, createSign, createVerify, diffieHellman, fips, generateKey, generateKeyPair, generateKeyPairSync, generateKeySync, generatePrime, generatePrimeSync, getCipherInfo, getCiphers, getCurves, getDiffieHellman, getFips, getHashes, hash, hkdf, hkdfSync, pbkdf2, pbkdf2Sync, privateDecrypt, privateEncrypt, pseudoRandomBytes, publicDecrypt, prng, publicEncrypt, randomBytes, randomFill, randomFillSync, randomInt, rng, scrypt, scryptSync, secureHeapUsed, setEngine, setFips, sign, timingSafeEqual, verify, webcrypto } from \"./internal/crypto/node.mjs\";\nimport { OPENSSL_VERSION_NUMBER, SSL_OP_ALL, SSL_OP_ALLOW_NO_DHE_KEX, SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION, SSL_OP_CIPHER_SERVER_PREFERENCE, SSL_OP_CISCO_ANYCONNECT, SSL_OP_COOKIE_EXCHANGE, SSL_OP_CRYPTOPRO_TLSEXT_BUG, SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS, SSL_OP_LEGACY_SERVER_CONNECT, SSL_OP_NO_COMPRESSION, SSL_OP_NO_ENCRYPT_THEN_MAC, SSL_OP_NO_QUERY_MTU, SSL_OP_NO_RENEGOTIATION, SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION, SSL_OP_NO_SSLv2, SSL_OP_NO_SSLv3, SSL_OP_NO_TICKET, SSL_OP_NO_TLSv1, SSL_OP_NO_TLSv1_1, SSL_OP_NO_TLSv1_2, SSL_OP_NO_TLSv1_3, SSL_OP_PRIORITIZE_CHACHA, SSL_OP_TLS_ROLLBACK_BUG, ENGINE_METHOD_RSA, ENGINE_METHOD_DSA, ENGINE_METHOD_DH, ENGINE_METHOD_RAND, ENGINE_METHOD_EC, ENGINE_METHOD_CIPHERS, ENGINE_METHOD_DIGESTS, ENGINE_METHOD_PKEY_METHS, ENGINE_METHOD_PKEY_ASN1_METHS, ENGINE_METHOD_ALL, ENGINE_METHOD_NONE, DH_CHECK_P_NOT_SAFE_PRIME, DH_CHECK_P_NOT_PRIME, DH_UNABLE_TO_CHECK_GENERATOR, DH_NOT_SUITABLE_GENERATOR, RSA_PKCS1_PADDING, RSA_NO_PADDING, RSA_PKCS1_OAEP_PADDING, RSA_X931_PADDING, RSA_PKCS1_PSS_PADDING, RSA_PSS_SALTLEN_DIGEST, RSA_PSS_SALTLEN_MAX_SIGN, RSA_PSS_SALTLEN_AUTO, defaultCoreCipherList, TLS1_VERSION, TLS1_1_VERSION, TLS1_2_VERSION, TLS1_3_VERSION, POINT_CONVERSION_COMPRESSED, POINT_CONVERSION_UNCOMPRESSED, POINT_CONVERSION_HYBRID, defaultCipherList } from \"./internal/crypto/constants.mjs\";\nexport * from \"./internal/crypto/web.mjs\";\nexport * from \"./internal/crypto/node.mjs\";\nexport const constants = {\n\tOPENSSL_VERSION_NUMBER,\n\tSSL_OP_ALL,\n\tSSL_OP_ALLOW_NO_DHE_KEX,\n\tSSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION,\n\tSSL_OP_CIPHER_SERVER_PREFERENCE,\n\tSSL_OP_CISCO_ANYCONNECT,\n\tSSL_OP_COOKIE_EXCHANGE,\n\tSSL_OP_CRYPTOPRO_TLSEXT_BUG,\n\tSSL_OP_DONT_INSERT_EMPTY_FRAGMENTS,\n\tSSL_OP_LEGACY_SERVER_CONNECT,\n\tSSL_OP_NO_COMPRESSION,\n\tSSL_OP_NO_ENCRYPT_THEN_MAC,\n\tSSL_OP_NO_QUERY_MTU,\n\tSSL_OP_NO_RENEGOTIATION,\n\tSSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION,\n\tSSL_OP_NO_SSLv2,\n\tSSL_OP_NO_SSLv3,\n\tSSL_OP_NO_TICKET,\n\tSSL_OP_NO_TLSv1,\n\tSSL_OP_NO_TLSv1_1,\n\tSSL_OP_NO_TLSv1_2,\n\tSSL_OP_NO_TLSv1_3,\n\tSSL_OP_PRIORITIZE_CHACHA,\n\tSSL_OP_TLS_ROLLBACK_BUG,\n\tENGINE_METHOD_RSA,\n\tENGINE_METHOD_DSA,\n\tENGINE_METHOD_DH,\n\tENGINE_METHOD_RAND,\n\tENGINE_METHOD_EC,\n\tENGINE_METHOD_CIPHERS,\n\tENGINE_METHOD_DIGESTS,\n\tENGINE_METHOD_PKEY_METHS,\n\tENGINE_METHOD_PKEY_ASN1_METHS,\n\tENGINE_METHOD_ALL,\n\tENGINE_METHOD_NONE,\n\tDH_CHECK_P_NOT_SAFE_PRIME,\n\tDH_CHECK_P_NOT_PRIME,\n\tDH_UNABLE_TO_CHECK_GENERATOR,\n\tDH_NOT_SUITABLE_GENERATOR,\n\tRSA_PKCS1_PADDING,\n\tRSA_NO_PADDING,\n\tRSA_PKCS1_OAEP_PADDING,\n\tRSA_X931_PADDING,\n\tRSA_PKCS1_PSS_PADDING,\n\tRSA_PSS_SALTLEN_DIGEST,\n\tRSA_PSS_SALTLEN_MAX_SIGN,\n\tRSA_PSS_SALTLEN_AUTO,\n\tdefaultCoreCipherList,\n\tTLS1_VERSION,\n\tTLS1_1_VERSION,\n\tTLS1_2_VERSION,\n\tTLS1_3_VERSION,\n\tPOINT_CONVERSION_COMPRESSED,\n\tPOINT_CONVERSION_UNCOMPRESSED,\n\tPOINT_CONVERSION_HYBRID,\n\tdefaultCipherList\n};\nexport default {\n\tconstants,\n\tgetRandomValues,\n\trandomUUID,\n\tsubtle,\n\tCertificate,\n\tCipher,\n\tCipheriv,\n\tDecipher,\n\tDecipheriv,\n\tDiffieHellman,\n\tDiffieHellmanGroup,\n\tECDH,\n\tHash,\n\tHmac,\n\tKeyObject,\n\tSign,\n\tVerify,\n\tX509Certificate,\n\tcheckPrime,\n\tcheckPrimeSync,\n\tcreateCipheriv,\n\tcreateDecipheriv,\n\tcreateDiffieHellman,\n\tcreateDiffieHellmanGroup,\n\tcreateECDH,\n\tcreateHash,\n\tcreateHmac,\n\tcreatePrivateKey,\n\tcreatePublicKey,\n\tcreateSecretKey,\n\tcreateSign,\n\tcreateVerify,\n\tdiffieHellman,\n\tfips,\n\tgenerateKey,\n\tgenerateKeyPair,\n\tgenerateKeyPairSync,\n\tgenerateKeySync,\n\tgeneratePrime,\n\tgeneratePrimeSync,\n\tgetCipherInfo,\n\tgetCiphers,\n\tgetCurves,\n\tgetDiffieHellman,\n\tgetFips,\n\tgetHashes,\n\thash,\n\thkdf,\n\thkdfSync,\n\tpbkdf2,\n\tpbkdf2Sync,\n\tprivateDecrypt,\n\tprivateEncrypt,\n\tpseudoRandomBytes,\n\tpublicDecrypt,\n\tprng,\n\tpublicEncrypt,\n\trandomBytes,\n\trandomFill,\n\trandomFillSync,\n\trandomInt,\n\trng,\n\tscrypt,\n\tscryptSync,\n\tsecureHeapUsed,\n\tsetEngine,\n\tsetFips,\n\tsign,\n\ttimingSafeEqual,\n\tverify,\n\twebcrypto\n};\n", "import {\n  Cipher,\n  constants,\n  createCipher,\n  createDecipher,\n  Decipher,\n  pseudoRandomBytes,\n  webcrypto as unenvCryptoWebcrypto\n} from \"unenv/node/crypto\";\nexport { Cipher, constants, Decipher } from \"unenv/node/crypto\";\nconst workerdCrypto = process.getBuiltinModule(\"node:crypto\");\nexport const {\n  Certificate,\n  checkPrime,\n  checkPrimeSync,\n  // @ts-expect-error\n  Cipheriv,\n  createCipheriv,\n  createDecipheriv,\n  createDiffieHellman,\n  createDiffieHellmanGroup,\n  createECDH,\n  createHash,\n  createHmac,\n  createPrivateKey,\n  createPublicKey,\n  createSecretKey,\n  createSign,\n  createVerify,\n  // @ts-expect-error\n  Decipheriv,\n  diffieHellman,\n  DiffieHellman,\n  DiffieHellmanGroup,\n  ECDH,\n  fips,\n  generateKey,\n  generateKeyPair,\n  generateKeyPairSync,\n  generateKeySync,\n  generatePrime,\n  generatePrimeSync,\n  getCipherInfo,\n  getCiphers,\n  getCurves,\n  getDiffieHellman,\n  getFips,\n  getHashes,\n  getRandomValues,\n  hash,\n  Hash,\n  hkdf,\n  hkdfSync,\n  Hmac,\n  KeyObject,\n  pbkdf2,\n  pbkdf2Sync,\n  privateDecrypt,\n  privateEncrypt,\n  publicDecrypt,\n  publicEncrypt,\n  randomBytes,\n  randomFill,\n  randomFillSync,\n  randomInt,\n  randomUUID,\n  scrypt,\n  scryptSync,\n  secureHeapUsed,\n  setEngine,\n  setFips,\n  sign,\n  Sign,\n  subtle,\n  timingSafeEqual,\n  verify,\n  Verify,\n  X509Certificate\n} = workerdCrypto;\nexport const webcrypto = {\n  // @ts-expect-error\n  CryptoKey: unenvCryptoWebcrypto.CryptoKey,\n  getRandomValues,\n  randomUUID,\n  subtle\n};\nexport default {\n  /**\n   * manually unroll unenv-polyfilled-symbols to make it tree-shakeable\n   */\n  Certificate,\n  Cipher,\n  Cipheriv,\n  Decipher,\n  Decipheriv,\n  ECDH,\n  Sign,\n  Verify,\n  X509Certificate,\n  // @ts-expect-error @types/node is out of date - this is a bug in typings\n  constants,\n  createCipheriv,\n  createDecipheriv,\n  createECDH,\n  createSign,\n  createVerify,\n  diffieHellman,\n  getCipherInfo,\n  hash,\n  privateDecrypt,\n  privateEncrypt,\n  publicDecrypt,\n  publicEncrypt,\n  scrypt,\n  scryptSync,\n  sign,\n  verify,\n  // default-only export from unenv\n  // @ts-expect-error unenv has unknown type\n  createCipher,\n  // @ts-expect-error unenv has unknown type\n  createDecipher,\n  // @ts-expect-error unenv has unknown type\n  pseudoRandomBytes,\n  /**\n   * manually unroll workerd-polyfilled-symbols to make it tree-shakeable\n   */\n  DiffieHellman,\n  DiffieHellmanGroup,\n  Hash,\n  Hmac,\n  KeyObject,\n  checkPrime,\n  checkPrimeSync,\n  createDiffieHellman,\n  createDiffieHellmanGroup,\n  createHash,\n  createHmac,\n  createPrivateKey,\n  createPublicKey,\n  createSecretKey,\n  generateKey,\n  generateKeyPair,\n  generateKeyPairSync,\n  generateKeySync,\n  generatePrime,\n  generatePrimeSync,\n  getCiphers,\n  getCurves,\n  getDiffieHellman,\n  getFips,\n  getHashes,\n  getRandomValues,\n  hkdf,\n  hkdfSync,\n  pbkdf2,\n  pbkdf2Sync,\n  randomBytes,\n  randomFill,\n  randomFillSync,\n  randomInt,\n  randomUUID,\n  secureHeapUsed,\n  setEngine,\n  setFips,\n  subtle,\n  timingSafeEqual,\n  // default-only export from workerd\n  fips,\n  // special-cased deep merged symbols\n  webcrypto\n};\n", "import libDefault from 'crypto';\nmodule.exports = libDefault;", "{\n  \"name\": \"dotenv\",\n  \"version\": \"16.5.0\",\n  \"description\": \"Loads environment variables from .env file\",\n  \"main\": \"lib/main.js\",\n  \"types\": \"lib/main.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./lib/main.d.ts\",\n      \"require\": \"./lib/main.js\",\n      \"default\": \"./lib/main.js\"\n    },\n    \"./config\": \"./config.js\",\n    \"./config.js\": \"./config.js\",\n    \"./lib/env-options\": \"./lib/env-options.js\",\n    \"./lib/env-options.js\": \"./lib/env-options.js\",\n    \"./lib/cli-options\": \"./lib/cli-options.js\",\n    \"./lib/cli-options.js\": \"./lib/cli-options.js\",\n    \"./package.json\": \"./package.json\"\n  },\n  \"scripts\": {\n    \"dts-check\": \"tsc --project tests/types/tsconfig.json\",\n    \"lint\": \"standard\",\n    \"pretest\": \"npm run lint && npm run dts-check\",\n    \"test\": \"tap run --allow-empty-coverage --disable-coverage --timeout=60000\",\n    \"test:coverage\": \"tap run --show-full-coverage --timeout=60000 --coverage-report=lcov\",\n    \"prerelease\": \"npm test\",\n    \"release\": \"standard-version\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/motdotla/dotenv.git\"\n  },\n  \"homepage\": \"https://github.com/motdotla/dotenv#readme\",\n  \"funding\": \"https://dotenvx.com\",\n  \"keywords\": [\n    \"dotenv\",\n    \"env\",\n    \".env\",\n    \"environment\",\n    \"variables\",\n    \"config\",\n    \"settings\"\n  ],\n  \"readmeFilename\": \"README.md\",\n  \"license\": \"BSD-2-Clause\",\n  \"devDependencies\": {\n    \"@types/node\": \"^18.11.3\",\n    \"decache\": \"^4.6.2\",\n    \"sinon\": \"^14.0.1\",\n    \"standard\": \"^17.0.0\",\n    \"standard-version\": \"^9.5.0\",\n    \"tap\": \"^19.2.0\",\n    \"typescript\": \"^4.8.4\"\n  },\n  \"engines\": {\n    \"node\": \">=12\"\n  },\n  \"browser\": {\n    \"fs\": false\n  }\n}\n", "const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\nconst crypto = require('crypto')\nconst packageJson = require('../package.json')\n\nconst version = packageJson.version\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parse src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _parseVault (options) {\n  const vaultPath = _vaultPath(options)\n\n  // Parse .env.vault\n  const result = DotenvModule.configDotenv({ path: vaultPath })\n  if (!result.parsed) {\n    const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)\n    err.code = 'MISSING_DATA'\n    throw err\n  }\n\n  // handle scenario for comma separated keys - for use with key rotation\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod\"\n  const keys = _dotenvKey(options).split(',')\n  const length = keys.length\n\n  let decrypted\n  for (let i = 0; i < length; i++) {\n    try {\n      // Get full key\n      const key = keys[i].trim()\n\n      // Get instructions for decrypt\n      const attrs = _instructions(result, key)\n\n      // Decrypt\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)\n\n      break\n    } catch (error) {\n      // last key\n      if (i + 1 >= length) {\n        throw error\n      }\n      // try next key\n    }\n  }\n\n  // Parse decrypted .env string\n  return DotenvModule.parse(decrypted)\n}\n\nfunction _warn (message) {\n  console.log(`[dotenv@${version}][WARN] ${message}`)\n}\n\nfunction _debug (message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\n}\n\nfunction _dotenvKey (options) {\n  // prioritize developer directly setting options.DOTENV_KEY\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n    return options.DOTENV_KEY\n  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n  // fallback to empty string\n  return ''\n}\n\nfunction _instructions (result, dotenvKey) {\n  // Parse DOTENV_KEY. Format is a URI\n  let uri\n  try {\n    uri = new URL(dotenvKey)\n  } catch (error) {\n    if (error.code === 'ERR_INVALID_URL') {\n      const err = new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    }\n\n    throw error\n  }\n\n  // Get decrypt key\n  const key = uri.password\n  if (!key) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing key part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment')\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get ciphertext payload\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`\n  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\n  if (!ciphertext) {\n    const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)\n    err.code = 'NOT_FOUND_DOTENV_ENVIRONMENT'\n    throw err\n  }\n\n  return { ciphertext, key }\n}\n\nfunction _vaultPath (options) {\n  let possibleVaultPath = null\n\n  if (options && options.path && options.path.length > 0) {\n    if (Array.isArray(options.path)) {\n      for (const filepath of options.path) {\n        if (fs.existsSync(filepath)) {\n          possibleVaultPath = filepath.endsWith('.vault') ? filepath : `${filepath}.vault`\n        }\n      }\n    } else {\n      possibleVaultPath = options.path.endsWith('.vault') ? options.path : `${options.path}.vault`\n    }\n  } else {\n    possibleVaultPath = path.resolve(process.cwd(), '.env.vault')\n  }\n\n  if (fs.existsSync(possibleVaultPath)) {\n    return possibleVaultPath\n  }\n\n  return null\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\nfunction _configVault (options) {\n  const debug = Boolean(options && options.debug)\n  if (debug) {\n    _debug('Loading env from encrypted .env.vault')\n  }\n\n  const parsed = DotenvModule._parseVault(options)\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsed, options)\n\n  return { parsed }\n}\n\nfunction configDotenv (options) {\n  const dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n\n  if (options && options.encoding) {\n    encoding = options.encoding\n  } else {\n    if (debug) {\n      _debug('No encoding is specified. UTF-8 is used by default')\n    }\n  }\n\n  let optionPaths = [dotenvPath] // default, look for .env\n  if (options && options.path) {\n    if (!Array.isArray(options.path)) {\n      optionPaths = [_resolveHome(options.path)]\n    } else {\n      optionPaths = [] // reset default\n      for (const filepath of options.path) {\n        optionPaths.push(_resolveHome(filepath))\n      }\n    }\n  }\n\n  // Build the parsed data in a temporary object (because we need to return it).  Once we have the final\n  // parsed data, we will combine it with process.env (or options.processEnv if provided).\n  let lastError\n  const parsedAll = {}\n  for (const path of optionPaths) {\n    try {\n      // Specifying an encoding returns a string instead of a buffer\n      const parsed = DotenvModule.parse(fs.readFileSync(path, { encoding }))\n\n      DotenvModule.populate(parsedAll, parsed, options)\n    } catch (e) {\n      if (debug) {\n        _debug(`Failed to load ${path} ${e.message}`)\n      }\n      lastError = e\n    }\n  }\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsedAll, options)\n\n  if (lastError) {\n    return { parsed: parsedAll, error: lastError }\n  } else {\n    return { parsed: parsedAll }\n  }\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n    return DotenvModule.configDotenv(options)\n  }\n\n  const vaultPath = _vaultPath(options)\n\n  // dotenvKey exists but .env.vault file does not exist\n  if (!vaultPath) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)\n\n    return DotenvModule.configDotenv(options)\n  }\n\n  return DotenvModule._configVault(options)\n}\n\nfunction decrypt (encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex')\n  let ciphertext = Buffer.from(encrypted, 'base64')\n\n  const nonce = ciphertext.subarray(0, 12)\n  const authTag = ciphertext.subarray(-16)\n  ciphertext = ciphertext.subarray(12, -16)\n\n  try {\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)\n    aesgcm.setAuthTag(authTag)\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`\n  } catch (error) {\n    const isRange = error instanceof RangeError\n    const invalidKeyLength = error.message === 'Invalid key length'\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'\n\n    if (isRange || invalidKeyLength) {\n      const err = new Error('INVALID_DOTENV_KEY: It must be 64 characters long (or more)')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    } else if (decryptionFailed) {\n      const err = new Error('DECRYPTION_FAILED: Please check your DOTENV_KEY')\n      err.code = 'DECRYPTION_FAILED'\n      throw err\n    } else {\n      throw error\n    }\n  }\n}\n\n// Populate process.env with parsed values\nfunction populate (processEnv, parsed, options = {}) {\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (typeof parsed !== 'object') {\n    const err = new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')\n    err.code = 'OBJECT_REQUIRED'\n    throw err\n  }\n\n  // Set process.env\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n        processEnv[key] = parsed[key]\n      }\n\n      if (debug) {\n        if (override === true) {\n          _debug(`\"${key}\" is already defined and WAS overwritten`)\n        } else {\n          _debug(`\"${key}\" is already defined and was NOT overwritten`)\n        }\n      }\n    } else {\n      processEnv[key] = parsed[key]\n    }\n  }\n}\n\nconst DotenvModule = {\n  configDotenv,\n  _configVault,\n  _parseVault,\n  config,\n  decrypt,\n  parse,\n  populate\n}\n\nmodule.exports.configDotenv = DotenvModule.configDotenv\nmodule.exports._configVault = DotenvModule._configVault\nmodule.exports._parseVault = DotenvModule._parseVault\nmodule.exports.config = DotenvModule.config\nmodule.exports.decrypt = DotenvModule.decrypt\nmodule.exports.parse = DotenvModule.parse\nmodule.exports.populate = DotenvModule.populate\n\nmodule.exports = DotenvModule\n", "'use strict'\n\nfunction _resolveEscapeSequences (value) {\n  return value.replace(/\\\\\\$/g, '$')\n}\n\nfunction expandValue (value, processEnv, runningParsed) {\n  const env = { ...runningParsed, ...processEnv } // process.env wins\n\n  const regex = /(?<!\\\\)\\${([^{}]+)}|(?<!\\\\)\\$([A-Za-z_][A-Za-z0-9_]*)/g\n\n  let result = value\n  let match\n  const seen = new Set() // self-referential checker\n\n  while ((match = regex.exec(result)) !== null) {\n    seen.add(result)\n\n    const [template, bracedExpression, unbracedExpression] = match\n    const expression = bracedExpression || unbracedExpression\n\n    // match the operators `:+`, `+`, `:-`, and `-`\n    const opRegex = /(:\\+|\\+|:-|-)/\n    // find first match\n    const opMatch = expression.match(opRegex)\n    const splitter = opMatch ? opMatch[0] : null\n\n    const r = expression.split(splitter)\n\n    let defaultValue\n    let value\n\n    const key = r.shift()\n\n    if ([':+', '+'].includes(splitter)) {\n      defaultValue = env[key] ? r.join(splitter) : ''\n      value = null\n    } else {\n      defaultValue = r.join(splitter)\n      value = env[key]\n    }\n\n    if (value) {\n      // self-referential check\n      if (seen.has(value)) {\n        result = result.replace(template, defaultValue)\n      } else {\n        result = result.replace(template, value)\n      }\n    } else {\n      result = result.replace(template, defaultValue)\n    }\n\n    // if the result equaled what was in process.env and runningParsed then stop expanding\n    if (result === runningParsed[key]) {\n      break\n    }\n\n    regex.lastIndex = 0 // reset regex search position to re-evaluate after each replacement\n  }\n\n  return result\n}\n\nfunction expand (options) {\n  // for use with progressive expansion\n  const runningParsed = {}\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  // dotenv.config() ran before this so the assumption is process.env has already been set\n  for (const key in options.parsed) {\n    let value = options.parsed[key]\n\n    // short-circuit scenario: process.env was already set prior to the file value\n    if (processEnv[key] && processEnv[key] !== value) {\n      value = processEnv[key]\n    } else {\n      value = expandValue(value, processEnv, runningParsed)\n    }\n\n    options.parsed[key] = _resolveEscapeSequences(value)\n\n    // for use with progressive expansion\n    runningParsed[key] = _resolveEscapeSequences(value)\n  }\n\n  for (const processKey in options.parsed) {\n    processEnv[processKey] = options.parsed[processKey]\n  }\n\n  return options\n}\n\nmodule.exports.expand = expand\n", "function limiter (count) {\n  var outstanding = 0\n  var jobs = []\n\n  function remove () {\n    outstanding--\n\n    if (outstanding < count) {\n      dequeue()\n    }\n  }\n\n  function dequeue () {\n    var job = jobs.shift()\n    semaphore.queue = jobs.length\n\n    if (job) {\n      run(job.fn).then(job.resolve).catch(job.reject)\n    }\n  }\n\n  function queue (fn) {\n    return new Promise(function (resolve, reject) {\n      jobs.push({fn: fn, resolve: resolve, reject: reject})\n      semaphore.queue = jobs.length\n    })\n  }\n\n  function run (fn) {\n    outstanding++\n    try {\n      return Promise.resolve(fn()).then(function (result) {\n        remove()\n        return result\n      }, function (error) {\n        remove()\n        throw error\n      })\n    } catch (err) {\n      remove()\n      return Promise.reject(err)\n    }\n  }\n\n  var semaphore = function (fn) {\n    if (outstanding >= count) {\n      return queue(fn)\n    } else {\n      return run(fn)\n    }\n  }\n\n  return semaphore\n}\n\nfunction map (items, mapper) {\n  var failed = false\n\n  var limit = this\n\n  return Promise.all(items.map(function () {\n    var args = arguments\n    return limit(function () {\n      if (!failed) {\n        return mapper.apply(undefined, args).catch(function (e) {\n          failed = true\n          throw e\n        })\n      }\n    })\n  }))\n}\n\nfunction addExtras (fn) {\n  fn.queue = 0\n  fn.map = map\n  return fn\n}\n\nmodule.exports = function (count) {\n  if (count) {\n    return addExtras(limiter(count))\n  } else {\n    return addExtras(function (fn) {\n      return fn()\n    })\n  }\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/xiaobing/Code/backend/hono-tasks-api-cloudflare/.wrangler/tmp/bundle-UOzg5Y/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/xiaobing/Code/backend/hono-tasks-api-cloudflare/node_modules/.pnpm/wrangler@4.18.0/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/xiaobing/Code/backend/hono-tasks-api-cloudflare/.wrangler/tmp/bundle-UOzg5Y/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/xiaobing/Code/backend/hono-tasks-api-cloudflare/.wrangler/tmp/bundle-UOzg5Y/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/xiaobing/Code/backend/hono-tasks-api-cloudflare/src/app.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/xiaobing/Code/backend/hono-tasks-api-cloudflare/node_modules/.pnpm/wrangler@4.18.0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/xiaobing/Code/backend/hono-tasks-api-cloudflare/node_modules/.pnpm/wrangler@4.18.0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/xiaobing/Code/backend/hono-tasks-api-cloudflare/src/app.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "import configureOpenAPI from '@/lib/config-open-api'\nimport createApp from '@/lib/create-app'\nimport index from '@/routes/index.route'\nimport tasks from '@/routes/tasks/tasks.index'\n\nconst app = createApp()\n\n// As the application grows, we will add more and more routers\nconst routes = [\n  index,\n  tasks,\n] as const // make routes readonly, not gonna change at runtime\n\nconfigureOpenAPI(app)\n\n// mount the routes on the app\nroutes.forEach((route) => {\n  app.route('/', route)\n})\n\n// Get a typed client for the entire application, just like testClient in the test file\n// a union type of all the routes, give me the type of everything in the routes array\n// AppType has all the possible types of the routes within the application\n// Now, we can pass this type into the hono client\nexport type AppType = typeof routes[number]\n\nexport default app\n", "// pass in hono app\n// add /doc endpoint\n// add /reference endpoint\nimport { Scalar } from '@scalar/hono-api-reference'\n\nimport type { AppOpenAPI } from './types'\n\nimport packageJSON from '../../package.json' with { type: 'json' }\n\nexport default function configureOpenAPI(app: AppOpenAPI) {\n  app.doc('/doc', {\n    openapi: '3.0.0',\n    info: {\n      title: 'Task API',\n      version: packageJSON.version,\n      description: 'API for managing tasks',\n    },\n  })\n\n  // get api reference interface: scalar\n  app.get(\n    '/reference',\n    Scalar({\n      theme: 'laserwave',\n      layout: 'classic',\n      defaultHttpClient: {\n        targetKey: 'js',\n        clientKey: 'fetch',\n      },\n      url: '/doc',\n      // eslint-disable-next-line style/comma-dangle\n    })\n  )\n}\n", "export { Scalar, apiReference } from './scalar.js';\n", "import { getHtmlDocument } from '@scalar/core/libs/html-rendering';\n\n/**\n * The default configuration for the API Reference.\n */\nconst DEFAULT_CONFIGURATION = {\n    _integration: 'hono',\n};\n/**\n * The custom theme for Hono\n */\nconst customTheme = `\n.light-mode {\n  color-scheme: light;\n  --scalar-color-1: #2a2f45;\n  --scalar-color-2: #757575;\n  --scalar-color-3: #8e8e8e;\n  --scalar-color-disabled: #b4b1b1;\n  --scalar-color-ghost: #a7a7a7;\n  --scalar-color-accent: #0099ff;\n  --scalar-background-1: #fff;\n  --scalar-background-2: #f6f6f6;\n  --scalar-background-3: #e7e7e7;\n  --scalar-background-4: rgba(0, 0, 0, 0.06);\n  --scalar-background-accent: #8ab4f81f;\n\n  --scalar-border-color: rgba(0, 0, 0, 0.1);\n  --scalar-scrollbar-color: rgba(0, 0, 0, 0.18);\n  --scalar-scrollbar-color-active: rgba(0, 0, 0, 0.36);\n  --scalar-lifted-brightness: 1;\n  --scalar-backdrop-brightness: 1;\n\n  --scalar-shadow-1: 0 1px 3px 0 rgba(0, 0, 0, 0.11);\n  --scalar-shadow-2: rgba(0, 0, 0, 0.08) 0px 13px 20px 0px,\n    rgba(0, 0, 0, 0.08) 0px 3px 8px 0px, #eeeeed 0px 0 0 1px;\n\n  --scalar-button-1: rgb(49 53 56);\n  --scalar-button-1-color: #fff;\n  --scalar-button-1-hover: rgb(28 31 33);\n\n  --scalar-color-green: #069061;\n  --scalar-color-red: #ef0006;\n  --scalar-color-yellow: #edbe20;\n  --scalar-color-blue: #0082d0;\n  --scalar-color-orange: #fb892c;\n  --scalar-color-purple: #5203d1;\n}\n\n.dark-mode {\n  color-scheme: dark;\n  --scalar-color-1: rgba(255, 255, 245, .86);\n  --scalar-color-2: rgba(255, 255, 245, .6);\n  --scalar-color-3: rgba(255, 255, 245, .38);\n  --scalar-color-disabled: rgba(255, 255, 245, .25);\n  --scalar-color-ghost: rgba(255, 255, 245, .25);\n  --scalar-color-accent: #e36002;\n  --scalar-background-1: #1e1e20;\n  --scalar-background-2: #2a2a2a;\n  --scalar-background-3: #505053;\n  --scalar-background-4: rgba(255, 255, 255, 0.06);\n  --scalar-background-accent: #e360021f;\n\n  --scalar-border-color: rgba(255, 255, 255, 0.1);\n  --scalar-scrollbar-color: rgba(255, 255, 255, 0.24);\n  --scalar-scrollbar-color-active: rgba(255, 255, 255, 0.48);\n  --scalar-lifted-brightness: 1.45;\n  --scalar-backdrop-brightness: 0.5;\n\n  --scalar-shadow-1: 0 1px 3px 0 rgb(0, 0, 0, 0.1);\n  --scalar-shadow-2: rgba(15, 15, 15, 0.2) 0px 3px 6px,\n    rgba(15, 15, 15, 0.4) 0px 9px 24px, 0 0 0 1px rgba(255, 255, 255, 0.1);\n\n  --scalar-button-1: #f6f6f6;\n  --scalar-button-1-color: #000;\n  --scalar-button-1-hover: #e7e7e7;\n\n  --scalar-color-green: #3dd68c;\n  --scalar-color-red: #f66f81;\n  --scalar-color-yellow: #f9b44e;\n  --scalar-color-blue: #5c73e7;\n  --scalar-color-orange: #ff8d4d;\n  --scalar-color-purple: #b191f9;\n}\n/* Sidebar */\n.light-mode .t-doc__sidebar {\n  --scalar-sidebar-background-1: var(--scalar-background-1);\n  --scalar-sidebar-item-hover-color: currentColor;\n  --scalar-sidebar-item-hover-background: var(--scalar-background-2);\n  --scalar-sidebar-item-active-background: var(--scalar-background-accent);\n  --scalar-sidebar-border-color: var(--scalar-border-color);\n  --scalar-sidebar-color-1: var(--scalar-color-1);\n  --scalar-sidebar-color-2: var(--scalar-color-2);\n  --scalar-sidebar-color-active: var(--scalar-color-accent);\n  --scalar-sidebar-search-background: var(--scalar-background-2);\n  --scalar-sidebar-search-border-color: var(--scalar-sidebar-border-color);\n  --scalar-sidebar-search-color: var(--scalar-color-3);\n}\n\n.dark-mode .sidebar {\n  --scalar-sidebar-background-1: #161618;\n  --scalar-sidebar-item-hover-color: var(--scalar-color-accent);\n  --scalar-sidebar-item-hover-background: transparent;\n  --scalar-sidebar-item-active-background: transparent;\n  --scalar-sidebar-border-color: transparent;\n  --scalar-sidebar-color-1: var(--scalar-color-1);\n  --scalar-sidebar-color-2: var(--scalar-color-2);\n  --scalar-sidebar-color-active: var(--scalar-color-accent);\n  --scalar-sidebar-search-background: #252529;\n  --scalar-sidebar-search-border-color: transparent;\n  --scalar-sidebar-search-color: var(--scalar-color-3);\n}\n`;\n/**\n * The Hono middleware for the Scalar API Reference.\n */\nconst Scalar = (givenConfiguration) => {\n    // Merge the defaults\n    const configuration = {\n        ...DEFAULT_CONFIGURATION,\n        ...givenConfiguration,\n    };\n    // Respond with the HTML document\n    return async (c) => c.html(/* html */ `${getHtmlDocument(configuration, customTheme)}`);\n};\n/**\n * @deprecated Use `Scalar` instead.\n */\nconst apiReference = Scalar;\n\nexport { Scalar, apiReference, customTheme };\n", "export { getConfiguration, getHtmlDocument, getScriptTags } from './html-rendering.js';\n", "/**\n * Helper function to add consistent indentation to multiline strings\n * @param str The string to indent\n * @param spaces Number of spaces for each level\n * @param initialIndent Whether to indent the first line\n */\nconst addIndent = (str, spaces = 2, initialIndent = false) => {\n    const indent = ' '.repeat(spaces);\n    const lines = str.split('\\n');\n    return lines\n        .map((line, index) => {\n        if (index === 0 && !initialIndent) {\n            return line;\n        }\n        return `${indent}${line}`;\n    })\n        .join('\\n');\n};\n/**\n * Generate the style tag with custom theme if needed\n */\nconst getStyles = (configuration, customTheme) => {\n    const styles = [];\n    if (configuration.customCss) {\n        styles.push('/* Custom CSS */');\n        styles.push(configuration.customCss);\n    }\n    if (!configuration.theme && customTheme) {\n        styles.push('/* Custom Theme */');\n        styles.push(customTheme);\n    }\n    if (styles.length === 0) {\n        return '';\n    }\n    return `\n    <style type=\"text/css\">\n      ${addIndent(styles.join('\\n\\n'), 6)}\n    </style>`;\n};\n/**\n * The HTML document to render the Scalar API reference.\n *\n * We must check the passed in configuration and not the configuration for the theme as the configuration will have it\n * defaulted to 'default'\n */\nconst getHtmlDocument = (givenConfiguration, customTheme = '') => {\n    const { cdn, pageTitle, customCss, theme, ...rest } = givenConfiguration;\n    const configuration = getConfiguration({\n        ...rest,\n        ...(theme ? { theme } : {}),\n        customCss,\n    });\n    const content = `<!doctype html>\n<html>\n  <head>\n    <title>${pageTitle ?? 'Scalar API Reference'}</title>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1\" />${getStyles(configuration, customTheme)}\n  </head>\n  <body>\n    <div id=\"app\"></div>${getScriptTags(configuration, cdn)}\n  </body>\n</html>`;\n    return content;\n};\n/**\n * The script tags to load the @scalar/api-reference package from the CDN.\n */\nfunction getScriptTags(configuration, cdn) {\n    // Extract function properties before stringifying\n    const { tagsSorter, operationsSorter, generateHeadingSlug, generateModelSlug, generateTagSlug, generateOperationSlug, generateWebhookSlug, onLoaded, redirect, onSpecUpdate, onServerChange, ...restConfig } = configuration;\n    // Create the function strings if they exist\n    const functionProps = [];\n    const functionProperties = [\n        { name: 'tagsSorter', value: tagsSorter },\n        { name: 'operationsSorter', value: operationsSorter },\n        { name: 'generateHeadingSlug', value: generateHeadingSlug },\n        { name: 'generateModelSlug', value: generateModelSlug },\n        { name: 'generateTagSlug', value: generateTagSlug },\n        { name: 'generateOperationSlug', value: generateOperationSlug },\n        { name: 'generateWebhookSlug', value: generateWebhookSlug },\n        { name: 'onLoaded', value: onLoaded },\n        { name: 'redirect', value: redirect },\n        { name: 'onSpecUpdate', value: onSpecUpdate },\n        { name: 'onServerChange', value: onServerChange },\n    ];\n    functionProperties.forEach(({ name, value }) => {\n        if (value && typeof value === 'function') {\n            functionProps.push(`\"${name}\": ${value.toString()}`);\n        }\n    });\n    // Stringify the rest of the configuration\n    const configString = JSON.stringify(restConfig, null, 2)\n        .split('\\n')\n        .map((line, index) => (index === 0 ? line : '      ' + line))\n        .join('\\n')\n        .replace(/\\s*}$/, ''); // Remove the closing brace and any whitespace before it\n    const functionPropsString = functionProps.length ? `,\\n        ${functionProps.join(',\\n        ')}\\n      }` : '}';\n    return `\n    <!-- Load the Script -->\n    <script src=\"${cdn ?? 'https://cdn.jsdelivr.net/npm/@scalar/api-reference'}\"></script>\n\n    <!-- Initialize the Scalar API Reference -->\n    <script type=\"text/javascript\">\n      Scalar.createApiReference('#app', ${configString}${functionPropsString})\n    </script>`;\n}\n/**\n * The configuration to pass to the @scalar/api-reference package.\n */\nconst getConfiguration = (givenConfiguration) => {\n    // Clone the given configuration\n    const configuration = {\n        ...givenConfiguration,\n    };\n    // Execute content if it's a function\n    if (typeof configuration.content === 'function') {\n        configuration.content = configuration.content();\n    }\n    // Only remove content if url is provided\n    if (configuration.content && configuration.url) {\n        delete configuration.content;\n    }\n    // Just return regular JSON string, no HTML escaping needed\n    return configuration;\n};\n\nexport { getConfiguration, getHtmlDocument, getScriptTags };\n", "{\n  \"name\": \"hono-task-api\",\n  \"type\": \"module\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"dev\": \"wrangler dev\",\n    \"deploy\": \"wrangler deploy --minify\",\n    \"cf-typegen\": \"wrangler types --env-interface CloudflareBindings\",\n    \"type-check\": \"tsc --noEmit\",\n    \"build\": \"tsc && tsc-alias\",\n    \"start\": \"node dist/src/index.js\",\n    \"dev:db\": \"turso dev --db-file local.db\",\n    \"lint\": \"eslint .\",\n    \"lint:fix\": \"eslint --fix .\",\n    \"test\": \"LOG_LEVEL=silent vitest\",\n    \"test:coverage\": \"vitest run --coverage\"\n  },\n  \"dependencies\": {\n    \"@asteasolutions/zod-to-openapi\": \"^7.3.0\",\n    \"@hono/node-server\": \"^1.14.1\",\n    \"@hono/zod-openapi\": \"^0.19.6\",\n    \"@libsql/client\": \"^0.15.6\",\n    \"@scalar/hono-api-reference\": \"^0.8.9\",\n    \"dotenv\": \"^16.5.0\",\n    \"dotenv-expand\": \"^12.0.2\",\n    \"drizzle-orm\": \"^0.43.1\",\n    \"drizzle-zod\": \"^0.7.1\",\n    \"hono\": \"^4.7.9\",\n    \"hono-pino\": \"^0.8.0\",\n    \"pino\": \"^9.6.0\",\n    \"pino-pretty\": \"^13.0.0\",\n    \"stoker\": \"^1.4.2\",\n    \"zod\": \"^3.24.4\"\n  },\n  \"devDependencies\": {\n    \"@antfu/eslint-config\": \"^4.13.0\",\n    \"@types/node\": \"^20.11.17\",\n    \"@vitest/coverage-v8\": \"3.1.4\",\n    \"drizzle-kit\": \"^0.31.1\",\n    \"eslint\": \"^9.26.0\",\n    \"eslint-plugin-format\": \"^1.0.1\",\n    \"tsc-alias\": \"^1.8.16\",\n    \"tsx\": \"^4.7.1\",\n    \"turso\": \"^0.1.0\",\n    \"typescript\": \"^5.8.3\",\n    \"vitest\": \"^3.1.4\",\n    \"wrangler\": \"^4.18.0\"\n  }\n}\n", "// extract the app into a separate file to separate it from the node server\n// because hono is agnostic to runtime\n\nimport type { Schema } from 'hono'\n\nimport { OpenAPIHono } from '@hono/zod-openapi'\nimport { notFound, onError, serveEmojiFavicon } from 'stoker/middlewares'\nimport { defaultHook } from 'stoker/openapi'\n\nimport type { AppOpenAPI, CustomAppBindings } from '@/lib/types'\n\nimport { pinoLogger } from '@/middlewares/pino-logger'\n\nimport { parseEnv } from '../env'\n\n// create a stand alone router instance with any middlewares\nexport function createRouter() {\n  // with strict set to false, /error and /error/ will be treated as the same path\n  // defaultHook: return validation errors as a json response\n  // defaultHook runs if there's ever a validation error from an openapi route handler and it's not handled by the route handler itself\n  return new OpenAPIHono<CustomAppBindings>({\n    strict: false, // localhost:9999/error and localhost:9999/error/ will be treated as the same path\n    defaultHook, // Default hook source code : https://github.com/w3cj/stoker/blob/main/src/openapi/default-hook.ts\n  })\n}\n\n// reusable function to create a new app and include the middlewares\n// we can call this when testing\nexport default function createApp() {\n  const app = createRouter()\n\n  // having the middleware here that's the first thing that runs before any other middleware and handler\n  // c.env looks like this:\n  // {\n  //   NODE_ENV: 'development',\n  //   PORT: '9999',\n  //   LOG_LEVEL: 'debug',\n  //   DATABASE_URL: 'libsql://tasks.whatever.io',\n  //   DATABASE_AUTH_TOKEN: 'bGciOiJFZikwERTsI99nR5cNzVh'\n  // }\n  app.use((c, next) => {\n    // Validate the env\n    // c.env is all the built-in secrets and variables that get passed to your handler\n    // type of c.env can be set in CustomAppBindings\n\n    // c.env = parseEnv(c.env || process.env)\n    // eslint-disable-next-line node/no-process-env\n    c.env = parseEnv(Object.assign(c.env || {}, process.env))\n    // anywhere in the app, we need to use those environment variables, we can access it through c.env\n    // whenever we are running the code not inside Cloudflare, we still can access the env through process.env because we are doing c.env = parseEnv(Object.assign(c.env, process.env))\n    // if we are not running in Cloudflare, we need to use process.env, and c.env is empty object\n\n    return next()\n  })\n\n  app.use(serveEmojiFavicon('\u26F2'))\n  app.use(pinoLogger())\n  app.notFound(notFound)\n  app.onError(onError)\n\n  return app\n}\n\n// create a app dedicated for testing with the router mounted on it, now we can get the response from the router when testing\nexport function createTestApp<S extends Schema>(router: AppOpenAPI<S>) {\n  // now testApp is inferred as Hono<CustomAppBindings, S>\n  const testApp = createApp().route('/', router)\n  return testApp\n}\n\n// this version doesn't return a full typed app, but a router, because TS inference works better with chaining\n// export function createTestApp<S extends Schema>(router: AppOpenAPI<S>) {\n//   const testApp = createApp()\n//   testApp.route('/', router) // mount the router on the test app\n//   return testApp\n// }\n", "// src/index.ts\nimport {\n  OpenAPIRegistry,\n  OpenApiGeneratorV3,\n  OpenApiGeneratorV31,\n  extendZodWithOpenApi\n} from \"@asteasolutions/zod-to-openapi\";\nimport { zValidator } from \"@hono/zod-validator\";\nimport { Hono } from \"hono\";\nimport { mergePath } from \"hono/utils/url\";\nimport { ZodType, z } from \"zod\";\nvar OpenAPIHono = class _OpenAPIHono extends Hono {\n  openAPIRegistry;\n  defaultHook;\n  constructor(init) {\n    super(init);\n    this.openAPIRegistry = new OpenAPIRegistry();\n    this.defaultHook = init?.defaultHook;\n  }\n  /**\n   *\n   * @param {RouteConfig} route - The route definition which you create with `createRoute()`.\n   * @param {Handler} handler - The handler. If you want to return a JSON object, you should specify the status code with `c.json()`.\n   * @param {Hook} hook - Optional. The hook method defines what it should do after validation.\n   * @example\n   * app.openapi(\n   *   route,\n   *   (c) => {\n   *     // ...\n   *     return c.json(\n   *       {\n   *         age: 20,\n   *         name: 'Young man',\n   *       },\n   *       200 // You should specify the status code even if it's 200.\n   *     )\n   *   },\n   *  (result, c) => {\n   *    if (!result.success) {\n   *      return c.json(\n   *        {\n   *          code: 400,\n   *          message: 'Custom Message',\n   *        },\n   *        400\n   *      )\n   *    }\n   *  }\n   *)\n   */\n  openapi = ({ middleware: routeMiddleware, hide, ...route }, handler, hook = this.defaultHook) => {\n    if (!hide) {\n      this.openAPIRegistry.registerPath(route);\n    }\n    const validators = [];\n    if (route.request?.query) {\n      const validator = zValidator(\"query\", route.request.query, hook);\n      validators.push(validator);\n    }\n    if (route.request?.params) {\n      const validator = zValidator(\"param\", route.request.params, hook);\n      validators.push(validator);\n    }\n    if (route.request?.headers) {\n      const validator = zValidator(\"header\", route.request.headers, hook);\n      validators.push(validator);\n    }\n    if (route.request?.cookies) {\n      const validator = zValidator(\"cookie\", route.request.cookies, hook);\n      validators.push(validator);\n    }\n    const bodyContent = route.request?.body?.content;\n    if (bodyContent) {\n      for (const mediaType of Object.keys(bodyContent)) {\n        if (!bodyContent[mediaType]) {\n          continue;\n        }\n        const schema = bodyContent[mediaType][\"schema\"];\n        if (!(schema instanceof ZodType)) {\n          continue;\n        }\n        if (isJSONContentType(mediaType)) {\n          const validator = zValidator(\"json\", schema, hook);\n          if (route.request?.body?.required) {\n            validators.push(validator);\n          } else {\n            const mw = async (c, next) => {\n              if (c.req.header(\"content-type\")) {\n                if (isJSONContentType(c.req.header(\"content-type\"))) {\n                  return await validator(c, next);\n                }\n              }\n              c.req.addValidatedData(\"json\", {});\n              await next();\n            };\n            validators.push(mw);\n          }\n        }\n        if (isFormContentType(mediaType)) {\n          const validator = zValidator(\"form\", schema, hook);\n          if (route.request?.body?.required) {\n            validators.push(validator);\n          } else {\n            const mw = async (c, next) => {\n              if (c.req.header(\"content-type\")) {\n                if (isFormContentType(c.req.header(\"content-type\"))) {\n                  return await validator(c, next);\n                }\n              }\n              c.req.addValidatedData(\"form\", {});\n              await next();\n            };\n            validators.push(mw);\n          }\n        }\n      }\n    }\n    const middleware = routeMiddleware ? Array.isArray(routeMiddleware) ? routeMiddleware : [routeMiddleware] : [];\n    this.on(\n      [route.method],\n      route.path.replaceAll(/\\/{(.+?)}/g, \"/:$1\"),\n      ...middleware,\n      ...validators,\n      handler\n    );\n    return this;\n  };\n  getOpenAPIDocument = (config) => {\n    const generator = new OpenApiGeneratorV3(this.openAPIRegistry.definitions);\n    const document = generator.generateDocument(config);\n    return this._basePath ? addBasePathToDocument(document, this._basePath) : document;\n  };\n  getOpenAPI31Document = (config) => {\n    const generator = new OpenApiGeneratorV31(this.openAPIRegistry.definitions);\n    const document = generator.generateDocument(config);\n    return this._basePath ? addBasePathToDocument(document, this._basePath) : document;\n  };\n  doc = (path, configure) => {\n    return this.get(path, (c) => {\n      const config = typeof configure === \"function\" ? configure(c) : configure;\n      try {\n        const document = this.getOpenAPIDocument(config);\n        return c.json(document);\n      } catch (e) {\n        return c.json(e, 500);\n      }\n    });\n  };\n  doc31 = (path, configure) => {\n    return this.get(path, (c) => {\n      const config = typeof configure === \"function\" ? configure(c) : configure;\n      try {\n        const document = this.getOpenAPI31Document(config);\n        return c.json(document);\n      } catch (e) {\n        return c.json(e, 500);\n      }\n    });\n  };\n  route(path, app) {\n    const pathForOpenAPI = path.replaceAll(/:([^\\/]+)/g, \"{$1}\");\n    super.route(path, app);\n    if (!(app instanceof _OpenAPIHono)) {\n      return this;\n    }\n    app.openAPIRegistry.definitions.forEach((def) => {\n      switch (def.type) {\n        case \"component\":\n          return this.openAPIRegistry.registerComponent(def.componentType, def.name, def.component);\n        case \"route\":\n          return this.openAPIRegistry.registerPath({\n            ...def.route,\n            path: mergePath(\n              pathForOpenAPI,\n              // @ts-expect-error _basePath is private\n              app._basePath.replaceAll(/:([^\\/]+)/g, \"{$1}\"),\n              def.route.path\n            )\n          });\n        case \"webhook\":\n          return this.openAPIRegistry.registerWebhook({\n            ...def.webhook,\n            path: mergePath(\n              pathForOpenAPI,\n              // @ts-expect-error _basePath is private\n              app._basePath.replaceAll(/:([^\\/]+)/g, \"{$1}\"),\n              def.webhook.path\n            )\n          });\n        case \"schema\":\n          return this.openAPIRegistry.register(def.schema._def.openapi._internal.refId, def.schema);\n        case \"parameter\":\n          return this.openAPIRegistry.registerParameter(\n            def.schema._def.openapi._internal.refId,\n            def.schema\n          );\n        default: {\n          const errorIfNotExhaustive = def;\n          throw new Error(`Unknown registry type: ${errorIfNotExhaustive}`);\n        }\n      }\n    });\n    return this;\n  }\n  basePath(path) {\n    return new _OpenAPIHono({ ...super.basePath(path), defaultHook: this.defaultHook });\n  }\n};\nvar createRoute = (routeConfig) => {\n  const route = {\n    ...routeConfig,\n    getRoutingPath() {\n      return routeConfig.path.replaceAll(/\\/{(.+?)}/g, \"/:$1\");\n    }\n  };\n  return Object.defineProperty(route, \"getRoutingPath\", { enumerable: false });\n};\nextendZodWithOpenApi(z);\nfunction addBasePathToDocument(document, basePath) {\n  const updatedPaths = {};\n  Object.keys(document.paths).forEach((path) => {\n    updatedPaths[mergePath(basePath.replaceAll(/:([^\\/]+)/g, \"{$1}\"), path)] = document.paths[path];\n  });\n  return {\n    ...document,\n    paths: updatedPaths\n  };\n}\nfunction isJSONContentType(contentType) {\n  return /^application\\/([a-z-\\.]+\\+)?json/.test(contentType);\n}\nfunction isFormContentType(contentType) {\n  return contentType.startsWith(\"multipart/form-data\") || contentType.startsWith(\"application/x-www-form-urlencoded\");\n}\nexport {\n  OpenAPIHono,\n  createRoute,\n  extendZodWithOpenApi,\n  z\n};\n", "/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nfunction isZodType(schema, typeName) {\n    var _a;\n    return ((_a = schema === null || schema === void 0 ? void 0 : schema._def) === null || _a === void 0 ? void 0 : _a.typeName) === typeName;\n}\nfunction isAnyZodType(schema) {\n    return '_def' in schema;\n}\n\nfunction preserveMetadataFromModifier(zod, modifier) {\n    const zodModifier = zod.ZodType.prototype[modifier];\n    zod.ZodType.prototype[modifier] = function (...args) {\n        const result = zodModifier.apply(this, args);\n        result._def.openapi = this._def.openapi;\n        return result;\n    };\n}\nfunction extendZodWithOpenApi(zod) {\n    if (typeof zod.ZodType.prototype.openapi !== 'undefined') {\n        // This zod instance is already extended with the required methods,\n        // doing it again will just result in multiple wrapper methods for\n        // `optional` and `nullable`\n        return;\n    }\n    zod.ZodType.prototype.openapi = function (refOrOpenapi, metadata) {\n        var _a, _b, _c, _d, _e, _f;\n        const openapi = typeof refOrOpenapi === 'string' ? metadata : refOrOpenapi;\n        const _g = openapi !== null && openapi !== void 0 ? openapi : {}, { param } = _g, restOfOpenApi = __rest(_g, [\"param\"]);\n        const _internal = Object.assign(Object.assign({}, (_a = this._def.openapi) === null || _a === void 0 ? void 0 : _a._internal), (typeof refOrOpenapi === 'string'\n            ? { refId: refOrOpenapi }\n            : undefined));\n        const resultMetadata = Object.assign(Object.assign(Object.assign({}, (_b = this._def.openapi) === null || _b === void 0 ? void 0 : _b.metadata), restOfOpenApi), (((_d = (_c = this._def.openapi) === null || _c === void 0 ? void 0 : _c.metadata) === null || _d === void 0 ? void 0 : _d.param) || param\n            ? {\n                param: Object.assign(Object.assign({}, (_f = (_e = this._def.openapi) === null || _e === void 0 ? void 0 : _e.metadata) === null || _f === void 0 ? void 0 : _f.param), param),\n            }\n            : undefined));\n        const result = new this.constructor(Object.assign(Object.assign({}, this._def), { openapi: Object.assign(Object.assign({}, (Object.keys(_internal).length > 0 ? { _internal } : undefined)), (Object.keys(resultMetadata).length > 0\n                ? { metadata: resultMetadata }\n                : undefined)) }));\n        if (isZodType(this, 'ZodObject')) {\n            const originalExtend = this.extend;\n            result.extend = function (...args) {\n                var _a, _b, _c, _d, _e, _f;\n                const extendedResult = originalExtend.apply(this, args);\n                extendedResult._def.openapi = {\n                    _internal: {\n                        extendedFrom: ((_b = (_a = this._def.openapi) === null || _a === void 0 ? void 0 : _a._internal) === null || _b === void 0 ? void 0 : _b.refId)\n                            ? { refId: (_d = (_c = this._def.openapi) === null || _c === void 0 ? void 0 : _c._internal) === null || _d === void 0 ? void 0 : _d.refId, schema: this }\n                            : (_e = this._def.openapi) === null || _e === void 0 ? void 0 : _e._internal.extendedFrom,\n                    },\n                    metadata: (_f = extendedResult._def.openapi) === null || _f === void 0 ? void 0 : _f.metadata,\n                };\n                return extendedResult;\n            };\n        }\n        return result;\n    };\n    preserveMetadataFromModifier(zod, 'optional');\n    preserveMetadataFromModifier(zod, 'nullable');\n    preserveMetadataFromModifier(zod, 'default');\n    preserveMetadataFromModifier(zod, 'transform');\n    preserveMetadataFromModifier(zod, 'refine');\n    const zodDeepPartial = zod.ZodObject.prototype.deepPartial;\n    zod.ZodObject.prototype.deepPartial = function () {\n        const initialShape = this._def.shape();\n        const result = zodDeepPartial.apply(this);\n        const resultShape = result._def.shape();\n        Object.entries(resultShape).forEach(([key, value]) => {\n            var _a, _b;\n            value._def.openapi = (_b = (_a = initialShape[key]) === null || _a === void 0 ? void 0 : _a._def) === null || _b === void 0 ? void 0 : _b.openapi;\n        });\n        result._def.openapi = undefined;\n        return result;\n    };\n    const zodPick = zod.ZodObject.prototype.pick;\n    zod.ZodObject.prototype.pick = function (...args) {\n        const result = zodPick.apply(this, args);\n        result._def.openapi = undefined;\n        return result;\n    };\n    const zodOmit = zod.ZodObject.prototype.omit;\n    zod.ZodObject.prototype.omit = function (...args) {\n        const result = zodOmit.apply(this, args);\n        result._def.openapi = undefined;\n        return result;\n    };\n}\n\nfunction isEqual(x, y) {\n    if (x === null || x === undefined || y === null || y === undefined) {\n        return x === y;\n    }\n    if (x === y || x.valueOf() === y.valueOf()) {\n        return true;\n    }\n    if (Array.isArray(x)) {\n        if (!Array.isArray(y)) {\n            return false;\n        }\n        if (x.length !== y.length) {\n            return false;\n        }\n    }\n    // if they are strictly equal, they both need to be object at least\n    if (!(x instanceof Object) || !(y instanceof Object)) {\n        return false;\n    }\n    // recursive object equality check\n    const keysX = Object.keys(x);\n    return (Object.keys(y).every(keyY => keysX.indexOf(keyY) !== -1) &&\n        keysX.every(key => isEqual(x[key], y[key])));\n}\nclass ObjectSet {\n    constructor() {\n        this.buckets = new Map();\n    }\n    put(value) {\n        const hashCode = this.hashCodeOf(value);\n        const itemsByCode = this.buckets.get(hashCode);\n        if (!itemsByCode) {\n            this.buckets.set(hashCode, [value]);\n            return;\n        }\n        const alreadyHasItem = itemsByCode.some(_ => isEqual(_, value));\n        if (!alreadyHasItem) {\n            itemsByCode.push(value);\n        }\n    }\n    contains(value) {\n        const hashCode = this.hashCodeOf(value);\n        const itemsByCode = this.buckets.get(hashCode);\n        if (!itemsByCode) {\n            return false;\n        }\n        return itemsByCode.some(_ => isEqual(_, value));\n    }\n    values() {\n        return [...this.buckets.values()].flat();\n    }\n    stats() {\n        let totalBuckets = 0;\n        let totalValues = 0;\n        let collisions = 0;\n        for (const bucket of this.buckets.values()) {\n            totalBuckets += 1;\n            totalValues += bucket.length;\n            if (bucket.length > 1) {\n                collisions += 1;\n            }\n        }\n        const hashEffectiveness = totalBuckets / totalValues;\n        return { totalBuckets, collisions, totalValues, hashEffectiveness };\n    }\n    hashCodeOf(object) {\n        let hashCode = 0;\n        if (Array.isArray(object)) {\n            for (let i = 0; i < object.length; i++) {\n                hashCode ^= this.hashCodeOf(object[i]) * i;\n            }\n            return hashCode;\n        }\n        if (typeof object === 'string') {\n            for (let i = 0; i < object.length; i++) {\n                hashCode ^= object.charCodeAt(i) * i;\n            }\n            return hashCode;\n        }\n        if (typeof object === 'number') {\n            return object;\n        }\n        if (typeof object === 'object') {\n            for (const [key, value] of Object.entries(object)) {\n                hashCode ^= this.hashCodeOf(key) + this.hashCodeOf(value !== null && value !== void 0 ? value : '');\n            }\n        }\n        return hashCode;\n    }\n}\n\nfunction isNil(value) {\n    return value === null || value === undefined;\n}\nfunction mapValues(object, mapper) {\n    const result = {};\n    Object.entries(object).forEach(([key, value]) => {\n        result[key] = mapper(value);\n    });\n    return result;\n}\nfunction omit(object, keys) {\n    const result = {};\n    Object.entries(object).forEach(([key, value]) => {\n        if (!keys.some(keyToOmit => keyToOmit === key)) {\n            result[key] = value;\n        }\n    });\n    return result;\n}\nfunction omitBy(object, predicate) {\n    const result = {};\n    Object.entries(object).forEach(([key, value]) => {\n        if (!predicate(value, key)) {\n            result[key] = value;\n        }\n    });\n    return result;\n}\nfunction compact(arr) {\n    return arr.filter((elem) => !isNil(elem));\n}\nconst objectEquals = isEqual;\nfunction uniq(values) {\n    const set = new ObjectSet();\n    values.forEach(value => set.put(value));\n    return [...set.values()];\n}\nfunction isString(val) {\n    return typeof val === 'string';\n}\n\nfunction getOpenApiMetadata(zodSchema) {\n    var _a, _b;\n    return omitBy((_b = (_a = zodSchema._def.openapi) === null || _a === void 0 ? void 0 : _a.metadata) !== null && _b !== void 0 ? _b : {}, isNil);\n}\n\nclass OpenAPIRegistry {\n    constructor(parents) {\n        this.parents = parents;\n        this._definitions = [];\n    }\n    get definitions() {\n        var _a, _b;\n        const parentDefinitions = (_b = (_a = this.parents) === null || _a === void 0 ? void 0 : _a.flatMap(par => par.definitions)) !== null && _b !== void 0 ? _b : [];\n        return [...parentDefinitions, ...this._definitions];\n    }\n    /**\n     * Registers a new component schema under /components/schemas/${name}\n     */\n    register(refId, zodSchema) {\n        const schemaWithRefId = this.schemaWithRefId(refId, zodSchema);\n        this._definitions.push({ type: 'schema', schema: schemaWithRefId });\n        return schemaWithRefId;\n    }\n    /**\n     * Registers a new parameter schema under /components/parameters/${name}\n     */\n    registerParameter(refId, zodSchema) {\n        var _a, _b, _c;\n        const schemaWithRefId = this.schemaWithRefId(refId, zodSchema);\n        const currentMetadata = (_a = schemaWithRefId._def.openapi) === null || _a === void 0 ? void 0 : _a.metadata;\n        const schemaWithMetadata = schemaWithRefId.openapi(Object.assign(Object.assign({}, currentMetadata), { param: Object.assign(Object.assign({}, currentMetadata === null || currentMetadata === void 0 ? void 0 : currentMetadata.param), { name: (_c = (_b = currentMetadata === null || currentMetadata === void 0 ? void 0 : currentMetadata.param) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : refId }) }));\n        this._definitions.push({\n            type: 'parameter',\n            schema: schemaWithMetadata,\n        });\n        return schemaWithMetadata;\n    }\n    /**\n     * Registers a new path that would be generated under paths:\n     */\n    registerPath(route) {\n        this._definitions.push({\n            type: 'route',\n            route,\n        });\n    }\n    /**\n     * Registers a new webhook that would be generated under webhooks:\n     */\n    registerWebhook(webhook) {\n        this._definitions.push({\n            type: 'webhook',\n            webhook,\n        });\n    }\n    /**\n     * Registers a raw OpenAPI component. Use this if you have a simple object instead of a Zod schema.\n     *\n     * @param type The component type, e.g. `schemas`, `responses`, `securitySchemes`, etc.\n     * @param name The name of the object, it is the key under the component\n     *             type in the resulting OpenAPI document\n     * @param component The actual object to put there\n     */\n    registerComponent(type, name, component) {\n        this._definitions.push({\n            type: 'component',\n            componentType: type,\n            name,\n            component,\n        });\n        return {\n            name,\n            ref: { $ref: `#/components/${type}/${name}` },\n        };\n    }\n    schemaWithRefId(refId, zodSchema) {\n        return zodSchema.openapi(refId);\n    }\n}\n\nclass ZodToOpenAPIError {\n    constructor(message) {\n        this.message = message;\n    }\n}\nclass ConflictError extends ZodToOpenAPIError {\n    constructor(message, data) {\n        super(message);\n        this.data = data;\n    }\n}\nclass MissingParameterDataError extends ZodToOpenAPIError {\n    constructor(data) {\n        super(`Missing parameter data, please specify \\`${data.missingField}\\` and other OpenAPI parameter props using the \\`param\\` field of \\`ZodSchema.openapi\\``);\n        this.data = data;\n    }\n}\nfunction enhanceMissingParametersError(action, paramsToAdd) {\n    try {\n        return action();\n    }\n    catch (error) {\n        if (error instanceof MissingParameterDataError) {\n            throw new MissingParameterDataError(Object.assign(Object.assign({}, error.data), paramsToAdd));\n        }\n        throw error;\n    }\n}\nclass UnknownZodTypeError extends ZodToOpenAPIError {\n    constructor(data) {\n        super(`Unknown zod object type, please specify \\`type\\` and other OpenAPI props using \\`ZodSchema.openapi\\`.`);\n        this.data = data;\n    }\n}\n\nclass Metadata {\n    static getMetadata(zodSchema) {\n        var _a;\n        const innerSchema = this.unwrapChained(zodSchema);\n        const metadata = zodSchema._def.openapi\n            ? zodSchema._def.openapi\n            : innerSchema._def.openapi;\n        /**\n         * Every zod schema can receive a `description` by using the .describe method.\n         * That description should be used when generating an OpenApi schema.\n         * The `??` bellow makes sure we can handle both:\n         * - schema.describe('Test').optional()\n         * - schema.optional().describe('Test')\n         */\n        const zodDescription = (_a = zodSchema.description) !== null && _a !== void 0 ? _a : innerSchema.description;\n        // A description provided from .openapi() should be taken with higher precedence\n        return {\n            _internal: metadata === null || metadata === void 0 ? void 0 : metadata._internal,\n            metadata: Object.assign({ description: zodDescription }, metadata === null || metadata === void 0 ? void 0 : metadata.metadata),\n        };\n    }\n    static getInternalMetadata(zodSchema) {\n        const innerSchema = this.unwrapChained(zodSchema);\n        const openapi = zodSchema._def.openapi\n            ? zodSchema._def.openapi\n            : innerSchema._def.openapi;\n        return openapi === null || openapi === void 0 ? void 0 : openapi._internal;\n    }\n    static getParamMetadata(zodSchema) {\n        var _a, _b;\n        const innerSchema = this.unwrapChained(zodSchema);\n        const metadata = zodSchema._def.openapi\n            ? zodSchema._def.openapi\n            : innerSchema._def.openapi;\n        /**\n         * Every zod schema can receive a `description` by using the .describe method.\n         * That description should be used when generating an OpenApi schema.\n         * The `??` bellow makes sure we can handle both:\n         * - schema.describe('Test').optional()\n         * - schema.optional().describe('Test')\n         */\n        const zodDescription = (_a = zodSchema.description) !== null && _a !== void 0 ? _a : innerSchema.description;\n        return {\n            _internal: metadata === null || metadata === void 0 ? void 0 : metadata._internal,\n            metadata: Object.assign(Object.assign({}, metadata === null || metadata === void 0 ? void 0 : metadata.metadata), { \n                // A description provided from .openapi() should be taken with higher precedence\n                param: Object.assign({ description: zodDescription }, (_b = metadata === null || metadata === void 0 ? void 0 : metadata.metadata) === null || _b === void 0 ? void 0 : _b.param) }),\n        };\n    }\n    /**\n     * A method that omits all custom keys added to the regular OpenAPI\n     * metadata properties\n     */\n    static buildSchemaMetadata(metadata) {\n        return omitBy(omit(metadata, ['param']), isNil);\n    }\n    static buildParameterMetadata(metadata) {\n        return omitBy(metadata, isNil);\n    }\n    static applySchemaMetadata(initialData, metadata) {\n        return omitBy(Object.assign(Object.assign({}, initialData), this.buildSchemaMetadata(metadata)), isNil);\n    }\n    static getRefId(zodSchema) {\n        var _a;\n        return (_a = this.getInternalMetadata(zodSchema)) === null || _a === void 0 ? void 0 : _a.refId;\n    }\n    static unwrapChained(schema) {\n        return this.unwrapUntil(schema);\n    }\n    static getDefaultValue(zodSchema) {\n        const unwrapped = this.unwrapUntil(zodSchema, 'ZodDefault');\n        return unwrapped === null || unwrapped === void 0 ? void 0 : unwrapped._def.defaultValue();\n    }\n    static unwrapUntil(schema, typeName) {\n        if (typeName && isZodType(schema, typeName)) {\n            return schema;\n        }\n        if (isZodType(schema, 'ZodOptional') ||\n            isZodType(schema, 'ZodNullable') ||\n            isZodType(schema, 'ZodBranded')) {\n            return this.unwrapUntil(schema.unwrap(), typeName);\n        }\n        if (isZodType(schema, 'ZodDefault') || isZodType(schema, 'ZodReadonly')) {\n            return this.unwrapUntil(schema._def.innerType, typeName);\n        }\n        if (isZodType(schema, 'ZodEffects')) {\n            return this.unwrapUntil(schema._def.schema, typeName);\n        }\n        if (isZodType(schema, 'ZodPipeline')) {\n            return this.unwrapUntil(schema._def.in, typeName);\n        }\n        return typeName ? undefined : schema;\n    }\n    static isOptionalSchema(zodSchema) {\n        return zodSchema.isOptional();\n    }\n}\n\nclass ArrayTransformer {\n    transform(zodSchema, mapNullableType, mapItems) {\n        var _a, _b;\n        const itemType = zodSchema._def.type;\n        return Object.assign(Object.assign({}, mapNullableType('array')), { items: mapItems(itemType), minItems: (_a = zodSchema._def.minLength) === null || _a === void 0 ? void 0 : _a.value, maxItems: (_b = zodSchema._def.maxLength) === null || _b === void 0 ? void 0 : _b.value });\n    }\n}\n\nclass BigIntTransformer {\n    transform(mapNullableType) {\n        return Object.assign(Object.assign({}, mapNullableType('string')), { pattern: `^\\d+$` });\n    }\n}\n\nclass DiscriminatedUnionTransformer {\n    transform(zodSchema, isNullable, mapNullableOfArray, mapItem, generateSchemaRef) {\n        const options = [...zodSchema.options.values()];\n        const optionSchema = options.map(mapItem);\n        if (isNullable) {\n            return {\n                oneOf: mapNullableOfArray(optionSchema, isNullable),\n            };\n        }\n        return {\n            oneOf: optionSchema,\n            discriminator: this.mapDiscriminator(options, zodSchema.discriminator, generateSchemaRef),\n        };\n    }\n    mapDiscriminator(zodObjects, discriminator, generateSchemaRef) {\n        // All schemas must be registered to use a discriminator\n        if (zodObjects.some(obj => Metadata.getRefId(obj) === undefined)) {\n            return undefined;\n        }\n        const mapping = {};\n        zodObjects.forEach(obj => {\n            var _a;\n            const refId = Metadata.getRefId(obj); // type-checked earlier\n            const value = (_a = obj.shape) === null || _a === void 0 ? void 0 : _a[discriminator];\n            if (isZodType(value, 'ZodEnum') || isZodType(value, 'ZodNativeEnum')) {\n                // Native enums have their keys as both number and strings however the number is an\n                // internal representation and the string is the access point for a documentation\n                const keys = Object.values(value.enum).filter(isString);\n                keys.forEach((enumValue) => {\n                    mapping[enumValue] = generateSchemaRef(refId);\n                });\n                return;\n            }\n            const literalValue = value === null || value === void 0 ? void 0 : value._def.value;\n            // This should never happen because Zod checks the disciminator type but to keep the types happy\n            if (typeof literalValue !== 'string') {\n                throw new Error(`Discriminator ${discriminator} could not be found in one of the values of a discriminated union`);\n            }\n            mapping[literalValue] = generateSchemaRef(refId);\n        });\n        return {\n            propertyName: discriminator,\n            mapping,\n        };\n    }\n}\n\nclass EnumTransformer {\n    transform(zodSchema, mapNullableType) {\n        // ZodEnum only accepts strings\n        return Object.assign(Object.assign({}, mapNullableType('string')), { enum: zodSchema._def.values });\n    }\n}\n\nclass IntersectionTransformer {\n    transform(zodSchema, isNullable, mapNullableOfArray, mapItem) {\n        const subtypes = this.flattenIntersectionTypes(zodSchema);\n        const allOfSchema = {\n            allOf: subtypes.map(mapItem),\n        };\n        if (isNullable) {\n            return {\n                anyOf: mapNullableOfArray([allOfSchema], isNullable),\n            };\n        }\n        return allOfSchema;\n    }\n    flattenIntersectionTypes(schema) {\n        if (!isZodType(schema, 'ZodIntersection')) {\n            return [schema];\n        }\n        const leftSubTypes = this.flattenIntersectionTypes(schema._def.left);\n        const rightSubTypes = this.flattenIntersectionTypes(schema._def.right);\n        return [...leftSubTypes, ...rightSubTypes];\n    }\n}\n\nclass LiteralTransformer {\n    transform(zodSchema, mapNullableType) {\n        return Object.assign(Object.assign({}, mapNullableType(typeof zodSchema._def.value)), { enum: [zodSchema._def.value] });\n    }\n}\n\n/**\n * Numeric enums have a reverse mapping https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\n * whereas string ones don't.\n *\n * This function checks if an enum is fully numeric - i.e all values are numbers or not.\n * And filters out only the actual enum values when a reverse mapping is apparent.\n */\nfunction enumInfo(enumObject) {\n    const keysExceptReverseMappings = Object.keys(enumObject).filter(key => typeof enumObject[enumObject[key]] !== 'number');\n    const values = keysExceptReverseMappings.map(key => enumObject[key]);\n    const numericCount = values.filter(_ => typeof _ === 'number').length;\n    const type = numericCount === 0\n        ? 'string'\n        : numericCount === values.length\n            ? 'numeric'\n            : 'mixed';\n    return { values, type };\n}\n\nclass NativeEnumTransformer {\n    transform(zodSchema, mapNullableType) {\n        const { type, values } = enumInfo(zodSchema._def.values);\n        if (type === 'mixed') {\n            // enum Test {\n            //   A = 42,\n            //   B = 'test',\n            // }\n            //\n            // const result = z.nativeEnum(Test).parse('42');\n            //\n            // This is an error, so we can't just say it's a 'string'\n            throw new ZodToOpenAPIError('Enum has mixed string and number values, please specify the OpenAPI type manually');\n        }\n        return Object.assign(Object.assign({}, mapNullableType(type === 'numeric' ? 'integer' : 'string')), { enum: values });\n    }\n}\n\nclass NumberTransformer {\n    transform(zodSchema, mapNullableType, getNumberChecks) {\n        return Object.assign(Object.assign({}, mapNullableType(zodSchema.isInt ? 'integer' : 'number')), getNumberChecks(zodSchema._def.checks));\n    }\n}\n\nclass ObjectTransformer {\n    transform(zodSchema, defaultValue, mapNullableType, mapItem) {\n        var _a;\n        const extendedFrom = (_a = Metadata.getInternalMetadata(zodSchema)) === null || _a === void 0 ? void 0 : _a.extendedFrom;\n        const required = this.requiredKeysOf(zodSchema);\n        const properties = mapValues(zodSchema._def.shape(), mapItem);\n        if (!extendedFrom) {\n            return Object.assign(Object.assign(Object.assign(Object.assign({}, mapNullableType('object')), { properties, default: defaultValue }), (required.length > 0 ? { required } : {})), this.generateAdditionalProperties(zodSchema, mapItem));\n        }\n        const parent = extendedFrom.schema;\n        // We want to generate the parent schema so that it can be referenced down the line\n        mapItem(parent);\n        const keysRequiredByParent = this.requiredKeysOf(parent);\n        const propsOfParent = mapValues(parent === null || parent === void 0 ? void 0 : parent._def.shape(), mapItem);\n        const propertiesToAdd = Object.fromEntries(Object.entries(properties).filter(([key, type]) => {\n            return !objectEquals(propsOfParent[key], type);\n        }));\n        const additionallyRequired = required.filter(prop => !keysRequiredByParent.includes(prop));\n        const objectData = Object.assign(Object.assign(Object.assign(Object.assign({}, mapNullableType('object')), { default: defaultValue, properties: propertiesToAdd }), (additionallyRequired.length > 0\n            ? { required: additionallyRequired }\n            : {})), this.generateAdditionalProperties(zodSchema, mapItem));\n        return {\n            allOf: [\n                { $ref: `#/components/schemas/${extendedFrom.refId}` },\n                objectData,\n            ],\n        };\n    }\n    generateAdditionalProperties(zodSchema, mapItem) {\n        const unknownKeysOption = zodSchema._def.unknownKeys;\n        const catchallSchema = zodSchema._def.catchall;\n        if (isZodType(catchallSchema, 'ZodNever')) {\n            if (unknownKeysOption === 'strict') {\n                return { additionalProperties: false };\n            }\n            return {};\n        }\n        return { additionalProperties: mapItem(catchallSchema) };\n    }\n    requiredKeysOf(objectSchema) {\n        return Object.entries(objectSchema._def.shape())\n            .filter(([_key, type]) => !Metadata.isOptionalSchema(type))\n            .map(([key, _type]) => key);\n    }\n}\n\nclass RecordTransformer {\n    transform(zodSchema, mapNullableType, mapItem) {\n        const propertiesType = zodSchema._def.valueType;\n        const keyType = zodSchema._def.keyType;\n        const propertiesSchema = mapItem(propertiesType);\n        if (isZodType(keyType, 'ZodEnum') || isZodType(keyType, 'ZodNativeEnum')) {\n            // Native enums have their keys as both number and strings however the number is an\n            // internal representation and the string is the access point for a documentation\n            const keys = Object.values(keyType.enum).filter(isString);\n            const properties = keys.reduce((acc, curr) => (Object.assign(Object.assign({}, acc), { [curr]: propertiesSchema })), {});\n            return Object.assign(Object.assign({}, mapNullableType('object')), { properties });\n        }\n        return Object.assign(Object.assign({}, mapNullableType('object')), { additionalProperties: propertiesSchema });\n    }\n}\n\nclass StringTransformer {\n    transform(zodSchema, mapNullableType) {\n        var _a, _b, _c;\n        const regexCheck = this.getZodStringCheck(zodSchema, 'regex');\n        const length = (_a = this.getZodStringCheck(zodSchema, 'length')) === null || _a === void 0 ? void 0 : _a.value;\n        const maxLength = Number.isFinite(zodSchema.minLength)\n            ? (_b = zodSchema.minLength) !== null && _b !== void 0 ? _b : undefined\n            : undefined;\n        const minLength = Number.isFinite(zodSchema.maxLength)\n            ? (_c = zodSchema.maxLength) !== null && _c !== void 0 ? _c : undefined\n            : undefined;\n        return Object.assign(Object.assign({}, mapNullableType('string')), { \n            // FIXME: https://github.com/colinhacks/zod/commit/d78047e9f44596a96d637abb0ce209cd2732d88c\n            minLength: length !== null && length !== void 0 ? length : maxLength, maxLength: length !== null && length !== void 0 ? length : minLength, format: this.mapStringFormat(zodSchema), pattern: regexCheck === null || regexCheck === void 0 ? void 0 : regexCheck.regex.source });\n    }\n    /**\n     * Attempts to map Zod strings to known formats\n     * https://json-schema.org/understanding-json-schema/reference/string.html#built-in-formats\n     */\n    mapStringFormat(zodString) {\n        if (zodString.isUUID)\n            return 'uuid';\n        if (zodString.isEmail)\n            return 'email';\n        if (zodString.isURL)\n            return 'uri';\n        if (zodString.isDate)\n            return 'date';\n        if (zodString.isDatetime)\n            return 'date-time';\n        if (zodString.isCUID)\n            return 'cuid';\n        if (zodString.isCUID2)\n            return 'cuid2';\n        if (zodString.isULID)\n            return 'ulid';\n        if (zodString.isIP)\n            return 'ip';\n        if (zodString.isEmoji)\n            return 'emoji';\n        return undefined;\n    }\n    getZodStringCheck(zodString, kind) {\n        return zodString._def.checks.find((check) => {\n            return check.kind === kind;\n        });\n    }\n}\n\nclass TupleTransformer {\n    constructor(versionSpecifics) {\n        this.versionSpecifics = versionSpecifics;\n    }\n    transform(zodSchema, mapNullableType, mapItem) {\n        const { items } = zodSchema._def;\n        const schemas = items.map(mapItem);\n        return Object.assign(Object.assign({}, mapNullableType('array')), this.versionSpecifics.mapTupleItems(schemas));\n    }\n}\n\nclass UnionTransformer {\n    transform(zodSchema, mapNullableOfArray, mapItem) {\n        const options = this.flattenUnionTypes(zodSchema);\n        const schemas = options.map(schema => {\n            // If any of the underlying schemas of a union is .nullable then the whole union\n            // would be nullable. `mapNullableOfArray` would place it where it belongs.\n            // Therefor we are stripping the additional nullables from the inner schemas\n            // See https://github.com/asteasolutions/zod-to-openapi/issues/149\n            const optionToGenerate = this.unwrapNullable(schema);\n            return mapItem(optionToGenerate);\n        });\n        return {\n            anyOf: mapNullableOfArray(schemas),\n        };\n    }\n    flattenUnionTypes(schema) {\n        if (!isZodType(schema, 'ZodUnion')) {\n            return [schema];\n        }\n        const options = schema._def.options;\n        return options.flatMap(option => this.flattenUnionTypes(option));\n    }\n    unwrapNullable(schema) {\n        if (isZodType(schema, 'ZodNullable')) {\n            return this.unwrapNullable(schema.unwrap());\n        }\n        return schema;\n    }\n}\n\nclass OpenApiTransformer {\n    constructor(versionSpecifics) {\n        this.versionSpecifics = versionSpecifics;\n        this.objectTransformer = new ObjectTransformer();\n        this.stringTransformer = new StringTransformer();\n        this.numberTransformer = new NumberTransformer();\n        this.bigIntTransformer = new BigIntTransformer();\n        this.literalTransformer = new LiteralTransformer();\n        this.enumTransformer = new EnumTransformer();\n        this.nativeEnumTransformer = new NativeEnumTransformer();\n        this.arrayTransformer = new ArrayTransformer();\n        this.unionTransformer = new UnionTransformer();\n        this.discriminatedUnionTransformer = new DiscriminatedUnionTransformer();\n        this.intersectionTransformer = new IntersectionTransformer();\n        this.recordTransformer = new RecordTransformer();\n        this.tupleTransformer = new TupleTransformer(versionSpecifics);\n    }\n    transform(zodSchema, isNullable, mapItem, generateSchemaRef, defaultValue) {\n        if (isZodType(zodSchema, 'ZodNull')) {\n            return this.versionSpecifics.nullType;\n        }\n        if (isZodType(zodSchema, 'ZodUnknown') || isZodType(zodSchema, 'ZodAny')) {\n            return this.versionSpecifics.mapNullableType(undefined, isNullable);\n        }\n        if (isZodType(zodSchema, 'ZodObject')) {\n            return this.objectTransformer.transform(zodSchema, defaultValue, // verified on TS level from input\n            // verified on TS level from input\n            _ => this.versionSpecifics.mapNullableType(_, isNullable), mapItem);\n        }\n        const schema = this.transformSchemaWithoutDefault(zodSchema, isNullable, mapItem, generateSchemaRef);\n        return Object.assign(Object.assign({}, schema), { default: defaultValue });\n    }\n    transformSchemaWithoutDefault(zodSchema, isNullable, mapItem, generateSchemaRef) {\n        if (isZodType(zodSchema, 'ZodUnknown') || isZodType(zodSchema, 'ZodAny')) {\n            return this.versionSpecifics.mapNullableType(undefined, isNullable);\n        }\n        if (isZodType(zodSchema, 'ZodString')) {\n            return this.stringTransformer.transform(zodSchema, schema => this.versionSpecifics.mapNullableType(schema, isNullable));\n        }\n        if (isZodType(zodSchema, 'ZodNumber')) {\n            return this.numberTransformer.transform(zodSchema, schema => this.versionSpecifics.mapNullableType(schema, isNullable), _ => this.versionSpecifics.getNumberChecks(_));\n        }\n        if (isZodType(zodSchema, 'ZodBigInt')) {\n            return this.bigIntTransformer.transform(schema => this.versionSpecifics.mapNullableType(schema, isNullable));\n        }\n        if (isZodType(zodSchema, 'ZodBoolean')) {\n            return this.versionSpecifics.mapNullableType('boolean', isNullable);\n        }\n        if (isZodType(zodSchema, 'ZodLiteral')) {\n            return this.literalTransformer.transform(zodSchema, schema => this.versionSpecifics.mapNullableType(schema, isNullable));\n        }\n        if (isZodType(zodSchema, 'ZodEnum')) {\n            return this.enumTransformer.transform(zodSchema, schema => this.versionSpecifics.mapNullableType(schema, isNullable));\n        }\n        if (isZodType(zodSchema, 'ZodNativeEnum')) {\n            return this.nativeEnumTransformer.transform(zodSchema, schema => this.versionSpecifics.mapNullableType(schema, isNullable));\n        }\n        if (isZodType(zodSchema, 'ZodArray')) {\n            return this.arrayTransformer.transform(zodSchema, _ => this.versionSpecifics.mapNullableType(_, isNullable), mapItem);\n        }\n        if (isZodType(zodSchema, 'ZodTuple')) {\n            return this.tupleTransformer.transform(zodSchema, _ => this.versionSpecifics.mapNullableType(_, isNullable), mapItem);\n        }\n        if (isZodType(zodSchema, 'ZodUnion')) {\n            return this.unionTransformer.transform(zodSchema, _ => this.versionSpecifics.mapNullableOfArray(_, isNullable), mapItem);\n        }\n        if (isZodType(zodSchema, 'ZodDiscriminatedUnion')) {\n            return this.discriminatedUnionTransformer.transform(zodSchema, isNullable, _ => this.versionSpecifics.mapNullableOfArray(_, isNullable), mapItem, generateSchemaRef);\n        }\n        if (isZodType(zodSchema, 'ZodIntersection')) {\n            return this.intersectionTransformer.transform(zodSchema, isNullable, _ => this.versionSpecifics.mapNullableOfArray(_, isNullable), mapItem);\n        }\n        if (isZodType(zodSchema, 'ZodRecord')) {\n            return this.recordTransformer.transform(zodSchema, _ => this.versionSpecifics.mapNullableType(_, isNullable), mapItem);\n        }\n        if (isZodType(zodSchema, 'ZodDate')) {\n            return this.versionSpecifics.mapNullableType('string', isNullable);\n        }\n        const refId = Metadata.getRefId(zodSchema);\n        throw new UnknownZodTypeError({\n            currentSchema: zodSchema._def,\n            schemaName: refId,\n        });\n    }\n}\n\nclass OpenAPIGenerator {\n    constructor(definitions, versionSpecifics) {\n        this.definitions = definitions;\n        this.versionSpecifics = versionSpecifics;\n        this.schemaRefs = {};\n        this.paramRefs = {};\n        this.pathRefs = {};\n        this.rawComponents = [];\n        this.openApiTransformer = new OpenApiTransformer(versionSpecifics);\n        this.sortDefinitions();\n    }\n    generateDocumentData() {\n        this.definitions.forEach(definition => this.generateSingle(definition));\n        return {\n            components: this.buildComponents(),\n            paths: this.pathRefs,\n        };\n    }\n    generateComponents() {\n        this.definitions.forEach(definition => this.generateSingle(definition));\n        return {\n            components: this.buildComponents(),\n        };\n    }\n    buildComponents() {\n        var _a, _b;\n        const rawComponents = {};\n        this.rawComponents.forEach(({ componentType, name, component }) => {\n            var _a;\n            (_a = rawComponents[componentType]) !== null && _a !== void 0 ? _a : (rawComponents[componentType] = {});\n            rawComponents[componentType][name] = component;\n        });\n        return Object.assign(Object.assign({}, rawComponents), { schemas: Object.assign(Object.assign({}, ((_a = rawComponents.schemas) !== null && _a !== void 0 ? _a : {})), this.schemaRefs), parameters: Object.assign(Object.assign({}, ((_b = rawComponents.parameters) !== null && _b !== void 0 ? _b : {})), this.paramRefs) });\n    }\n    sortDefinitions() {\n        const generationOrder = [\n            'schema',\n            'parameter',\n            'component',\n            'route',\n        ];\n        this.definitions.sort((left, right) => {\n            // No type means \"plain zod schema\" => it comes as highest priority based on the array above\n            if (!('type' in left)) {\n                if (!('type' in right)) {\n                    return 0;\n                }\n                return -1;\n            }\n            if (!('type' in right)) {\n                return 1;\n            }\n            const leftIndex = generationOrder.findIndex(type => type === left.type);\n            const rightIndex = generationOrder.findIndex(type => type === right.type);\n            return leftIndex - rightIndex;\n        });\n    }\n    generateSingle(definition) {\n        if (!('type' in definition)) {\n            this.generateSchemaWithRef(definition);\n            return;\n        }\n        switch (definition.type) {\n            case 'parameter':\n                this.generateParameterDefinition(definition.schema);\n                return;\n            case 'schema':\n                this.generateSchemaWithRef(definition.schema);\n                return;\n            case 'route':\n                this.generateSingleRoute(definition.route);\n                return;\n            case 'component':\n                this.rawComponents.push(definition);\n                return;\n        }\n    }\n    generateParameterDefinition(zodSchema) {\n        const refId = Metadata.getRefId(zodSchema);\n        const result = this.generateParameter(zodSchema);\n        if (refId) {\n            this.paramRefs[refId] = result;\n        }\n        return result;\n    }\n    getParameterRef(schemaMetadata, external) {\n        var _a, _b, _c, _d, _e;\n        const parameterMetadata = (_a = schemaMetadata === null || schemaMetadata === void 0 ? void 0 : schemaMetadata.metadata) === null || _a === void 0 ? void 0 : _a.param;\n        const existingRef = ((_b = schemaMetadata === null || schemaMetadata === void 0 ? void 0 : schemaMetadata._internal) === null || _b === void 0 ? void 0 : _b.refId)\n            ? this.paramRefs[(_c = schemaMetadata._internal) === null || _c === void 0 ? void 0 : _c.refId]\n            : undefined;\n        if (!((_d = schemaMetadata === null || schemaMetadata === void 0 ? void 0 : schemaMetadata._internal) === null || _d === void 0 ? void 0 : _d.refId) || !existingRef) {\n            return undefined;\n        }\n        if ((parameterMetadata && existingRef.in !== parameterMetadata.in) ||\n            ((external === null || external === void 0 ? void 0 : external.in) && existingRef.in !== external.in)) {\n            throw new ConflictError(`Conflicting location for parameter ${existingRef.name}`, {\n                key: 'in',\n                values: compact([\n                    existingRef.in,\n                    external === null || external === void 0 ? void 0 : external.in,\n                    parameterMetadata === null || parameterMetadata === void 0 ? void 0 : parameterMetadata.in,\n                ]),\n            });\n        }\n        if ((parameterMetadata && existingRef.name !== parameterMetadata.name) ||\n            ((external === null || external === void 0 ? void 0 : external.name) && existingRef.name !== (external === null || external === void 0 ? void 0 : external.name))) {\n            throw new ConflictError(`Conflicting names for parameter`, {\n                key: 'name',\n                values: compact([\n                    existingRef.name,\n                    external === null || external === void 0 ? void 0 : external.name,\n                    parameterMetadata === null || parameterMetadata === void 0 ? void 0 : parameterMetadata.name,\n                ]),\n            });\n        }\n        return {\n            $ref: `#/components/parameters/${(_e = schemaMetadata._internal) === null || _e === void 0 ? void 0 : _e.refId}`,\n        };\n    }\n    generateInlineParameters(zodSchema, location) {\n        var _a;\n        const metadata = Metadata.getMetadata(zodSchema);\n        const parameterMetadata = (_a = metadata === null || metadata === void 0 ? void 0 : metadata.metadata) === null || _a === void 0 ? void 0 : _a.param;\n        const referencedSchema = this.getParameterRef(metadata, { in: location });\n        if (referencedSchema) {\n            return [referencedSchema];\n        }\n        if (isZodType(zodSchema, 'ZodObject')) {\n            const propTypes = zodSchema._def.shape();\n            const parameters = Object.entries(propTypes).map(([key, schema]) => {\n                var _a, _b;\n                const innerMetadata = Metadata.getMetadata(schema);\n                const referencedSchema = this.getParameterRef(innerMetadata, {\n                    in: location,\n                    name: key,\n                });\n                if (referencedSchema) {\n                    return referencedSchema;\n                }\n                const innerParameterMetadata = (_a = innerMetadata === null || innerMetadata === void 0 ? void 0 : innerMetadata.metadata) === null || _a === void 0 ? void 0 : _a.param;\n                if ((innerParameterMetadata === null || innerParameterMetadata === void 0 ? void 0 : innerParameterMetadata.name) &&\n                    innerParameterMetadata.name !== key) {\n                    throw new ConflictError(`Conflicting names for parameter`, {\n                        key: 'name',\n                        values: [key, innerParameterMetadata.name],\n                    });\n                }\n                if ((innerParameterMetadata === null || innerParameterMetadata === void 0 ? void 0 : innerParameterMetadata.in) &&\n                    innerParameterMetadata.in !== location) {\n                    throw new ConflictError(`Conflicting location for parameter ${(_b = innerParameterMetadata.name) !== null && _b !== void 0 ? _b : key}`, {\n                        key: 'in',\n                        values: [location, innerParameterMetadata.in],\n                    });\n                }\n                return this.generateParameter(schema.openapi({ param: { name: key, in: location } }));\n            });\n            return parameters;\n        }\n        if ((parameterMetadata === null || parameterMetadata === void 0 ? void 0 : parameterMetadata.in) && parameterMetadata.in !== location) {\n            throw new ConflictError(`Conflicting location for parameter ${parameterMetadata.name}`, {\n                key: 'in',\n                values: [location, parameterMetadata.in],\n            });\n        }\n        return [\n            this.generateParameter(zodSchema.openapi({ param: { in: location } })),\n        ];\n    }\n    generateSimpleParameter(zodSchema) {\n        var _a;\n        const metadata = Metadata.getParamMetadata(zodSchema);\n        const paramMetadata = (_a = metadata === null || metadata === void 0 ? void 0 : metadata.metadata) === null || _a === void 0 ? void 0 : _a.param;\n        // TODO: Why are we not unwrapping here for isNullable as well?\n        const required = !Metadata.isOptionalSchema(zodSchema) && !zodSchema.isNullable();\n        const schema = this.generateSchemaWithRef(zodSchema);\n        return Object.assign({ schema,\n            required }, (paramMetadata ? Metadata.buildParameterMetadata(paramMetadata) : {}));\n    }\n    generateParameter(zodSchema) {\n        var _a;\n        const metadata = Metadata.getMetadata(zodSchema);\n        const paramMetadata = (_a = metadata === null || metadata === void 0 ? void 0 : metadata.metadata) === null || _a === void 0 ? void 0 : _a.param;\n        const paramName = paramMetadata === null || paramMetadata === void 0 ? void 0 : paramMetadata.name;\n        const paramLocation = paramMetadata === null || paramMetadata === void 0 ? void 0 : paramMetadata.in;\n        if (!paramName) {\n            throw new MissingParameterDataError({ missingField: 'name' });\n        }\n        if (!paramLocation) {\n            throw new MissingParameterDataError({\n                missingField: 'in',\n                paramName,\n            });\n        }\n        const baseParameter = this.generateSimpleParameter(zodSchema);\n        return Object.assign(Object.assign({}, baseParameter), { in: paramLocation, name: paramName });\n    }\n    generateSchemaWithMetadata(zodSchema) {\n        var _a;\n        const innerSchema = Metadata.unwrapChained(zodSchema);\n        const metadata = Metadata.getMetadata(zodSchema);\n        const defaultValue = Metadata.getDefaultValue(zodSchema);\n        const result = ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.metadata) === null || _a === void 0 ? void 0 : _a.type)\n            ? { type: metadata === null || metadata === void 0 ? void 0 : metadata.metadata.type }\n            : this.toOpenAPISchema(innerSchema, zodSchema.isNullable(), defaultValue);\n        return (metadata === null || metadata === void 0 ? void 0 : metadata.metadata)\n            ? Metadata.applySchemaMetadata(result, metadata.metadata)\n            : omitBy(result, isNil);\n    }\n    /**\n     * Same as above but applies nullable\n     */\n    constructReferencedOpenAPISchema(zodSchema) {\n        var _a;\n        const metadata = Metadata.getMetadata(zodSchema);\n        const innerSchema = Metadata.unwrapChained(zodSchema);\n        const defaultValue = Metadata.getDefaultValue(zodSchema);\n        const isNullableSchema = zodSchema.isNullable();\n        if ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.metadata) === null || _a === void 0 ? void 0 : _a.type) {\n            return this.versionSpecifics.mapNullableType(metadata.metadata.type, isNullableSchema);\n        }\n        return this.toOpenAPISchema(innerSchema, isNullableSchema, defaultValue);\n    }\n    /**\n     * Generates an OpenAPI SchemaObject or a ReferenceObject with all the provided metadata applied\n     */\n    generateSimpleSchema(zodSchema) {\n        var _a;\n        const metadata = Metadata.getMetadata(zodSchema);\n        const refId = Metadata.getRefId(zodSchema);\n        if (!refId || !this.schemaRefs[refId]) {\n            return this.generateSchemaWithMetadata(zodSchema);\n        }\n        const schemaRef = this.schemaRefs[refId];\n        const referenceObject = {\n            $ref: this.generateSchemaRef(refId),\n        };\n        // Metadata provided from .openapi() that is new to what we had already registered\n        const newMetadata = omitBy(Metadata.buildSchemaMetadata((_a = metadata === null || metadata === void 0 ? void 0 : metadata.metadata) !== null && _a !== void 0 ? _a : {}), (value, key) => value === undefined || objectEquals(value, schemaRef[key]));\n        // Do not calculate schema metadata overrides if type is provided in .openapi\n        // https://github.com/asteasolutions/zod-to-openapi/pull/52/files/8ff707fe06e222bc573ed46cf654af8ee0b0786d#r996430801\n        if (newMetadata.type) {\n            return {\n                allOf: [referenceObject, newMetadata],\n            };\n        }\n        // New metadata from ZodSchema properties.\n        const newSchemaMetadata = omitBy(this.constructReferencedOpenAPISchema(zodSchema), (value, key) => value === undefined || objectEquals(value, schemaRef[key]));\n        const appliedMetadata = Metadata.applySchemaMetadata(newSchemaMetadata, newMetadata);\n        if (Object.keys(appliedMetadata).length > 0) {\n            return {\n                allOf: [referenceObject, appliedMetadata],\n            };\n        }\n        return referenceObject;\n    }\n    /**\n     * Same as `generateSchema` but if the new schema is added into the\n     * referenced schemas, it would return a ReferenceObject and not the\n     * whole result.\n     *\n     * Should be used for nested objects, arrays, etc.\n     */\n    generateSchemaWithRef(zodSchema) {\n        const refId = Metadata.getRefId(zodSchema);\n        const result = this.generateSimpleSchema(zodSchema);\n        if (refId && this.schemaRefs[refId] === undefined) {\n            this.schemaRefs[refId] = result;\n            return { $ref: this.generateSchemaRef(refId) };\n        }\n        return result;\n    }\n    generateSchemaRef(refId) {\n        return `#/components/schemas/${refId}`;\n    }\n    getRequestBody(requestBody) {\n        if (!requestBody) {\n            return;\n        }\n        const { content } = requestBody, rest = __rest(requestBody, [\"content\"]);\n        const requestBodyContent = this.getBodyContent(content);\n        return Object.assign(Object.assign({}, rest), { content: requestBodyContent });\n    }\n    getParameters(request) {\n        if (!request) {\n            return [];\n        }\n        const { headers } = request;\n        const query = this.cleanParameter(request.query);\n        const params = this.cleanParameter(request.params);\n        const cookies = this.cleanParameter(request.cookies);\n        const queryParameters = enhanceMissingParametersError(() => (query ? this.generateInlineParameters(query, 'query') : []), { location: 'query' });\n        const pathParameters = enhanceMissingParametersError(() => (params ? this.generateInlineParameters(params, 'path') : []), { location: 'path' });\n        const cookieParameters = enhanceMissingParametersError(() => (cookies ? this.generateInlineParameters(cookies, 'cookie') : []), { location: 'cookie' });\n        const headerParameters = enhanceMissingParametersError(() => {\n            if (Array.isArray(headers)) {\n                return headers.flatMap(header => this.generateInlineParameters(header, 'header'));\n            }\n            const cleanHeaders = this.cleanParameter(headers);\n            return cleanHeaders\n                ? this.generateInlineParameters(cleanHeaders, 'header')\n                : [];\n        }, { location: 'header' });\n        return [\n            ...pathParameters,\n            ...queryParameters,\n            ...headerParameters,\n            ...cookieParameters,\n        ];\n    }\n    cleanParameter(schema) {\n        if (!schema) {\n            return undefined;\n        }\n        return isZodType(schema, 'ZodEffects')\n            ? this.cleanParameter(schema._def.schema)\n            : schema;\n    }\n    generatePath(route) {\n        const { method, path, request, responses } = route, pathItemConfig = __rest(route, [\"method\", \"path\", \"request\", \"responses\"]);\n        const generatedResponses = mapValues(responses, response => {\n            return this.getResponse(response);\n        });\n        const parameters = enhanceMissingParametersError(() => this.getParameters(request), { route: `${method} ${path}` });\n        const requestBody = this.getRequestBody(request === null || request === void 0 ? void 0 : request.body);\n        const routeDoc = {\n            [method]: Object.assign(Object.assign(Object.assign(Object.assign({}, pathItemConfig), (parameters.length > 0\n                ? {\n                    parameters: [...(pathItemConfig.parameters || []), ...parameters],\n                }\n                : {})), (requestBody ? { requestBody } : {})), { responses: generatedResponses }),\n        };\n        return routeDoc;\n    }\n    generateSingleRoute(route) {\n        const routeDoc = this.generatePath(route);\n        this.pathRefs[route.path] = Object.assign(Object.assign({}, this.pathRefs[route.path]), routeDoc);\n        return routeDoc;\n    }\n    getResponse(response) {\n        if (this.isReferenceObject(response)) {\n            return response;\n        }\n        const { content, headers } = response, rest = __rest(response, [\"content\", \"headers\"]);\n        const responseContent = content\n            ? { content: this.getBodyContent(content) }\n            : {};\n        if (!headers) {\n            return Object.assign(Object.assign({}, rest), responseContent);\n        }\n        const responseHeaders = isZodType(headers, 'ZodObject')\n            ? this.getResponseHeaders(headers)\n            : // This is input data so it is okay to cast in the common generator\n                // since this is the user's responsibility to keep it correct\n                headers;\n        return Object.assign(Object.assign(Object.assign({}, rest), { headers: responseHeaders }), responseContent);\n    }\n    isReferenceObject(schema) {\n        return '$ref' in schema;\n    }\n    getResponseHeaders(headers) {\n        const schemaShape = headers._def.shape();\n        const responseHeaders = mapValues(schemaShape, _ => this.generateSimpleParameter(_));\n        return responseHeaders;\n    }\n    getBodyContent(content) {\n        return mapValues(content, config => {\n            if (!config || !isAnyZodType(config.schema)) {\n                return config;\n            }\n            const { schema: configSchema } = config, rest = __rest(config, [\"schema\"]);\n            const schema = this.generateSchemaWithRef(configSchema);\n            return Object.assign({ schema }, rest);\n        });\n    }\n    toOpenAPISchema(zodSchema, isNullable, defaultValue) {\n        return this.openApiTransformer.transform(zodSchema, isNullable, _ => this.generateSchemaWithRef(_), _ => this.generateSchemaRef(_), defaultValue);\n    }\n}\n\nclass OpenApiGeneratorV30Specifics {\n    get nullType() {\n        return { nullable: true };\n    }\n    mapNullableOfArray(objects, isNullable) {\n        if (isNullable) {\n            return [...objects, this.nullType];\n        }\n        return objects;\n    }\n    mapNullableType(type, isNullable) {\n        return Object.assign(Object.assign({}, (type ? { type } : undefined)), (isNullable ? this.nullType : undefined));\n    }\n    mapTupleItems(schemas) {\n        const uniqueSchemas = uniq(schemas);\n        return {\n            items: uniqueSchemas.length === 1\n                ? uniqueSchemas[0]\n                : { anyOf: uniqueSchemas },\n            minItems: schemas.length,\n            maxItems: schemas.length,\n        };\n    }\n    getNumberChecks(checks) {\n        return Object.assign({}, ...checks.map(check => {\n            switch (check.kind) {\n                case 'min':\n                    return check.inclusive\n                        ? { minimum: Number(check.value) }\n                        : { minimum: Number(check.value), exclusiveMinimum: true };\n                case 'max':\n                    return check.inclusive\n                        ? { maximum: Number(check.value) }\n                        : { maximum: Number(check.value), exclusiveMaximum: true };\n                default:\n                    return {};\n            }\n        }));\n    }\n}\n\nclass OpenApiGeneratorV3 {\n    constructor(definitions) {\n        const specifics = new OpenApiGeneratorV30Specifics();\n        this.generator = new OpenAPIGenerator(definitions, specifics);\n    }\n    generateDocument(config) {\n        const baseData = this.generator.generateDocumentData();\n        return Object.assign(Object.assign({}, config), baseData);\n    }\n    generateComponents() {\n        return this.generator.generateComponents();\n    }\n}\n\nclass OpenApiGeneratorV31Specifics {\n    get nullType() {\n        return { type: 'null' };\n    }\n    mapNullableOfArray(objects, isNullable) {\n        if (isNullable) {\n            return [...objects, this.nullType];\n        }\n        return objects;\n    }\n    mapNullableType(type, isNullable) {\n        if (!type) {\n            // 'null' is considered a type in Open API 3.1.0 => not providing a type includes null\n            return {};\n        }\n        // Open API 3.1.0 made the `nullable` key invalid and instead you use type arrays\n        if (isNullable) {\n            return {\n                type: Array.isArray(type) ? [...type, 'null'] : [type, 'null'],\n            };\n        }\n        return {\n            type,\n        };\n    }\n    mapTupleItems(schemas) {\n        return {\n            prefixItems: schemas,\n        };\n    }\n    getNumberChecks(checks) {\n        return Object.assign({}, ...checks.map(check => {\n            switch (check.kind) {\n                case 'min':\n                    return check.inclusive\n                        ? { minimum: Number(check.value) }\n                        : { exclusiveMinimum: Number(check.value) };\n                case 'max':\n                    return check.inclusive\n                        ? { maximum: Number(check.value) }\n                        : { exclusiveMaximum: Number(check.value) };\n                default:\n                    return {};\n            }\n        }));\n    }\n}\n\nfunction isWebhookDefinition(definition) {\n    return 'type' in definition && definition.type === 'webhook';\n}\nclass OpenApiGeneratorV31 {\n    constructor(definitions) {\n        this.definitions = definitions;\n        this.webhookRefs = {};\n        const specifics = new OpenApiGeneratorV31Specifics();\n        this.generator = new OpenAPIGenerator(this.definitions, specifics);\n    }\n    generateDocument(config) {\n        const baseDocument = this.generator.generateDocumentData();\n        this.definitions\n            .filter(isWebhookDefinition)\n            .forEach(definition => this.generateSingleWebhook(definition.webhook));\n        return Object.assign(Object.assign(Object.assign({}, config), baseDocument), { webhooks: this.webhookRefs });\n    }\n    generateComponents() {\n        return this.generator.generateComponents();\n    }\n    generateSingleWebhook(route) {\n        const routeDoc = this.generator.generatePath(route);\n        this.webhookRefs[route.path] = Object.assign(Object.assign({}, this.webhookRefs[route.path]), routeDoc);\n        return routeDoc;\n    }\n}\n\nexport { OpenAPIRegistry, OpenApiGeneratorV3, OpenApiGeneratorV31, extendZodWithOpenApi, getOpenApiMetadata };\n", "// src/index.ts\nimport { validator } from \"hono/validator\";\nimport { ZodObject } from \"zod\";\nvar zValidator = (target, schema, hook, options) => (\n  // @ts-expect-error not typed well\n  validator(target, async (value, c) => {\n    let validatorValue = value;\n    if (target === \"header\" && schema instanceof ZodObject) {\n      const schemaKeys = Object.keys(schema.shape);\n      const caseInsensitiveKeymap = Object.fromEntries(\n        schemaKeys.map((key) => [key.toLowerCase(), key])\n      );\n      validatorValue = Object.fromEntries(\n        Object.entries(value).map(([key, value2]) => [caseInsensitiveKeymap[key] || key, value2])\n      );\n    }\n    const result = options && options.validationFunction ? await options.validationFunction(schema, validatorValue) : await schema.safeParseAsync(validatorValue);\n    if (hook) {\n      const hookResult = await hook({ data: validatorValue, ...result, target }, c);\n      if (hookResult) {\n        if (hookResult instanceof Response) {\n          return hookResult;\n        }\n        if (\"response\" in hookResult) {\n          return hookResult.response;\n        }\n      }\n    }\n    if (!result.success) {\n      return c.json(result, 400);\n    }\n    return result.data;\n  })\n);\nexport {\n  zValidator\n};\n", "// src/validator/index.ts\nimport { validator } from \"./validator.js\";\nexport {\n  validator\n};\n", "// src/validator/validator.ts\nimport { getCookie } from \"../helper/cookie/index.js\";\nimport { HTTPException } from \"../http-exception.js\";\nimport { bufferToFormData } from \"../utils/buffer.js\";\nvar jsonRegex = /^application\\/([a-z-\\.]+\\+)?json(;\\s*[a-zA-Z0-9\\-]+\\=([^;]+))*$/;\nvar multipartRegex = /^multipart\\/form-data(;\\s?boundary=[a-zA-Z0-9'\"()+_,\\-./:=?]+)?$/;\nvar urlencodedRegex = /^application\\/x-www-form-urlencoded(;\\s*[a-zA-Z0-9\\-]+\\=([^;]+))*$/;\nvar validator = (target, validationFunc) => {\n  return async (c, next) => {\n    let value = {};\n    const contentType = c.req.header(\"Content-Type\");\n    switch (target) {\n      case \"json\":\n        if (!contentType || !jsonRegex.test(contentType)) {\n          break;\n        }\n        try {\n          value = await c.req.json();\n        } catch {\n          const message = \"Malformed JSON in request body\";\n          throw new HTTPException(400, { message });\n        }\n        break;\n      case \"form\": {\n        if (!contentType || !(multipartRegex.test(contentType) || urlencodedRegex.test(contentType))) {\n          break;\n        }\n        let formData;\n        if (c.req.bodyCache.formData) {\n          formData = await c.req.bodyCache.formData;\n        } else {\n          try {\n            const arrayBuffer = await c.req.arrayBuffer();\n            formData = await bufferToFormData(arrayBuffer, contentType);\n            c.req.bodyCache.formData = formData;\n          } catch (e) {\n            let message = \"Malformed FormData request.\";\n            message += e instanceof Error ? ` ${e.message}` : ` ${String(e)}`;\n            throw new HTTPException(400, { message });\n          }\n        }\n        const form = {};\n        formData.forEach((value2, key) => {\n          if (key.endsWith(\"[]\")) {\n            ;\n            (form[key] ??= []).push(value2);\n          } else if (Array.isArray(form[key])) {\n            ;\n            form[key].push(value2);\n          } else if (key in form) {\n            form[key] = [form[key], value2];\n          } else {\n            form[key] = value2;\n          }\n        });\n        value = form;\n        break;\n      }\n      case \"query\":\n        value = Object.fromEntries(\n          Object.entries(c.req.queries()).map(([k, v]) => {\n            return v.length === 1 ? [k, v[0]] : [k, v];\n          })\n        );\n        break;\n      case \"param\":\n        value = c.req.param();\n        break;\n      case \"header\":\n        value = c.req.header();\n        break;\n      case \"cookie\":\n        value = getCookie(c);\n        break;\n    }\n    const res = await validationFunc(value, c);\n    if (res instanceof Response) {\n      return res;\n    }\n    c.req.addValidatedData(target, res);\n    await next();\n  };\n};\nexport {\n  validator\n};\n", "// src/helper/cookie/index.ts\nimport { parse, parseSigned, serialize, serializeSigned } from \"../../utils/cookie.js\";\nvar getCookie = (c, key, prefix) => {\n  const cookie = c.req.raw.headers.get(\"Cookie\");\n  if (typeof key === \"string\") {\n    if (!cookie) {\n      return void 0;\n    }\n    let finalKey = key;\n    if (prefix === \"secure\") {\n      finalKey = \"__Secure-\" + key;\n    } else if (prefix === \"host\") {\n      finalKey = \"__Host-\" + key;\n    }\n    const obj2 = parse(cookie, finalKey);\n    return obj2[finalKey];\n  }\n  if (!cookie) {\n    return {};\n  }\n  const obj = parse(cookie);\n  return obj;\n};\nvar getSignedCookie = async (c, secret, key, prefix) => {\n  const cookie = c.req.raw.headers.get(\"Cookie\");\n  if (typeof key === \"string\") {\n    if (!cookie) {\n      return void 0;\n    }\n    let finalKey = key;\n    if (prefix === \"secure\") {\n      finalKey = \"__Secure-\" + key;\n    } else if (prefix === \"host\") {\n      finalKey = \"__Host-\" + key;\n    }\n    const obj2 = await parseSigned(cookie, secret, finalKey);\n    return obj2[finalKey];\n  }\n  if (!cookie) {\n    return {};\n  }\n  const obj = await parseSigned(cookie, secret);\n  return obj;\n};\nvar setCookie = (c, name, value, opt) => {\n  let cookie;\n  if (opt?.prefix === \"secure\") {\n    cookie = serialize(\"__Secure-\" + name, value, { path: \"/\", ...opt, secure: true });\n  } else if (opt?.prefix === \"host\") {\n    cookie = serialize(\"__Host-\" + name, value, {\n      ...opt,\n      path: \"/\",\n      secure: true,\n      domain: void 0\n    });\n  } else {\n    cookie = serialize(name, value, { path: \"/\", ...opt });\n  }\n  c.header(\"Set-Cookie\", cookie, { append: true });\n};\nvar setSignedCookie = async (c, name, value, secret, opt) => {\n  let cookie;\n  if (opt?.prefix === \"secure\") {\n    cookie = await serializeSigned(\"__Secure-\" + name, value, secret, {\n      path: \"/\",\n      ...opt,\n      secure: true\n    });\n  } else if (opt?.prefix === \"host\") {\n    cookie = await serializeSigned(\"__Host-\" + name, value, secret, {\n      ...opt,\n      path: \"/\",\n      secure: true,\n      domain: void 0\n    });\n  } else {\n    cookie = await serializeSigned(name, value, secret, { path: \"/\", ...opt });\n  }\n  c.header(\"set-cookie\", cookie, { append: true });\n};\nvar deleteCookie = (c, name, opt) => {\n  const deletedCookie = getCookie(c, name, opt?.prefix);\n  setCookie(c, name, \"\", { ...opt, maxAge: 0 });\n  return deletedCookie;\n};\nexport {\n  deleteCookie,\n  getCookie,\n  getSignedCookie,\n  setCookie,\n  setSignedCookie\n};\n", "// src/utils/cookie.ts\nimport { decodeURIComponent_ } from \"./url.js\";\nvar algorithm = { name: \"HMAC\", hash: \"SHA-256\" };\nvar getCryptoKey = async (secret) => {\n  const secretBuf = typeof secret === \"string\" ? new TextEncoder().encode(secret) : secret;\n  return await crypto.subtle.importKey(\"raw\", secretBuf, algorithm, false, [\"sign\", \"verify\"]);\n};\nvar makeSignature = async (value, secret) => {\n  const key = await getCryptoKey(secret);\n  const signature = await crypto.subtle.sign(algorithm.name, key, new TextEncoder().encode(value));\n  return btoa(String.fromCharCode(...new Uint8Array(signature)));\n};\nvar verifySignature = async (base64Signature, value, secret) => {\n  try {\n    const signatureBinStr = atob(base64Signature);\n    const signature = new Uint8Array(signatureBinStr.length);\n    for (let i = 0, len = signatureBinStr.length; i < len; i++) {\n      signature[i] = signatureBinStr.charCodeAt(i);\n    }\n    return await crypto.subtle.verify(algorithm, secret, signature, new TextEncoder().encode(value));\n  } catch {\n    return false;\n  }\n};\nvar validCookieNameRegEx = /^[\\w!#$%&'*.^`|~+-]+$/;\nvar validCookieValueRegEx = /^[ !#-:<-[\\]-~]*$/;\nvar parse = (cookie, name) => {\n  if (name && cookie.indexOf(name) === -1) {\n    return {};\n  }\n  const pairs = cookie.trim().split(\";\");\n  const parsedCookie = {};\n  for (let pairStr of pairs) {\n    pairStr = pairStr.trim();\n    const valueStartPos = pairStr.indexOf(\"=\");\n    if (valueStartPos === -1) {\n      continue;\n    }\n    const cookieName = pairStr.substring(0, valueStartPos).trim();\n    if (name && name !== cookieName || !validCookieNameRegEx.test(cookieName)) {\n      continue;\n    }\n    let cookieValue = pairStr.substring(valueStartPos + 1).trim();\n    if (cookieValue.startsWith('\"') && cookieValue.endsWith('\"')) {\n      cookieValue = cookieValue.slice(1, -1);\n    }\n    if (validCookieValueRegEx.test(cookieValue)) {\n      parsedCookie[cookieName] = decodeURIComponent_(cookieValue);\n      if (name) {\n        break;\n      }\n    }\n  }\n  return parsedCookie;\n};\nvar parseSigned = async (cookie, secret, name) => {\n  const parsedCookie = {};\n  const secretKey = await getCryptoKey(secret);\n  for (const [key, value] of Object.entries(parse(cookie, name))) {\n    const signatureStartPos = value.lastIndexOf(\".\");\n    if (signatureStartPos < 1) {\n      continue;\n    }\n    const signedValue = value.substring(0, signatureStartPos);\n    const signature = value.substring(signatureStartPos + 1);\n    if (signature.length !== 44 || !signature.endsWith(\"=\")) {\n      continue;\n    }\n    const isVerified = await verifySignature(signature, signedValue, secretKey);\n    parsedCookie[key] = isVerified ? signedValue : false;\n  }\n  return parsedCookie;\n};\nvar _serialize = (name, value, opt = {}) => {\n  let cookie = `${name}=${value}`;\n  if (name.startsWith(\"__Secure-\") && !opt.secure) {\n    throw new Error(\"__Secure- Cookie must have Secure attributes\");\n  }\n  if (name.startsWith(\"__Host-\")) {\n    if (!opt.secure) {\n      throw new Error(\"__Host- Cookie must have Secure attributes\");\n    }\n    if (opt.path !== \"/\") {\n      throw new Error('__Host- Cookie must have Path attributes with \"/\"');\n    }\n    if (opt.domain) {\n      throw new Error(\"__Host- Cookie must not have Domain attributes\");\n    }\n  }\n  if (opt && typeof opt.maxAge === \"number\" && opt.maxAge >= 0) {\n    if (opt.maxAge > 3456e4) {\n      throw new Error(\n        \"Cookies Max-Age SHOULD NOT be greater than 400 days (34560000 seconds) in duration.\"\n      );\n    }\n    cookie += `; Max-Age=${opt.maxAge | 0}`;\n  }\n  if (opt.domain && opt.prefix !== \"host\") {\n    cookie += `; Domain=${opt.domain}`;\n  }\n  if (opt.path) {\n    cookie += `; Path=${opt.path}`;\n  }\n  if (opt.expires) {\n    if (opt.expires.getTime() - Date.now() > 3456e7) {\n      throw new Error(\n        \"Cookies Expires SHOULD NOT be greater than 400 days (34560000 seconds) in the future.\"\n      );\n    }\n    cookie += `; Expires=${opt.expires.toUTCString()}`;\n  }\n  if (opt.httpOnly) {\n    cookie += \"; HttpOnly\";\n  }\n  if (opt.secure) {\n    cookie += \"; Secure\";\n  }\n  if (opt.sameSite) {\n    cookie += `; SameSite=${opt.sameSite.charAt(0).toUpperCase() + opt.sameSite.slice(1)}`;\n  }\n  if (opt.priority) {\n    cookie += `; Priority=${opt.priority}`;\n  }\n  if (opt.partitioned) {\n    if (!opt.secure) {\n      throw new Error(\"Partitioned Cookie must have Secure attributes\");\n    }\n    cookie += \"; Partitioned\";\n  }\n  return cookie;\n};\nvar serialize = (name, value, opt) => {\n  value = encodeURIComponent(value);\n  return _serialize(name, value, opt);\n};\nvar serializeSigned = async (name, value, secret, opt = {}) => {\n  const signature = await makeSignature(value, secret);\n  value = `${value}.${signature}`;\n  value = encodeURIComponent(value);\n  return _serialize(name, value, opt);\n};\nexport {\n  parse,\n  parseSigned,\n  serialize,\n  serializeSigned\n};\n", "// src/utils/url.ts\nvar splitPath = (path) => {\n  const paths = path.split(\"/\");\n  if (paths[0] === \"\") {\n    paths.shift();\n  }\n  return paths;\n};\nvar splitRoutingPath = (routePath) => {\n  const { groups, path } = extractGroupsFromPath(routePath);\n  const paths = splitPath(path);\n  return replaceGroupMarks(paths, groups);\n};\nvar extractGroupsFromPath = (path) => {\n  const groups = [];\n  path = path.replace(/\\{[^}]+\\}/g, (match, index) => {\n    const mark = `@${index}`;\n    groups.push([mark, match]);\n    return mark;\n  });\n  return { groups, path };\n};\nvar replaceGroupMarks = (paths, groups) => {\n  for (let i = groups.length - 1; i >= 0; i--) {\n    const [mark] = groups[i];\n    for (let j = paths.length - 1; j >= 0; j--) {\n      if (paths[j].includes(mark)) {\n        paths[j] = paths[j].replace(mark, groups[i][1]);\n        break;\n      }\n    }\n  }\n  return paths;\n};\nvar patternCache = {};\nvar getPattern = (label, next) => {\n  if (label === \"*\") {\n    return \"*\";\n  }\n  const match = label.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n  if (match) {\n    const cacheKey = `${label}#${next}`;\n    if (!patternCache[cacheKey]) {\n      if (match[2]) {\n        patternCache[cacheKey] = next && next[0] !== \":\" && next[0] !== \"*\" ? [cacheKey, match[1], new RegExp(`^${match[2]}(?=/${next})`)] : [label, match[1], new RegExp(`^${match[2]}$`)];\n      } else {\n        patternCache[cacheKey] = [label, match[1], true];\n      }\n    }\n    return patternCache[cacheKey];\n  }\n  return null;\n};\nvar tryDecode = (str, decoder) => {\n  try {\n    return decoder(str);\n  } catch {\n    return str.replace(/(?:%[0-9A-Fa-f]{2})+/g, (match) => {\n      try {\n        return decoder(match);\n      } catch {\n        return match;\n      }\n    });\n  }\n};\nvar tryDecodeURI = (str) => tryDecode(str, decodeURI);\nvar getPath = (request) => {\n  const url = request.url;\n  const start = url.indexOf(\"/\", 8);\n  let i = start;\n  for (; i < url.length; i++) {\n    const charCode = url.charCodeAt(i);\n    if (charCode === 37) {\n      const queryIndex = url.indexOf(\"?\", i);\n      const path = url.slice(start, queryIndex === -1 ? void 0 : queryIndex);\n      return tryDecodeURI(path.includes(\"%25\") ? path.replace(/%25/g, \"%2525\") : path);\n    } else if (charCode === 63) {\n      break;\n    }\n  }\n  return url.slice(start, i);\n};\nvar getQueryStrings = (url) => {\n  const queryIndex = url.indexOf(\"?\", 8);\n  return queryIndex === -1 ? \"\" : \"?\" + url.slice(queryIndex + 1);\n};\nvar getPathNoStrict = (request) => {\n  const result = getPath(request);\n  return result.length > 1 && result.at(-1) === \"/\" ? result.slice(0, -1) : result;\n};\nvar mergePath = (base, sub, ...rest) => {\n  if (rest.length) {\n    sub = mergePath(sub, ...rest);\n  }\n  return `${base?.[0] === \"/\" ? \"\" : \"/\"}${base}${sub === \"/\" ? \"\" : `${base?.at(-1) === \"/\" ? \"\" : \"/\"}${sub?.[0] === \"/\" ? sub.slice(1) : sub}`}`;\n};\nvar checkOptionalParameter = (path) => {\n  if (path.charCodeAt(path.length - 1) !== 63 || !path.includes(\":\")) {\n    return null;\n  }\n  const segments = path.split(\"/\");\n  const results = [];\n  let basePath = \"\";\n  segments.forEach((segment) => {\n    if (segment !== \"\" && !/\\:/.test(segment)) {\n      basePath += \"/\" + segment;\n    } else if (/\\:/.test(segment)) {\n      if (/\\?/.test(segment)) {\n        if (results.length === 0 && basePath === \"\") {\n          results.push(\"/\");\n        } else {\n          results.push(basePath);\n        }\n        const optionalSegment = segment.replace(\"?\", \"\");\n        basePath += \"/\" + optionalSegment;\n        results.push(basePath);\n      } else {\n        basePath += \"/\" + segment;\n      }\n    }\n  });\n  return results.filter((v, i, a) => a.indexOf(v) === i);\n};\nvar _decodeURI = (value) => {\n  if (!/[%+]/.test(value)) {\n    return value;\n  }\n  if (value.indexOf(\"+\") !== -1) {\n    value = value.replace(/\\+/g, \" \");\n  }\n  return value.indexOf(\"%\") !== -1 ? decodeURIComponent_(value) : value;\n};\nvar _getQueryParam = (url, key, multiple) => {\n  let encoded;\n  if (!multiple && key && !/[%+]/.test(key)) {\n    let keyIndex2 = url.indexOf(`?${key}`, 8);\n    if (keyIndex2 === -1) {\n      keyIndex2 = url.indexOf(`&${key}`, 8);\n    }\n    while (keyIndex2 !== -1) {\n      const trailingKeyCode = url.charCodeAt(keyIndex2 + key.length + 1);\n      if (trailingKeyCode === 61) {\n        const valueIndex = keyIndex2 + key.length + 2;\n        const endIndex = url.indexOf(\"&\", valueIndex);\n        return _decodeURI(url.slice(valueIndex, endIndex === -1 ? void 0 : endIndex));\n      } else if (trailingKeyCode == 38 || isNaN(trailingKeyCode)) {\n        return \"\";\n      }\n      keyIndex2 = url.indexOf(`&${key}`, keyIndex2 + 1);\n    }\n    encoded = /[%+]/.test(url);\n    if (!encoded) {\n      return void 0;\n    }\n  }\n  const results = {};\n  encoded ??= /[%+]/.test(url);\n  let keyIndex = url.indexOf(\"?\", 8);\n  while (keyIndex !== -1) {\n    const nextKeyIndex = url.indexOf(\"&\", keyIndex + 1);\n    let valueIndex = url.indexOf(\"=\", keyIndex);\n    if (valueIndex > nextKeyIndex && nextKeyIndex !== -1) {\n      valueIndex = -1;\n    }\n    let name = url.slice(\n      keyIndex + 1,\n      valueIndex === -1 ? nextKeyIndex === -1 ? void 0 : nextKeyIndex : valueIndex\n    );\n    if (encoded) {\n      name = _decodeURI(name);\n    }\n    keyIndex = nextKeyIndex;\n    if (name === \"\") {\n      continue;\n    }\n    let value;\n    if (valueIndex === -1) {\n      value = \"\";\n    } else {\n      value = url.slice(valueIndex + 1, nextKeyIndex === -1 ? void 0 : nextKeyIndex);\n      if (encoded) {\n        value = _decodeURI(value);\n      }\n    }\n    if (multiple) {\n      if (!(results[name] && Array.isArray(results[name]))) {\n        results[name] = [];\n      }\n      ;\n      results[name].push(value);\n    } else {\n      results[name] ??= value;\n    }\n  }\n  return key ? results[key] : results;\n};\nvar getQueryParam = _getQueryParam;\nvar getQueryParams = (url, key) => {\n  return _getQueryParam(url, key, true);\n};\nvar decodeURIComponent_ = decodeURIComponent;\nexport {\n  checkOptionalParameter,\n  decodeURIComponent_,\n  getPath,\n  getPathNoStrict,\n  getPattern,\n  getQueryParam,\n  getQueryParams,\n  getQueryStrings,\n  mergePath,\n  splitPath,\n  splitRoutingPath,\n  tryDecode\n};\n", "// src/http-exception.ts\nvar HTTPException = class extends Error {\n  res;\n  status;\n  constructor(status = 500, options) {\n    super(options?.message, { cause: options?.cause });\n    this.res = options?.res;\n    this.status = status;\n  }\n  getResponse() {\n    if (this.res) {\n      const newResponse = new Response(this.res.body, {\n        status: this.status,\n        headers: this.res.headers\n      });\n      return newResponse;\n    }\n    return new Response(this.message, {\n      status: this.status\n    });\n  }\n};\nexport {\n  HTTPException\n};\n", "// src/utils/buffer.ts\nimport { sha256 } from \"./crypto.js\";\nvar equal = (a, b) => {\n  if (a === b) {\n    return true;\n  }\n  if (a.byteLength !== b.byteLength) {\n    return false;\n  }\n  const va = new DataView(a);\n  const vb = new DataView(b);\n  let i = va.byteLength;\n  while (i--) {\n    if (va.getUint8(i) !== vb.getUint8(i)) {\n      return false;\n    }\n  }\n  return true;\n};\nvar timingSafeEqual = async (a, b, hashFunction) => {\n  if (!hashFunction) {\n    hashFunction = sha256;\n  }\n  const [sa, sb] = await Promise.all([hashFunction(a), hashFunction(b)]);\n  if (!sa || !sb) {\n    return false;\n  }\n  return sa === sb && a === b;\n};\nvar bufferToString = (buffer) => {\n  if (buffer instanceof ArrayBuffer) {\n    const enc = new TextDecoder(\"utf-8\");\n    return enc.decode(buffer);\n  }\n  return buffer;\n};\nvar bufferToFormData = (arrayBuffer, contentType) => {\n  const response = new Response(arrayBuffer, {\n    headers: {\n      \"Content-Type\": contentType\n    }\n  });\n  return response.formData();\n};\nexport {\n  bufferToFormData,\n  bufferToString,\n  equal,\n  timingSafeEqual\n};\n", "// src/utils/crypto.ts\nvar sha256 = async (data) => {\n  const algorithm = { name: \"SHA-256\", alias: \"sha256\" };\n  const hash = await createHash(data, algorithm);\n  return hash;\n};\nvar sha1 = async (data) => {\n  const algorithm = { name: \"SHA-1\", alias: \"sha1\" };\n  const hash = await createHash(data, algorithm);\n  return hash;\n};\nvar md5 = async (data) => {\n  const algorithm = { name: \"MD5\", alias: \"md5\" };\n  const hash = await createHash(data, algorithm);\n  return hash;\n};\nvar createHash = async (data, algorithm) => {\n  let sourceBuffer;\n  if (ArrayBuffer.isView(data) || data instanceof ArrayBuffer) {\n    sourceBuffer = data;\n  } else {\n    if (typeof data === \"object\") {\n      data = JSON.stringify(data);\n    }\n    sourceBuffer = new TextEncoder().encode(String(data));\n  }\n  if (crypto && crypto.subtle) {\n    const buffer = await crypto.subtle.digest(\n      {\n        name: algorithm.name\n      },\n      sourceBuffer\n    );\n    const hash = Array.prototype.map.call(new Uint8Array(buffer), (x) => (\"00\" + x.toString(16)).slice(-2)).join(\"\");\n    return hash;\n  }\n  return null;\n};\nexport {\n  createHash,\n  md5,\n  sha1,\n  sha256\n};\n", "var util;\n(function (util) {\n    util.assertEqual = (val) => val;\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n            .join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then &&\n                typeof data.then === \"function\" &&\n                data.catch &&\n                typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `smaller than or equal to`\n                        : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\n\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const overrideMap = getErrorMap();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap, // contextual error map is first priority\n            ctx.schemaErrorMap, // then schema-bound map if available\n            overrideMap, // then global override map\n            overrideMap === errorMap ? undefined : errorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" &&\n                (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\n\nvar _ZodEnum_cache, _ZodNativeEnum_cache;\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        var _a, _b;\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message !== null && message !== void 0 ? message : ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        var _a, _b;\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async,\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({ data, path: [], parent: ctx });\n                return isValid(result)\n                    ? {\n                        value: result.value,\n                    }\n                    : {\n                        issues: ctx.common.issues,\n                    };\n            }\n            catch (err) {\n                if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true,\n                };\n            }\n        }\n        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result)\n            ? {\n                value: result.value,\n            }\n            : {\n                issues: ctx.common.issues,\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult)\n            ? maybeAsyncResult\n            : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\"\n                    ? refinementData(val, ctx)\n                    : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data),\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&\u2019*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    let secondsRegexSource = `[0-5]\\\\d`;\n    if (args.precision) {\n        secondsRegexSource = `${secondsRegexSource}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        secondsRegexSource = `${secondsRegexSource}(\\\\.\\\\d+)?`;\n    }\n    const secondsQuantifier = args.precision ? \"+\" : \"?\"; // require seconds if precision is nonzero\n    return `([01]\\\\d|2[0-3]):[0-5]\\\\d(:${secondsRegexSource})${secondsQuantifier}`;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nfunction datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n        return false;\n    try {\n        const [header] = jwt.split(\".\");\n        // Convert base64url to base64\n        const base64 = header\n            .replace(/-/g, \"+\")\n            .replace(/_/g, \"/\")\n            .padEnd(header.length + ((4 - (header.length % 4)) % 4), \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null)\n            return false;\n        if (!decoded.typ || !decoded.alg)\n            return false;\n        if (alg && decoded.alg !== alg)\n            return false;\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"nanoid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"duration\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"jwt\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cidr\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ...errorUtil.errToObj(message),\n        });\n    }\n    jwt(options) {\n        return this._addCheck({ kind: \"jwt\", ...errorUtil.errToObj(options) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    cidr(options) {\n        return this._addCheck({ kind: \"cidr\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        var _a, _b;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */\n    nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" ||\n            (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" ||\n                ch.kind === \"int\" ||\n                ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            }\n            catch (_a) {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.bigint,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return (this._cached = { shape, keys });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever &&\n            this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        var _a, _b, _c, _d;\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key) => {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util\n            .objectKeys(a)\n            .filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date &&\n        bType === ZodParsedType.date &&\n        +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function (...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args\n                    .parseAsync(args, params)\n                    .catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args\n                ? args\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\").has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\n_ZodEnum_cache = new WeakMap();\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodNativeEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string &&\n            ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\").has(input.data)) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\n_ZodNativeEnum_cache = new WeakMap();\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise &&\n            ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise\n            ? ctx.data\n            : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return INVALID;\n                    if (result.status === \"dirty\")\n                        return DIRTY(result.value);\n                    if (status.value === \"dirty\")\n                        return DIRTY(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return INVALID;\n                if (result.status === \"dirty\")\n                    return DIRTY(result.value);\n                if (status.value === \"dirty\")\n                    return DIRTY(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((base) => {\n                    if (!isValid(base))\n                        return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\"\n            ? params.default\n            : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if (isValid(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return isAsync(result)\n            ? result.then((data) => freeze(data))\n            : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\n////////////////////////////////////////\n////////////////////////////////////////\n//////////                    //////////\n//////////      z.custom      //////////\n//////////                    //////////\n////////////////////////////////////////\n////////////////////////////////////////\nfunction cleanParams(params, data) {\n    const p = typeof params === \"function\"\n        ? params(data)\n        : typeof params === \"string\"\n            ? { message: params }\n            : params;\n    const p2 = typeof p === \"string\" ? { message: p } : p;\n    return p2;\n}\nfunction custom(check, _params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            var _a, _b;\n            const r = check(data);\n            if (r instanceof Promise) {\n                return r.then((r) => {\n                    var _a, _b;\n                    if (!r) {\n                        const params = cleanParams(_params, data);\n                        const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                        ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n                    }\n                });\n            }\n            if (!r) {\n                const params = cleanParams(_params, data);\n                const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n            }\n            return;\n        });\n    return ZodAny.create();\n}\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nconst NEVER = INVALID;\n\nvar z = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () { return util; },\n    get objectUtil () { return objectUtil; },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    datetimeRegex: datetimeRegex,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    ZodReadonly: ZodReadonly,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    'enum': enumType,\n    'function': functionType,\n    'instanceof': instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    'null': nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    'undefined': undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    'void': voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\nexport { BRAND, DIRTY, EMPTY_PATH, INVALID, NEVER, OK, ParseStatus, ZodType as Schema, ZodAny, ZodArray, ZodBigInt, ZodBoolean, ZodBranded, ZodCatch, ZodDate, ZodDefault, ZodDiscriminatedUnion, ZodEffects, ZodEnum, ZodError, ZodFirstPartyTypeKind, ZodFunction, ZodIntersection, ZodIssueCode, ZodLazy, ZodLiteral, ZodMap, ZodNaN, ZodNativeEnum, ZodNever, ZodNull, ZodNullable, ZodNumber, ZodObject, ZodOptional, ZodParsedType, ZodPipeline, ZodPromise, ZodReadonly, ZodRecord, ZodType as ZodSchema, ZodSet, ZodString, ZodSymbol, ZodEffects as ZodTransformer, ZodTuple, ZodType, ZodUndefined, ZodUnion, ZodUnknown, ZodVoid, addIssueToContext, anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, coerce, custom, dateType as date, datetimeRegex, z as default, errorMap as defaultErrorMap, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, getErrorMap, getParsedType, instanceOfType as instanceof, intersectionType as intersection, isAborted, isAsync, isDirty, isValid, late, lazyType as lazy, literalType as literal, makeIssue, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, objectUtil, oboolean, onumber, optionalType as optional, ostring, pipelineType as pipeline, preprocessType as preprocess, promiseType as promise, quotelessJson, recordType as record, setType as set, setErrorMap, strictObjectType as strictObject, stringType as string, symbolType as symbol, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, util, voidType as void, z };\n", "// src/index.ts\nimport { Hono } from \"./hono.js\";\nexport {\n  Hono\n};\n", "// src/hono.ts\nimport { HonoBase } from \"./hono-base.js\";\nimport { RegExpRouter } from \"./router/reg-exp-router/index.js\";\nimport { SmartRouter } from \"./router/smart-router/index.js\";\nimport { TrieRouter } from \"./router/trie-router/index.js\";\nvar Hono = class extends HonoBase {\n  constructor(options = {}) {\n    super(options);\n    this.router = options.router ?? new SmartRouter({\n      routers: [new RegExpRouter(), new TrieRouter()]\n    });\n  }\n};\nexport {\n  Hono\n};\n", "// src/hono-base.ts\nimport { compose } from \"./compose.js\";\nimport { Context } from \"./context.js\";\nimport { METHODS, METHOD_NAME_ALL, METHOD_NAME_ALL_LOWERCASE } from \"./router.js\";\nimport { COMPOSED_HANDLER } from \"./utils/constants.js\";\nimport { getPath, getPathNoStrict, mergePath } from \"./utils/url.js\";\nvar notFoundHandler = (c) => {\n  return c.text(\"404 Not Found\", 404);\n};\nvar errorHandler = (err, c) => {\n  if (\"getResponse\" in err) {\n    return err.getResponse();\n  }\n  console.error(err);\n  return c.text(\"Internal Server Error\", 500);\n};\nvar Hono = class {\n  get;\n  post;\n  put;\n  delete;\n  options;\n  patch;\n  all;\n  on;\n  use;\n  router;\n  getPath;\n  _basePath = \"/\";\n  #path = \"/\";\n  routes = [];\n  constructor(options = {}) {\n    const allMethods = [...METHODS, METHOD_NAME_ALL_LOWERCASE];\n    allMethods.forEach((method) => {\n      this[method] = (args1, ...args) => {\n        if (typeof args1 === \"string\") {\n          this.#path = args1;\n        } else {\n          this.#addRoute(method, this.#path, args1);\n        }\n        args.forEach((handler) => {\n          this.#addRoute(method, this.#path, handler);\n        });\n        return this;\n      };\n    });\n    this.on = (method, path, ...handlers) => {\n      for (const p of [path].flat()) {\n        this.#path = p;\n        for (const m of [method].flat()) {\n          handlers.map((handler) => {\n            this.#addRoute(m.toUpperCase(), this.#path, handler);\n          });\n        }\n      }\n      return this;\n    };\n    this.use = (arg1, ...handlers) => {\n      if (typeof arg1 === \"string\") {\n        this.#path = arg1;\n      } else {\n        this.#path = \"*\";\n        handlers.unshift(arg1);\n      }\n      handlers.forEach((handler) => {\n        this.#addRoute(METHOD_NAME_ALL, this.#path, handler);\n      });\n      return this;\n    };\n    const { strict, ...optionsWithoutStrict } = options;\n    Object.assign(this, optionsWithoutStrict);\n    this.getPath = strict ?? true ? options.getPath ?? getPath : getPathNoStrict;\n  }\n  #clone() {\n    const clone = new Hono({\n      router: this.router,\n      getPath: this.getPath\n    });\n    clone.routes = this.routes;\n    return clone;\n  }\n  #notFoundHandler = notFoundHandler;\n  errorHandler = errorHandler;\n  route(path, app) {\n    const subApp = this.basePath(path);\n    app.routes.map((r) => {\n      let handler;\n      if (app.errorHandler === errorHandler) {\n        handler = r.handler;\n      } else {\n        handler = async (c, next) => (await compose([], app.errorHandler)(c, () => r.handler(c, next))).res;\n        handler[COMPOSED_HANDLER] = r.handler;\n      }\n      subApp.#addRoute(r.method, r.path, handler);\n    });\n    return this;\n  }\n  basePath(path) {\n    const subApp = this.#clone();\n    subApp._basePath = mergePath(this._basePath, path);\n    return subApp;\n  }\n  onError = (handler) => {\n    this.errorHandler = handler;\n    return this;\n  };\n  notFound = (handler) => {\n    this.#notFoundHandler = handler;\n    return this;\n  };\n  mount(path, applicationHandler, options) {\n    let replaceRequest;\n    let optionHandler;\n    if (options) {\n      if (typeof options === \"function\") {\n        optionHandler = options;\n      } else {\n        optionHandler = options.optionHandler;\n        if (options.replaceRequest === false) {\n          replaceRequest = (request) => request;\n        } else {\n          replaceRequest = options.replaceRequest;\n        }\n      }\n    }\n    const getOptions = optionHandler ? (c) => {\n      const options2 = optionHandler(c);\n      return Array.isArray(options2) ? options2 : [options2];\n    } : (c) => {\n      let executionContext = void 0;\n      try {\n        executionContext = c.executionCtx;\n      } catch {\n      }\n      return [c.env, executionContext];\n    };\n    replaceRequest ||= (() => {\n      const mergedPath = mergePath(this._basePath, path);\n      const pathPrefixLength = mergedPath === \"/\" ? 0 : mergedPath.length;\n      return (request) => {\n        const url = new URL(request.url);\n        url.pathname = url.pathname.slice(pathPrefixLength) || \"/\";\n        return new Request(url, request);\n      };\n    })();\n    const handler = async (c, next) => {\n      const res = await applicationHandler(replaceRequest(c.req.raw), ...getOptions(c));\n      if (res) {\n        return res;\n      }\n      await next();\n    };\n    this.#addRoute(METHOD_NAME_ALL, mergePath(path, \"*\"), handler);\n    return this;\n  }\n  #addRoute(method, path, handler) {\n    method = method.toUpperCase();\n    path = mergePath(this._basePath, path);\n    const r = { path, method, handler };\n    this.router.add(method, path, [handler, r]);\n    this.routes.push(r);\n  }\n  #handleError(err, c) {\n    if (err instanceof Error) {\n      return this.errorHandler(err, c);\n    }\n    throw err;\n  }\n  #dispatch(request, executionCtx, env, method) {\n    if (method === \"HEAD\") {\n      return (async () => new Response(null, await this.#dispatch(request, executionCtx, env, \"GET\")))();\n    }\n    const path = this.getPath(request, { env });\n    const matchResult = this.router.match(method, path);\n    const c = new Context(request, {\n      path,\n      matchResult,\n      env,\n      executionCtx,\n      notFoundHandler: this.#notFoundHandler\n    });\n    if (matchResult[0].length === 1) {\n      let res;\n      try {\n        res = matchResult[0][0][0][0](c, async () => {\n          c.res = await this.#notFoundHandler(c);\n        });\n      } catch (err) {\n        return this.#handleError(err, c);\n      }\n      return res instanceof Promise ? res.then(\n        (resolved) => resolved || (c.finalized ? c.res : this.#notFoundHandler(c))\n      ).catch((err) => this.#handleError(err, c)) : res ?? this.#notFoundHandler(c);\n    }\n    const composed = compose(matchResult[0], this.errorHandler, this.#notFoundHandler);\n    return (async () => {\n      try {\n        const context = await composed(c);\n        if (!context.finalized) {\n          throw new Error(\n            \"Context is not finalized. Did you forget to return a Response object or `await next()`?\"\n          );\n        }\n        return context.res;\n      } catch (err) {\n        return this.#handleError(err, c);\n      }\n    })();\n  }\n  fetch = (request, ...rest) => {\n    return this.#dispatch(request, rest[1], rest[0], request.method);\n  };\n  request = (input, requestInit, Env, executionCtx) => {\n    if (input instanceof Request) {\n      return this.fetch(requestInit ? new Request(input, requestInit) : input, Env, executionCtx);\n    }\n    input = input.toString();\n    return this.fetch(\n      new Request(\n        /^https?:\\/\\//.test(input) ? input : `http://localhost${mergePath(\"/\", input)}`,\n        requestInit\n      ),\n      Env,\n      executionCtx\n    );\n  };\n  fire = () => {\n    addEventListener(\"fetch\", (event) => {\n      event.respondWith(this.#dispatch(event.request, event, void 0, event.request.method));\n    });\n  };\n};\nexport {\n  Hono as HonoBase\n};\n", "// src/compose.ts\nvar compose = (middleware, onError, onNotFound) => {\n  return (context, next) => {\n    let index = -1;\n    return dispatch(0);\n    async function dispatch(i) {\n      if (i <= index) {\n        throw new Error(\"next() called multiple times\");\n      }\n      index = i;\n      let res;\n      let isError = false;\n      let handler;\n      if (middleware[i]) {\n        handler = middleware[i][0][0];\n        context.req.routeIndex = i;\n      } else {\n        handler = i === middleware.length && next || void 0;\n      }\n      if (handler) {\n        try {\n          res = await handler(context, () => dispatch(i + 1));\n        } catch (err) {\n          if (err instanceof Error && onError) {\n            context.error = err;\n            res = await onError(err, context);\n            isError = true;\n          } else {\n            throw err;\n          }\n        }\n      } else {\n        if (context.finalized === false && onNotFound) {\n          res = await onNotFound(context);\n        }\n      }\n      if (res && (context.finalized === false || isError)) {\n        context.res = res;\n      }\n      return context;\n    }\n  };\n};\nexport {\n  compose\n};\n", "// src/context.ts\nimport { HonoRequest } from \"./request.js\";\nimport { HtmlEscapedCallbackPhase, resolveCallback } from \"./utils/html.js\";\nvar TEXT_PLAIN = \"text/plain; charset=UTF-8\";\nvar setHeaders = (headers, map = {}) => {\n  for (const key of Object.keys(map)) {\n    headers.set(key, map[key]);\n  }\n  return headers;\n};\nvar Context = class {\n  #rawRequest;\n  #req;\n  env = {};\n  #var;\n  finalized = false;\n  error;\n  #status = 200;\n  #executionCtx;\n  #headers;\n  #preparedHeaders;\n  #res;\n  #isFresh = true;\n  #layout;\n  #renderer;\n  #notFoundHandler;\n  #matchResult;\n  #path;\n  constructor(req, options) {\n    this.#rawRequest = req;\n    if (options) {\n      this.#executionCtx = options.executionCtx;\n      this.env = options.env;\n      this.#notFoundHandler = options.notFoundHandler;\n      this.#path = options.path;\n      this.#matchResult = options.matchResult;\n    }\n  }\n  get req() {\n    this.#req ??= new HonoRequest(this.#rawRequest, this.#path, this.#matchResult);\n    return this.#req;\n  }\n  get event() {\n    if (this.#executionCtx && \"respondWith\" in this.#executionCtx) {\n      return this.#executionCtx;\n    } else {\n      throw Error(\"This context has no FetchEvent\");\n    }\n  }\n  get executionCtx() {\n    if (this.#executionCtx) {\n      return this.#executionCtx;\n    } else {\n      throw Error(\"This context has no ExecutionContext\");\n    }\n  }\n  get res() {\n    this.#isFresh = false;\n    return this.#res ||= new Response(\"404 Not Found\", { status: 404 });\n  }\n  set res(_res) {\n    this.#isFresh = false;\n    if (this.#res && _res) {\n      _res = new Response(_res.body, _res);\n      for (const [k, v] of this.#res.headers.entries()) {\n        if (k === \"content-type\") {\n          continue;\n        }\n        if (k === \"set-cookie\") {\n          const cookies = this.#res.headers.getSetCookie();\n          _res.headers.delete(\"set-cookie\");\n          for (const cookie of cookies) {\n            _res.headers.append(\"set-cookie\", cookie);\n          }\n        } else {\n          _res.headers.set(k, v);\n        }\n      }\n    }\n    this.#res = _res;\n    this.finalized = true;\n  }\n  render = (...args) => {\n    this.#renderer ??= (content) => this.html(content);\n    return this.#renderer(...args);\n  };\n  setLayout = (layout) => this.#layout = layout;\n  getLayout = () => this.#layout;\n  setRenderer = (renderer) => {\n    this.#renderer = renderer;\n  };\n  header = (name, value, options) => {\n    if (this.finalized) {\n      this.#res = new Response(this.#res.body, this.#res);\n    }\n    if (value === void 0) {\n      if (this.#headers) {\n        this.#headers.delete(name);\n      } else if (this.#preparedHeaders) {\n        delete this.#preparedHeaders[name.toLocaleLowerCase()];\n      }\n      if (this.finalized) {\n        this.res.headers.delete(name);\n      }\n      return;\n    }\n    if (options?.append) {\n      if (!this.#headers) {\n        this.#isFresh = false;\n        this.#headers = new Headers(this.#preparedHeaders);\n        this.#preparedHeaders = {};\n      }\n      this.#headers.append(name, value);\n    } else {\n      if (this.#headers) {\n        this.#headers.set(name, value);\n      } else {\n        this.#preparedHeaders ??= {};\n        this.#preparedHeaders[name.toLowerCase()] = value;\n      }\n    }\n    if (this.finalized) {\n      if (options?.append) {\n        this.res.headers.append(name, value);\n      } else {\n        this.res.headers.set(name, value);\n      }\n    }\n  };\n  status = (status) => {\n    this.#isFresh = false;\n    this.#status = status;\n  };\n  set = (key, value) => {\n    this.#var ??= /* @__PURE__ */ new Map();\n    this.#var.set(key, value);\n  };\n  get = (key) => {\n    return this.#var ? this.#var.get(key) : void 0;\n  };\n  get var() {\n    if (!this.#var) {\n      return {};\n    }\n    return Object.fromEntries(this.#var);\n  }\n  #newResponse(data, arg, headers) {\n    if (this.#isFresh && !headers && !arg && this.#status === 200) {\n      return new Response(data, {\n        headers: this.#preparedHeaders\n      });\n    }\n    if (arg && typeof arg !== \"number\") {\n      const header = new Headers(arg.headers);\n      if (this.#headers) {\n        this.#headers.forEach((v, k) => {\n          if (k === \"set-cookie\") {\n            header.append(k, v);\n          } else {\n            header.set(k, v);\n          }\n        });\n      }\n      const headers2 = setHeaders(header, this.#preparedHeaders);\n      return new Response(data, {\n        headers: headers2,\n        status: arg.status ?? this.#status\n      });\n    }\n    const status = typeof arg === \"number\" ? arg : this.#status;\n    this.#preparedHeaders ??= {};\n    this.#headers ??= new Headers();\n    setHeaders(this.#headers, this.#preparedHeaders);\n    if (this.#res) {\n      this.#res.headers.forEach((v, k) => {\n        if (k === \"set-cookie\") {\n          this.#headers?.append(k, v);\n        } else {\n          this.#headers?.set(k, v);\n        }\n      });\n      setHeaders(this.#headers, this.#preparedHeaders);\n    }\n    headers ??= {};\n    for (const [k, v] of Object.entries(headers)) {\n      if (typeof v === \"string\") {\n        this.#headers.set(k, v);\n      } else {\n        this.#headers.delete(k);\n        for (const v2 of v) {\n          this.#headers.append(k, v2);\n        }\n      }\n    }\n    return new Response(data, {\n      status,\n      headers: this.#headers\n    });\n  }\n  newResponse = (...args) => this.#newResponse(...args);\n  body = (data, arg, headers) => {\n    return typeof arg === \"number\" ? this.#newResponse(data, arg, headers) : this.#newResponse(data, arg);\n  };\n  text = (text, arg, headers) => {\n    if (!this.#preparedHeaders) {\n      if (this.#isFresh && !headers && !arg) {\n        return new Response(text);\n      }\n      this.#preparedHeaders = {};\n    }\n    this.#preparedHeaders[\"content-type\"] = TEXT_PLAIN;\n    if (typeof arg === \"number\") {\n      return this.#newResponse(text, arg, headers);\n    }\n    return this.#newResponse(text, arg);\n  };\n  json = (object, arg, headers) => {\n    const body = JSON.stringify(object);\n    this.#preparedHeaders ??= {};\n    this.#preparedHeaders[\"content-type\"] = \"application/json\";\n    return typeof arg === \"number\" ? this.#newResponse(body, arg, headers) : this.#newResponse(body, arg);\n  };\n  html = (html, arg, headers) => {\n    this.#preparedHeaders ??= {};\n    this.#preparedHeaders[\"content-type\"] = \"text/html; charset=UTF-8\";\n    if (typeof html === \"object\") {\n      return resolveCallback(html, HtmlEscapedCallbackPhase.Stringify, false, {}).then((html2) => {\n        return typeof arg === \"number\" ? this.#newResponse(html2, arg, headers) : this.#newResponse(html2, arg);\n      });\n    }\n    return typeof arg === \"number\" ? this.#newResponse(html, arg, headers) : this.#newResponse(html, arg);\n  };\n  redirect = (location, status) => {\n    this.#headers ??= new Headers();\n    this.#headers.set(\"Location\", String(location));\n    return this.newResponse(null, status ?? 302);\n  };\n  notFound = () => {\n    this.#notFoundHandler ??= () => new Response();\n    return this.#notFoundHandler(this);\n  };\n};\nexport {\n  Context,\n  TEXT_PLAIN\n};\n", "// src/request.ts\nimport { parseBody } from \"./utils/body.js\";\nimport { decodeURIComponent_, getQueryParam, getQueryParams, tryDecode } from \"./utils/url.js\";\nvar tryDecodeURIComponent = (str) => tryDecode(str, decodeURIComponent_);\nvar HonoRequest = class {\n  raw;\n  #validatedData;\n  #matchResult;\n  routeIndex = 0;\n  path;\n  bodyCache = {};\n  constructor(request, path = \"/\", matchResult = [[]]) {\n    this.raw = request;\n    this.path = path;\n    this.#matchResult = matchResult;\n    this.#validatedData = {};\n  }\n  param(key) {\n    return key ? this.#getDecodedParam(key) : this.#getAllDecodedParams();\n  }\n  #getDecodedParam(key) {\n    const paramKey = this.#matchResult[0][this.routeIndex][1][key];\n    const param = this.#getParamValue(paramKey);\n    return param ? /\\%/.test(param) ? tryDecodeURIComponent(param) : param : void 0;\n  }\n  #getAllDecodedParams() {\n    const decoded = {};\n    const keys = Object.keys(this.#matchResult[0][this.routeIndex][1]);\n    for (const key of keys) {\n      const value = this.#getParamValue(this.#matchResult[0][this.routeIndex][1][key]);\n      if (value && typeof value === \"string\") {\n        decoded[key] = /\\%/.test(value) ? tryDecodeURIComponent(value) : value;\n      }\n    }\n    return decoded;\n  }\n  #getParamValue(paramKey) {\n    return this.#matchResult[1] ? this.#matchResult[1][paramKey] : paramKey;\n  }\n  query(key) {\n    return getQueryParam(this.url, key);\n  }\n  queries(key) {\n    return getQueryParams(this.url, key);\n  }\n  header(name) {\n    if (name) {\n      return this.raw.headers.get(name) ?? void 0;\n    }\n    const headerData = {};\n    this.raw.headers.forEach((value, key) => {\n      headerData[key] = value;\n    });\n    return headerData;\n  }\n  async parseBody(options) {\n    return this.bodyCache.parsedBody ??= await parseBody(this, options);\n  }\n  #cachedBody = (key) => {\n    const { bodyCache, raw } = this;\n    const cachedBody = bodyCache[key];\n    if (cachedBody) {\n      return cachedBody;\n    }\n    const anyCachedKey = Object.keys(bodyCache)[0];\n    if (anyCachedKey) {\n      return bodyCache[anyCachedKey].then((body) => {\n        if (anyCachedKey === \"json\") {\n          body = JSON.stringify(body);\n        }\n        return new Response(body)[key]();\n      });\n    }\n    return bodyCache[key] = raw[key]();\n  };\n  json() {\n    return this.#cachedBody(\"json\");\n  }\n  text() {\n    return this.#cachedBody(\"text\");\n  }\n  arrayBuffer() {\n    return this.#cachedBody(\"arrayBuffer\");\n  }\n  blob() {\n    return this.#cachedBody(\"blob\");\n  }\n  formData() {\n    return this.#cachedBody(\"formData\");\n  }\n  addValidatedData(target, data) {\n    this.#validatedData[target] = data;\n  }\n  valid(target) {\n    return this.#validatedData[target];\n  }\n  get url() {\n    return this.raw.url;\n  }\n  get method() {\n    return this.raw.method;\n  }\n  get matchedRoutes() {\n    return this.#matchResult[0].map(([[, route]]) => route);\n  }\n  get routePath() {\n    return this.#matchResult[0].map(([[, route]]) => route)[this.routeIndex].path;\n  }\n};\nexport {\n  HonoRequest\n};\n", "// src/utils/body.ts\nimport { HonoRequest } from \"../request.js\";\nvar parseBody = async (request, options = /* @__PURE__ */ Object.create(null)) => {\n  const { all = false, dot = false } = options;\n  const headers = request instanceof HonoRequest ? request.raw.headers : request.headers;\n  const contentType = headers.get(\"Content-Type\");\n  if (contentType?.startsWith(\"multipart/form-data\") || contentType?.startsWith(\"application/x-www-form-urlencoded\")) {\n    return parseFormData(request, { all, dot });\n  }\n  return {};\n};\nasync function parseFormData(request, options) {\n  const formData = await request.formData();\n  if (formData) {\n    return convertFormDataToBodyData(formData, options);\n  }\n  return {};\n}\nfunction convertFormDataToBodyData(formData, options) {\n  const form = /* @__PURE__ */ Object.create(null);\n  formData.forEach((value, key) => {\n    const shouldParseAllValues = options.all || key.endsWith(\"[]\");\n    if (!shouldParseAllValues) {\n      form[key] = value;\n    } else {\n      handleParsingAllValues(form, key, value);\n    }\n  });\n  if (options.dot) {\n    Object.entries(form).forEach(([key, value]) => {\n      const shouldParseDotValues = key.includes(\".\");\n      if (shouldParseDotValues) {\n        handleParsingNestedValues(form, key, value);\n        delete form[key];\n      }\n    });\n  }\n  return form;\n}\nvar handleParsingAllValues = (form, key, value) => {\n  if (form[key] !== void 0) {\n    if (Array.isArray(form[key])) {\n      ;\n      form[key].push(value);\n    } else {\n      form[key] = [form[key], value];\n    }\n  } else {\n    form[key] = value;\n  }\n};\nvar handleParsingNestedValues = (form, key, value) => {\n  let nestedForm = form;\n  const keys = key.split(\".\");\n  keys.forEach((key2, index) => {\n    if (index === keys.length - 1) {\n      nestedForm[key2] = value;\n    } else {\n      if (!nestedForm[key2] || typeof nestedForm[key2] !== \"object\" || Array.isArray(nestedForm[key2]) || nestedForm[key2] instanceof File) {\n        nestedForm[key2] = /* @__PURE__ */ Object.create(null);\n      }\n      nestedForm = nestedForm[key2];\n    }\n  });\n};\nexport {\n  parseBody\n};\n", "// src/utils/html.ts\nvar HtmlEscapedCallbackPhase = {\n  Stringify: 1,\n  BeforeStream: 2,\n  Stream: 3\n};\nvar raw = (value, callbacks) => {\n  const escapedString = new String(value);\n  escapedString.isEscaped = true;\n  escapedString.callbacks = callbacks;\n  return escapedString;\n};\nvar escapeRe = /[&<>'\"]/;\nvar stringBufferToString = async (buffer, callbacks) => {\n  let str = \"\";\n  callbacks ||= [];\n  const resolvedBuffer = await Promise.all(buffer);\n  for (let i = resolvedBuffer.length - 1; ; i--) {\n    str += resolvedBuffer[i];\n    i--;\n    if (i < 0) {\n      break;\n    }\n    let r = resolvedBuffer[i];\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    const isEscaped = r.isEscaped;\n    r = await (typeof r === \"object\" ? r.toString() : r);\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    if (r.isEscaped ?? isEscaped) {\n      str += r;\n    } else {\n      const buf = [str];\n      escapeToBuffer(r, buf);\n      str = buf[0];\n    }\n  }\n  return raw(str, callbacks);\n};\nvar escapeToBuffer = (str, buffer) => {\n  const match = str.search(escapeRe);\n  if (match === -1) {\n    buffer[0] += str;\n    return;\n  }\n  let escape;\n  let index;\n  let lastIndex = 0;\n  for (index = match; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        escape = \"&quot;\";\n        break;\n      case 39:\n        escape = \"&#39;\";\n        break;\n      case 38:\n        escape = \"&amp;\";\n        break;\n      case 60:\n        escape = \"&lt;\";\n        break;\n      case 62:\n        escape = \"&gt;\";\n        break;\n      default:\n        continue;\n    }\n    buffer[0] += str.substring(lastIndex, index) + escape;\n    lastIndex = index + 1;\n  }\n  buffer[0] += str.substring(lastIndex, index);\n};\nvar resolveCallbackSync = (str) => {\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return str;\n  }\n  const buffer = [str];\n  const context = {};\n  callbacks.forEach((c) => c({ phase: HtmlEscapedCallbackPhase.Stringify, buffer, context }));\n  return buffer[0];\n};\nvar resolveCallback = async (str, phase, preserveCallbacks, context, buffer) => {\n  if (typeof str === \"object\" && !(str instanceof String)) {\n    if (!(str instanceof Promise)) {\n      str = str.toString();\n    }\n    if (str instanceof Promise) {\n      str = await str;\n    }\n  }\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return Promise.resolve(str);\n  }\n  if (buffer) {\n    buffer[0] += str;\n  } else {\n    buffer = [str];\n  }\n  const resStr = Promise.all(callbacks.map((c) => c({ phase, buffer, context }))).then(\n    (res) => Promise.all(\n      res.filter(Boolean).map((str2) => resolveCallback(str2, phase, false, context, buffer))\n    ).then(() => buffer[0])\n  );\n  if (preserveCallbacks) {\n    return raw(await resStr, callbacks);\n  } else {\n    return resStr;\n  }\n};\nexport {\n  HtmlEscapedCallbackPhase,\n  escapeToBuffer,\n  raw,\n  resolveCallback,\n  resolveCallbackSync,\n  stringBufferToString\n};\n", "// src/router.ts\nvar METHOD_NAME_ALL = \"ALL\";\nvar METHOD_NAME_ALL_LOWERCASE = \"all\";\nvar METHODS = [\"get\", \"post\", \"put\", \"delete\", \"options\", \"patch\"];\nvar MESSAGE_MATCHER_IS_ALREADY_BUILT = \"Can not add a route since the matcher is already built.\";\nvar UnsupportedPathError = class extends Error {\n};\nexport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHODS,\n  METHOD_NAME_ALL,\n  METHOD_NAME_ALL_LOWERCASE,\n  UnsupportedPathError\n};\n", "// src/utils/constants.ts\nvar COMPOSED_HANDLER = \"__COMPOSED_HANDLER\";\nexport {\n  COMPOSED_HANDLER\n};\n", "// src/router/reg-exp-router/index.ts\nimport { RegExpRouter } from \"./router.js\";\nexport {\n  RegExpRouter\n};\n", "// src/router/reg-exp-router/router.ts\nimport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHOD_NAME_ALL,\n  UnsupportedPathError\n} from \"../../router.js\";\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { PATH_ERROR } from \"./node.js\";\nimport { Trie } from \"./trie.js\";\nvar emptyParam = [];\nvar nullMatcher = [/^$/, [], /* @__PURE__ */ Object.create(null)];\nvar wildcardRegExpCache = /* @__PURE__ */ Object.create(null);\nfunction buildWildcardRegExp(path) {\n  return wildcardRegExpCache[path] ??= new RegExp(\n    path === \"*\" ? \"\" : `^${path.replace(\n      /\\/\\*$|([.\\\\+*[^\\]$()])/g,\n      (_, metaChar) => metaChar ? `\\\\${metaChar}` : \"(?:|/.*)\"\n    )}$`\n  );\n}\nfunction clearWildcardRegExpCache() {\n  wildcardRegExpCache = /* @__PURE__ */ Object.create(null);\n}\nfunction buildMatcherFromPreprocessedRoutes(routes) {\n  const trie = new Trie();\n  const handlerData = [];\n  if (routes.length === 0) {\n    return nullMatcher;\n  }\n  const routesWithStaticPathFlag = routes.map(\n    (route) => [!/\\*|\\/:/.test(route[0]), ...route]\n  ).sort(\n    ([isStaticA, pathA], [isStaticB, pathB]) => isStaticA ? 1 : isStaticB ? -1 : pathA.length - pathB.length\n  );\n  const staticMap = /* @__PURE__ */ Object.create(null);\n  for (let i = 0, j = -1, len = routesWithStaticPathFlag.length; i < len; i++) {\n    const [pathErrorCheckOnly, path, handlers] = routesWithStaticPathFlag[i];\n    if (pathErrorCheckOnly) {\n      staticMap[path] = [handlers.map(([h]) => [h, /* @__PURE__ */ Object.create(null)]), emptyParam];\n    } else {\n      j++;\n    }\n    let paramAssoc;\n    try {\n      paramAssoc = trie.insert(path, j, pathErrorCheckOnly);\n    } catch (e) {\n      throw e === PATH_ERROR ? new UnsupportedPathError(path) : e;\n    }\n    if (pathErrorCheckOnly) {\n      continue;\n    }\n    handlerData[j] = handlers.map(([h, paramCount]) => {\n      const paramIndexMap = /* @__PURE__ */ Object.create(null);\n      paramCount -= 1;\n      for (; paramCount >= 0; paramCount--) {\n        const [key, value] = paramAssoc[paramCount];\n        paramIndexMap[key] = value;\n      }\n      return [h, paramIndexMap];\n    });\n  }\n  const [regexp, indexReplacementMap, paramReplacementMap] = trie.buildRegExp();\n  for (let i = 0, len = handlerData.length; i < len; i++) {\n    for (let j = 0, len2 = handlerData[i].length; j < len2; j++) {\n      const map = handlerData[i][j]?.[1];\n      if (!map) {\n        continue;\n      }\n      const keys = Object.keys(map);\n      for (let k = 0, len3 = keys.length; k < len3; k++) {\n        map[keys[k]] = paramReplacementMap[map[keys[k]]];\n      }\n    }\n  }\n  const handlerMap = [];\n  for (const i in indexReplacementMap) {\n    handlerMap[i] = handlerData[indexReplacementMap[i]];\n  }\n  return [regexp, handlerMap, staticMap];\n}\nfunction findMiddleware(middleware, path) {\n  if (!middleware) {\n    return void 0;\n  }\n  for (const k of Object.keys(middleware).sort((a, b) => b.length - a.length)) {\n    if (buildWildcardRegExp(k).test(path)) {\n      return [...middleware[k]];\n    }\n  }\n  return void 0;\n}\nvar RegExpRouter = class {\n  name = \"RegExpRouter\";\n  #middleware;\n  #routes;\n  constructor() {\n    this.#middleware = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };\n    this.#routes = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };\n  }\n  add(method, path, handler) {\n    const middleware = this.#middleware;\n    const routes = this.#routes;\n    if (!middleware || !routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    if (!middleware[method]) {\n      ;\n      [middleware, routes].forEach((handlerMap) => {\n        handlerMap[method] = /* @__PURE__ */ Object.create(null);\n        Object.keys(handlerMap[METHOD_NAME_ALL]).forEach((p) => {\n          handlerMap[method][p] = [...handlerMap[METHOD_NAME_ALL][p]];\n        });\n      });\n    }\n    if (path === \"/*\") {\n      path = \"*\";\n    }\n    const paramCount = (path.match(/\\/:/g) || []).length;\n    if (/\\*$/.test(path)) {\n      const re = buildWildcardRegExp(path);\n      if (method === METHOD_NAME_ALL) {\n        Object.keys(middleware).forEach((m) => {\n          middleware[m][path] ||= findMiddleware(middleware[m], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];\n        });\n      } else {\n        middleware[method][path] ||= findMiddleware(middleware[method], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];\n      }\n      Object.keys(middleware).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(middleware[m]).forEach((p) => {\n            re.test(p) && middleware[m][p].push([handler, paramCount]);\n          });\n        }\n      });\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(routes[m]).forEach(\n            (p) => re.test(p) && routes[m][p].push([handler, paramCount])\n          );\n        }\n      });\n      return;\n    }\n    const paths = checkOptionalParameter(path) || [path];\n    for (let i = 0, len = paths.length; i < len; i++) {\n      const path2 = paths[i];\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          routes[m][path2] ||= [\n            ...findMiddleware(middleware[m], path2) || findMiddleware(middleware[METHOD_NAME_ALL], path2) || []\n          ];\n          routes[m][path2].push([handler, paramCount - len + i + 1]);\n        }\n      });\n    }\n  }\n  match(method, path) {\n    clearWildcardRegExpCache();\n    const matchers = this.#buildAllMatchers();\n    this.match = (method2, path2) => {\n      const matcher = matchers[method2] || matchers[METHOD_NAME_ALL];\n      const staticMatch = matcher[2][path2];\n      if (staticMatch) {\n        return staticMatch;\n      }\n      const match = path2.match(matcher[0]);\n      if (!match) {\n        return [[], emptyParam];\n      }\n      const index = match.indexOf(\"\", 1);\n      return [matcher[1][index], match];\n    };\n    return this.match(method, path);\n  }\n  #buildAllMatchers() {\n    const matchers = /* @__PURE__ */ Object.create(null);\n    Object.keys(this.#routes).concat(Object.keys(this.#middleware)).forEach((method) => {\n      matchers[method] ||= this.#buildMatcher(method);\n    });\n    this.#middleware = this.#routes = void 0;\n    return matchers;\n  }\n  #buildMatcher(method) {\n    const routes = [];\n    let hasOwnRoute = method === METHOD_NAME_ALL;\n    [this.#middleware, this.#routes].forEach((r) => {\n      const ownRoute = r[method] ? Object.keys(r[method]).map((path) => [path, r[method][path]]) : [];\n      if (ownRoute.length !== 0) {\n        hasOwnRoute ||= true;\n        routes.push(...ownRoute);\n      } else if (method !== METHOD_NAME_ALL) {\n        routes.push(\n          ...Object.keys(r[METHOD_NAME_ALL]).map((path) => [path, r[METHOD_NAME_ALL][path]])\n        );\n      }\n    });\n    if (!hasOwnRoute) {\n      return null;\n    } else {\n      return buildMatcherFromPreprocessedRoutes(routes);\n    }\n  }\n};\nexport {\n  RegExpRouter\n};\n", "// src/router/reg-exp-router/node.ts\nvar LABEL_REG_EXP_STR = \"[^/]+\";\nvar ONLY_WILDCARD_REG_EXP_STR = \".*\";\nvar TAIL_WILDCARD_REG_EXP_STR = \"(?:|/.*)\";\nvar PATH_ERROR = Symbol();\nvar regExpMetaChars = new Set(\".\\\\+*[^]$()\");\nfunction compareKey(a, b) {\n  if (a.length === 1) {\n    return b.length === 1 ? a < b ? -1 : 1 : -1;\n  }\n  if (b.length === 1) {\n    return 1;\n  }\n  if (a === ONLY_WILDCARD_REG_EXP_STR || a === TAIL_WILDCARD_REG_EXP_STR) {\n    return 1;\n  } else if (b === ONLY_WILDCARD_REG_EXP_STR || b === TAIL_WILDCARD_REG_EXP_STR) {\n    return -1;\n  }\n  if (a === LABEL_REG_EXP_STR) {\n    return 1;\n  } else if (b === LABEL_REG_EXP_STR) {\n    return -1;\n  }\n  return a.length === b.length ? a < b ? -1 : 1 : b.length - a.length;\n}\nvar Node = class {\n  #index;\n  #varIndex;\n  #children = /* @__PURE__ */ Object.create(null);\n  insert(tokens, index, paramMap, context, pathErrorCheckOnly) {\n    if (tokens.length === 0) {\n      if (this.#index !== void 0) {\n        throw PATH_ERROR;\n      }\n      if (pathErrorCheckOnly) {\n        return;\n      }\n      this.#index = index;\n      return;\n    }\n    const [token, ...restTokens] = tokens;\n    const pattern = token === \"*\" ? restTokens.length === 0 ? [\"\", \"\", ONLY_WILDCARD_REG_EXP_STR] : [\"\", \"\", LABEL_REG_EXP_STR] : token === \"/*\" ? [\"\", \"\", TAIL_WILDCARD_REG_EXP_STR] : token.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n    let node;\n    if (pattern) {\n      const name = pattern[1];\n      let regexpStr = pattern[2] || LABEL_REG_EXP_STR;\n      if (name && pattern[2]) {\n        regexpStr = regexpStr.replace(/^\\((?!\\?:)(?=[^)]+\\)$)/, \"(?:\");\n        if (/\\((?!\\?:)/.test(regexpStr)) {\n          throw PATH_ERROR;\n        }\n      }\n      node = this.#children[regexpStr];\n      if (!node) {\n        if (Object.keys(this.#children).some(\n          (k) => k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.#children[regexpStr] = new Node();\n        if (name !== \"\") {\n          node.#varIndex = context.varIndex++;\n        }\n      }\n      if (!pathErrorCheckOnly && name !== \"\") {\n        paramMap.push([name, node.#varIndex]);\n      }\n    } else {\n      node = this.#children[token];\n      if (!node) {\n        if (Object.keys(this.#children).some(\n          (k) => k.length > 1 && k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.#children[token] = new Node();\n      }\n    }\n    node.insert(restTokens, index, paramMap, context, pathErrorCheckOnly);\n  }\n  buildRegExpStr() {\n    const childKeys = Object.keys(this.#children).sort(compareKey);\n    const strList = childKeys.map((k) => {\n      const c = this.#children[k];\n      return (typeof c.#varIndex === \"number\" ? `(${k})@${c.#varIndex}` : regExpMetaChars.has(k) ? `\\\\${k}` : k) + c.buildRegExpStr();\n    });\n    if (typeof this.#index === \"number\") {\n      strList.unshift(`#${this.#index}`);\n    }\n    if (strList.length === 0) {\n      return \"\";\n    }\n    if (strList.length === 1) {\n      return strList[0];\n    }\n    return \"(?:\" + strList.join(\"|\") + \")\";\n  }\n};\nexport {\n  Node,\n  PATH_ERROR\n};\n", "// src/router/reg-exp-router/trie.ts\nimport { Node } from \"./node.js\";\nvar Trie = class {\n  #context = { varIndex: 0 };\n  #root = new Node();\n  insert(path, index, pathErrorCheckOnly) {\n    const paramAssoc = [];\n    const groups = [];\n    for (let i = 0; ; ) {\n      let replaced = false;\n      path = path.replace(/\\{[^}]+\\}/g, (m) => {\n        const mark = `@\\\\${i}`;\n        groups[i] = [mark, m];\n        i++;\n        replaced = true;\n        return mark;\n      });\n      if (!replaced) {\n        break;\n      }\n    }\n    const tokens = path.match(/(?::[^\\/]+)|(?:\\/\\*$)|./g) || [];\n    for (let i = groups.length - 1; i >= 0; i--) {\n      const [mark] = groups[i];\n      for (let j = tokens.length - 1; j >= 0; j--) {\n        if (tokens[j].indexOf(mark) !== -1) {\n          tokens[j] = tokens[j].replace(mark, groups[i][1]);\n          break;\n        }\n      }\n    }\n    this.#root.insert(tokens, index, paramAssoc, this.#context, pathErrorCheckOnly);\n    return paramAssoc;\n  }\n  buildRegExp() {\n    let regexp = this.#root.buildRegExpStr();\n    if (regexp === \"\") {\n      return [/^$/, [], []];\n    }\n    let captureIndex = 0;\n    const indexReplacementMap = [];\n    const paramReplacementMap = [];\n    regexp = regexp.replace(/#(\\d+)|@(\\d+)|\\.\\*\\$/g, (_, handlerIndex, paramIndex) => {\n      if (handlerIndex !== void 0) {\n        indexReplacementMap[++captureIndex] = Number(handlerIndex);\n        return \"$()\";\n      }\n      if (paramIndex !== void 0) {\n        paramReplacementMap[Number(paramIndex)] = ++captureIndex;\n        return \"\";\n      }\n      return \"\";\n    });\n    return [new RegExp(`^${regexp}`), indexReplacementMap, paramReplacementMap];\n  }\n};\nexport {\n  Trie\n};\n", "// src/router/smart-router/index.ts\nimport { SmartRouter } from \"./router.js\";\nexport {\n  SmartRouter\n};\n", "// src/router/smart-router/router.ts\nimport { MESSAGE_MATCHER_IS_ALREADY_BUILT, UnsupportedPathError } from \"../../router.js\";\nvar SmartRouter = class {\n  name = \"SmartRouter\";\n  #routers = [];\n  #routes = [];\n  constructor(init) {\n    this.#routers = init.routers;\n  }\n  add(method, path, handler) {\n    if (!this.#routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    this.#routes.push([method, path, handler]);\n  }\n  match(method, path) {\n    if (!this.#routes) {\n      throw new Error(\"Fatal error\");\n    }\n    const routers = this.#routers;\n    const routes = this.#routes;\n    const len = routers.length;\n    let i = 0;\n    let res;\n    for (; i < len; i++) {\n      const router = routers[i];\n      try {\n        for (let i2 = 0, len2 = routes.length; i2 < len2; i2++) {\n          router.add(...routes[i2]);\n        }\n        res = router.match(method, path);\n      } catch (e) {\n        if (e instanceof UnsupportedPathError) {\n          continue;\n        }\n        throw e;\n      }\n      this.match = router.match.bind(router);\n      this.#routers = [router];\n      this.#routes = void 0;\n      break;\n    }\n    if (i === len) {\n      throw new Error(\"Fatal error\");\n    }\n    this.name = `SmartRouter + ${this.activeRouter.name}`;\n    return res;\n  }\n  get activeRouter() {\n    if (this.#routes || this.#routers.length !== 1) {\n      throw new Error(\"No active router has been determined yet.\");\n    }\n    return this.#routers[0];\n  }\n};\nexport {\n  SmartRouter\n};\n", "// src/router/trie-router/index.ts\nimport { TrieRouter } from \"./router.js\";\nexport {\n  TrieRouter\n};\n", "// src/router/trie-router/router.ts\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { Node } from \"./node.js\";\nvar TrieRouter = class {\n  name = \"TrieRouter\";\n  #node;\n  constructor() {\n    this.#node = new Node();\n  }\n  add(method, path, handler) {\n    const results = checkOptionalParameter(path);\n    if (results) {\n      for (let i = 0, len = results.length; i < len; i++) {\n        this.#node.insert(method, results[i], handler);\n      }\n      return;\n    }\n    this.#node.insert(method, path, handler);\n  }\n  match(method, path) {\n    return this.#node.search(method, path);\n  }\n};\nexport {\n  TrieRouter\n};\n", "// src/router/trie-router/node.ts\nimport { METHOD_NAME_ALL } from \"../../router.js\";\nimport { getPattern, splitPath, splitRoutingPath } from \"../../utils/url.js\";\nvar emptyParams = /* @__PURE__ */ Object.create(null);\nvar Node = class {\n  #methods;\n  #children;\n  #patterns;\n  #order = 0;\n  #params = emptyParams;\n  constructor(method, handler, children) {\n    this.#children = children || /* @__PURE__ */ Object.create(null);\n    this.#methods = [];\n    if (method && handler) {\n      const m = /* @__PURE__ */ Object.create(null);\n      m[method] = { handler, possibleKeys: [], score: 0 };\n      this.#methods = [m];\n    }\n    this.#patterns = [];\n  }\n  insert(method, path, handler) {\n    this.#order = ++this.#order;\n    let curNode = this;\n    const parts = splitRoutingPath(path);\n    const possibleKeys = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const p = parts[i];\n      const nextP = parts[i + 1];\n      const pattern = getPattern(p, nextP);\n      const key = Array.isArray(pattern) ? pattern[0] : p;\n      if (Object.keys(curNode.#children).includes(key)) {\n        curNode = curNode.#children[key];\n        const pattern2 = getPattern(p, nextP);\n        if (pattern2) {\n          possibleKeys.push(pattern2[1]);\n        }\n        continue;\n      }\n      curNode.#children[key] = new Node();\n      if (pattern) {\n        curNode.#patterns.push(pattern);\n        possibleKeys.push(pattern[1]);\n      }\n      curNode = curNode.#children[key];\n    }\n    const m = /* @__PURE__ */ Object.create(null);\n    const handlerSet = {\n      handler,\n      possibleKeys: possibleKeys.filter((v, i, a) => a.indexOf(v) === i),\n      score: this.#order\n    };\n    m[method] = handlerSet;\n    curNode.#methods.push(m);\n    return curNode;\n  }\n  #getHandlerSets(node, method, nodeParams, params) {\n    const handlerSets = [];\n    for (let i = 0, len = node.#methods.length; i < len; i++) {\n      const m = node.#methods[i];\n      const handlerSet = m[method] || m[METHOD_NAME_ALL];\n      const processedSet = {};\n      if (handlerSet !== void 0) {\n        handlerSet.params = /* @__PURE__ */ Object.create(null);\n        handlerSets.push(handlerSet);\n        if (nodeParams !== emptyParams || params && params !== emptyParams) {\n          for (let i2 = 0, len2 = handlerSet.possibleKeys.length; i2 < len2; i2++) {\n            const key = handlerSet.possibleKeys[i2];\n            const processed = processedSet[handlerSet.score];\n            handlerSet.params[key] = params?.[key] && !processed ? params[key] : nodeParams[key] ?? params?.[key];\n            processedSet[handlerSet.score] = true;\n          }\n        }\n      }\n    }\n    return handlerSets;\n  }\n  search(method, path) {\n    const handlerSets = [];\n    this.#params = emptyParams;\n    const curNode = this;\n    let curNodes = [curNode];\n    const parts = splitPath(path);\n    const curNodesQueue = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const part = parts[i];\n      const isLast = i === len - 1;\n      const tempNodes = [];\n      for (let j = 0, len2 = curNodes.length; j < len2; j++) {\n        const node = curNodes[j];\n        const nextNode = node.#children[part];\n        if (nextNode) {\n          nextNode.#params = node.#params;\n          if (isLast) {\n            if (nextNode.#children[\"*\"]) {\n              handlerSets.push(\n                ...this.#getHandlerSets(nextNode.#children[\"*\"], method, node.#params)\n              );\n            }\n            handlerSets.push(...this.#getHandlerSets(nextNode, method, node.#params));\n          } else {\n            tempNodes.push(nextNode);\n          }\n        }\n        for (let k = 0, len3 = node.#patterns.length; k < len3; k++) {\n          const pattern = node.#patterns[k];\n          const params = node.#params === emptyParams ? {} : { ...node.#params };\n          if (pattern === \"*\") {\n            const astNode = node.#children[\"*\"];\n            if (astNode) {\n              handlerSets.push(...this.#getHandlerSets(astNode, method, node.#params));\n              astNode.#params = params;\n              tempNodes.push(astNode);\n            }\n            continue;\n          }\n          if (part === \"\") {\n            continue;\n          }\n          const [key, name, matcher] = pattern;\n          const child = node.#children[key];\n          const restPathString = parts.slice(i).join(\"/\");\n          if (matcher instanceof RegExp) {\n            const m = matcher.exec(restPathString);\n            if (m) {\n              params[name] = m[0];\n              handlerSets.push(...this.#getHandlerSets(child, method, node.#params, params));\n              if (Object.keys(child.#children).length) {\n                child.#params = params;\n                const componentCount = m[0].match(/\\//)?.length ?? 0;\n                const targetCurNodes = curNodesQueue[componentCount] ||= [];\n                targetCurNodes.push(child);\n              }\n              continue;\n            }\n          }\n          if (matcher === true || matcher.test(part)) {\n            params[name] = part;\n            if (isLast) {\n              handlerSets.push(...this.#getHandlerSets(child, method, params, node.#params));\n              if (child.#children[\"*\"]) {\n                handlerSets.push(\n                  ...this.#getHandlerSets(child.#children[\"*\"], method, params, node.#params)\n                );\n              }\n            } else {\n              child.#params = params;\n              tempNodes.push(child);\n            }\n          }\n        }\n      }\n      curNodes = tempNodes.concat(curNodesQueue.shift() ?? []);\n    }\n    if (handlerSets.length > 1) {\n      handlerSets.sort((a, b) => {\n        return a.score - b.score;\n      });\n    }\n    return [handlerSets.map(({ handler, params }) => [handler, params])];\n  }\n};\nexport {\n  Node\n};\n", "export { default as notFound } from \"./not-found.js\";\nexport { default as onError } from \"./on-error.js\";\nexport { default as serveEmojiFavicon } from \"./serve-emoji-favicon.js\";\n", "import { NOT_FOUND } from \"../http-status-codes.js\";\nimport { NOT_FOUND as NOT_FOUND_MESSAGE } from \"../http-status-phrases.js\";\nconst notFound = (c) => {\n  return c.json({\n    message: `${NOT_FOUND_MESSAGE} - ${c.req.path}`\n  }, NOT_FOUND);\n};\nexport default notFound;\n", "export const ACCEPTED = 202;\nexport const BAD_GATEWAY = 502;\nexport const BAD_REQUEST = 400;\nexport const CONFLICT = 409;\nexport const CONTINUE = 100;\nexport const CREATED = 201;\nexport const EXPECTATION_FAILED = 417;\nexport const FAILED_DEPENDENCY = 424;\nexport const FORBIDDEN = 403;\nexport const GATEWAY_TIMEOUT = 504;\nexport const GONE = 410;\nexport const HTTP_VERSION_NOT_SUPPORTED = 505;\nexport const IM_A_TEAPOT = 418;\nexport const INSUFFICIENT_SPACE_ON_RESOURCE = 419;\nexport const INSUFFICIENT_STORAGE = 507;\nexport const INTERNAL_SERVER_ERROR = 500;\nexport const LENGTH_REQUIRED = 411;\nexport const LOCKED = 423;\nexport const METHOD_FAILURE = 420;\nexport const METHOD_NOT_ALLOWED = 405;\nexport const MOVED_PERMANENTLY = 301;\nexport const MOVED_TEMPORARILY = 302;\nexport const MULTI_STATUS = 207;\nexport const MULTIPLE_CHOICES = 300;\nexport const NETWORK_AUTHENTICATION_REQUIRED = 511;\nexport const NO_CONTENT = 204;\nexport const NON_AUTHORITATIVE_INFORMATION = 203;\nexport const NOT_ACCEPTABLE = 406;\nexport const NOT_FOUND = 404;\nexport const NOT_IMPLEMENTED = 501;\nexport const NOT_MODIFIED = 304;\nexport const OK = 200;\nexport const PARTIAL_CONTENT = 206;\nexport const PAYMENT_REQUIRED = 402;\nexport const PERMANENT_REDIRECT = 308;\nexport const PRECONDITION_FAILED = 412;\nexport const PRECONDITION_REQUIRED = 428;\nexport const PROCESSING = 102;\nexport const EARLY_HINTS = 103;\nexport const UPGRADE_REQUIRED = 426;\nexport const PROXY_AUTHENTICATION_REQUIRED = 407;\nexport const REQUEST_HEADER_FIELDS_TOO_LARGE = 431;\nexport const REQUEST_TIMEOUT = 408;\nexport const REQUEST_TOO_LONG = 413;\nexport const REQUEST_URI_TOO_LONG = 414;\nexport const REQUESTED_RANGE_NOT_SATISFIABLE = 416;\nexport const RESET_CONTENT = 205;\nexport const SEE_OTHER = 303;\nexport const SERVICE_UNAVAILABLE = 503;\nexport const SWITCHING_PROTOCOLS = 101;\nexport const TEMPORARY_REDIRECT = 307;\nexport const TOO_MANY_REQUESTS = 429;\nexport const UNAUTHORIZED = 401;\nexport const UNAVAILABLE_FOR_LEGAL_REASONS = 451;\nexport const UNPROCESSABLE_ENTITY = 422;\nexport const UNSUPPORTED_MEDIA_TYPE = 415;\nexport const USE_PROXY = 305;\nexport const MISDIRECTED_REQUEST = 421;\n", "export const ACCEPTED = \"Accepted\";\nexport const BAD_GATEWAY = \"Bad Gateway\";\nexport const BAD_REQUEST = \"Bad Request\";\nexport const CONFLICT = \"Conflict\";\nexport const CONTINUE = \"Continue\";\nexport const CREATED = \"Created\";\nexport const EXPECTATION_FAILED = \"Expectation Failed\";\nexport const FAILED_DEPENDENCY = \"Failed Dependency\";\nexport const FORBIDDEN = \"Forbidden\";\nexport const GATEWAY_TIMEOUT = \"Gateway Timeout\";\nexport const GONE = \"Gone\";\nexport const HTTP_VERSION_NOT_SUPPORTED = \"HTTP Version Not Supported\";\nexport const IM_A_TEAPOT = \"I'm a teapot\";\nexport const INSUFFICIENT_SPACE_ON_RESOURCE = \"Insufficient Space on Resource\";\nexport const INSUFFICIENT_STORAGE = \"Insufficient Storage\";\nexport const INTERNAL_SERVER_ERROR = \"Internal Server Error\";\nexport const LENGTH_REQUIRED = \"Length Required\";\nexport const LOCKED = \"Locked\";\nexport const METHOD_FAILURE = \"Method Failure\";\nexport const METHOD_NOT_ALLOWED = \"Method Not Allowed\";\nexport const MOVED_PERMANENTLY = \"Moved Permanently\";\nexport const MOVED_TEMPORARILY = \"Moved Temporarily\";\nexport const MULTI_STATUS = \"Multi-Status\";\nexport const MULTIPLE_CHOICES = \"Multiple Choices\";\nexport const NETWORK_AUTHENTICATION_REQUIRED = \"Network Authentication Required\";\nexport const NO_CONTENT = \"No Content\";\nexport const NON_AUTHORITATIVE_INFORMATION = \"Non Authoritative Information\";\nexport const NOT_ACCEPTABLE = \"Not Acceptable\";\nexport const NOT_FOUND = \"Not Found\";\nexport const NOT_IMPLEMENTED = \"Not Implemented\";\nexport const NOT_MODIFIED = \"Not Modified\";\nexport const OK = \"OK\";\nexport const PARTIAL_CONTENT = \"Partial Content\";\nexport const PAYMENT_REQUIRED = \"Payment Required\";\nexport const PERMANENT_REDIRECT = \"Permanent Redirect\";\nexport const PRECONDITION_FAILED = \"Precondition Failed\";\nexport const PRECONDITION_REQUIRED = \"Precondition Required\";\nexport const PROCESSING = \"Processing\";\nexport const EARLY_HINTS = \"Early Hints\";\nexport const UPGRADE_REQUIRED = \"Upgrade Required\";\nexport const PROXY_AUTHENTICATION_REQUIRED = \"Proxy Authentication Required\";\nexport const REQUEST_HEADER_FIELDS_TOO_LARGE = \"Request Header Fields Too Large\";\nexport const REQUEST_TIMEOUT = \"Request Timeout\";\nexport const REQUEST_TOO_LONG = \"Request Entity Too Large\";\nexport const REQUEST_URI_TOO_LONG = \"Request-URI Too Long\";\nexport const REQUESTED_RANGE_NOT_SATISFIABLE = \"Requested Range Not Satisfiable\";\nexport const RESET_CONTENT = \"Reset Content\";\nexport const SEE_OTHER = \"See Other\";\nexport const SERVICE_UNAVAILABLE = \"Service Unavailable\";\nexport const SWITCHING_PROTOCOLS = \"Switching Protocols\";\nexport const TEMPORARY_REDIRECT = \"Temporary Redirect\";\nexport const TOO_MANY_REQUESTS = \"Too Many Requests\";\nexport const UNAUTHORIZED = \"Unauthorized\";\nexport const UNAVAILABLE_FOR_LEGAL_REASONS = \"Unavailable For Legal Reasons\";\nexport const UNPROCESSABLE_ENTITY = \"Unprocessable Entity\";\nexport const UNSUPPORTED_MEDIA_TYPE = \"Unsupported Media Type\";\nexport const USE_PROXY = \"Use Proxy\";\nexport const MISDIRECTED_REQUEST = \"Misdirected Request\";\n", "import { INTERNAL_SERVER_ERROR, OK } from \"../http-status-codes.js\";\nconst onError = (err, c) => {\n  const currentStatus = \"status\" in err ? err.status : c.newResponse(null).status;\n  const statusCode = currentStatus !== OK ? currentStatus : INTERNAL_SERVER_ERROR;\n  const env = c.env?.NODE_ENV || process.env?.NODE_ENV;\n  return c.json(\n    {\n      message: err.message,\n      stack: env === \"production\" ? void 0 : err.stack\n    },\n    statusCode\n  );\n};\nexport default onError;\n", "const serveEmojiFavicon = (emoji) => {\n  return async (c, next) => {\n    if (c.req.path === \"/favicon.ico\") {\n      c.header(\"Content-Type\", \"image/svg+xml\");\n      return c.body(`<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><text y=\".9em\" x=\"-0.1em\" font-size=\"90\">${emoji}</text></svg>`);\n    }\n    return next();\n  };\n};\nexport default serveEmojiFavicon;\n", "export { default as defaultHook } from \"./default-hook.js\";\nexport * as helpers from \"./helpers/index.js\";\nexport * as schemas from \"./schemas/index.js\";\n", "import { UNPROCESSABLE_ENTITY } from \"../http-status-codes.js\";\nconst defaultHook = (result, c) => {\n  if (!result.success) {\n    return c.json(\n      {\n        success: result.success,\n        error: result.error\n      },\n      UNPROCESSABLE_ENTITY\n    );\n  }\n};\nexport default defaultHook;\n", "export { default as jsonContentOneOf } from \"./json-content-one-of.js\";\nexport { default as jsonContentRequired } from \"./json-content-required.js\";\nexport { default as jsonContent } from \"./json-content.js\";\nexport { default as oneOf } from \"./one-of.js\";\n", "import jsonContent from \"./json-content.js\";\nconst jsonContentRequired = (schema, description) => {\n  return {\n    ...jsonContent(schema, description),\n    required: true\n  };\n};\nexport default jsonContentRequired;\n", "const jsonContent = (schema, description) => {\n  return {\n    content: {\n      \"application/json\": {\n        schema\n      }\n    },\n    description\n  };\n};\nexport default jsonContent;\n", "export { default as createErrorSchema } from \"./create-error-schema.js\";\nexport { default as createMessageObjectSchema } from \"./create-message-object.js\";\nexport { default as IdParamsSchema } from \"./id-params.js\";\nexport { default as IdUUIDParamsSchema } from \"./id-uuid-params.js\";\nexport { default as SlugParamsSchema } from \"./slug-params.js\";\n", "import { z } from \"@hono/zod-openapi\";\nconst createErrorSchema = (schema) => {\n  const { error } = schema.safeParse(\n    schema._def.typeName === z.ZodFirstPartyTypeKind.ZodArray ? [] : {}\n  );\n  return z.object({\n    success: z.boolean().openapi({\n      example: false\n    }),\n    error: z.object({\n      issues: z.array(\n        z.object({\n          code: z.string(),\n          path: z.array(\n            z.union([z.string(), z.number()])\n          ),\n          message: z.string().optional()\n        })\n      ),\n      name: z.string()\n    }).openapi({\n      example: error\n    })\n  });\n};\nexport default createErrorSchema;\n", "import { z } from \"@hono/zod-openapi\";\nconst createMessageObjectSchema = (exampleMessage = \"Hello World\") => {\n  return z.object({\n    message: z.string()\n  }).openapi({\n    example: {\n      message: exampleMessage\n    }\n  });\n};\nexport default createMessageObjectSchema;\n", "import { z } from \"@hono/zod-openapi\";\nconst IdParamsSchema = z.object({\n  id: z.coerce.number().openapi({\n    param: {\n      name: \"id\",\n      in: \"path\",\n      required: true\n    },\n    required: [\"id\"],\n    example: 42\n  })\n});\nexport default IdParamsSchema;\n", "import type { Context, MiddlewareHandler } from 'hono'\nimport type { Env } from 'hono-pino'\n\nimport { pinoLogger as logger } from 'hono-pino'\nimport pino from 'pino'\nimport pretty from 'pino-pretty'\n\nimport type { CustomAppBindings } from '../lib/types'\n\nexport function pinoLogger() {\n  return ((c, next) =>\n    logger({\n      // Try NODE_ENV=production pn run dev in terminal, you will see the logger without pretty, because we need consume all the logger content in production mode\n      pino: pino(\n        {\n          level: c.env.LOG_LEVEL || 'info',\n        },\n        c.env.NODE_ENV === 'production' ? undefined : pretty(),\n      ),\n      http: {\n        reqId: () => crypto.randomUUID(), // make request id unique instead of adding it up by default\n      },\n    })(\n      c as unknown as Context<Env>,\n      next,\n    )) satisfies MiddlewareHandler<CustomAppBindings>\n}\n\n// set up the pinoLogger as middleware\n", "// src/middleware.ts\nimport { pino } from \"pino\";\nimport { defu as defu2 } from \"defu\";\n\n// src/utils.ts\nfunction getLogger(c) {\n  return c.get(\"logger\");\n}\nfunction isPino(value) {\n  return typeof value === \"object\" && value !== null && // issue: https://github.com/pinojs/pino/issues/2079\n  // pino.symbols.messageKeySym in value\n  \"info\" in value && typeof value.info === \"function\" && \"child\" in value && typeof value.child === \"function\";\n}\n\n// src/logger.ts\nimport defu from \"defu\";\nvar httpCfgSym = Symbol(\"httpCfgSym\");\nvar PinoLogger = class {\n  /**\n   * Internal pino logger instance\n   *\n   * If you want to interact with the internal pino logger,\n   * you can use it (not recommended)\n   */\n  _rootLogger;\n  /**\n   * Internal child pino logger instance, recreated after each update bindings.\n   *\n   * If you want to interact with the internal pino logger,\n   * you can use it (not recommended)\n   */\n  _logger;\n  [httpCfgSym] = {};\n  constructor(rootLogger, childOptions) {\n    this._rootLogger = rootLogger.child({}, childOptions);\n    this._logger = rootLogger;\n  }\n  /**\n   * Get bindings from http log context\n   */\n  bindings() {\n    return this._logger.bindings();\n  }\n  /**\n   * Clear bindings from http log context\n   */\n  clearBindings() {\n    this._logger = this._rootLogger.child({});\n    return this;\n  }\n  /**\n   * Assign bindings to http log context\n   */\n  assign(bindings, opts) {\n    const newBindings = opts?.deep ? defu(bindings, this._logger.bindings()) : { ...this._logger.bindings(), ...bindings };\n    this._logger = this._rootLogger.child(newBindings);\n    return this;\n  }\n  /**\n   * Override response log message\n   */\n  setResMessage(message) {\n    this[httpCfgSym].resMessage = message;\n    return this;\n  }\n  /**\n   * Override response log level\n   */\n  setResLevel(level) {\n    this[httpCfgSym].resLevel = level;\n    return this;\n  }\n};\nPinoLogger.prototype.trace = function(...args) {\n  this._logger.trace(...args);\n};\nPinoLogger.prototype.debug = function(...args) {\n  this._logger.debug(...args);\n};\nPinoLogger.prototype.info = function(...args) {\n  this._logger.info(...args);\n};\nPinoLogger.prototype.warn = function(...args) {\n  this._logger.warn(...args);\n};\nPinoLogger.prototype.error = function(...args) {\n  this._logger.error(...args);\n};\nPinoLogger.prototype.fatal = function(...args) {\n  this._logger.fatal(...args);\n};\n\n// src/middleware.ts\nimport { env } from \"hono/adapter\";\nvar pinoLogger = (opts) => {\n  const contextKey = opts?.contextKey ?? \"logger\";\n  let rootLogger = createStaticRootLogger(opts?.pino);\n  return async (c, next) => {\n    const [dynamicRootLogger, loggerChildOptions] = parseDynamicRootLogger(\n      opts?.pino,\n      c\n    );\n    rootLogger ??= dynamicRootLogger ?? getDefaultRootLogger();\n    const logger2 = new PinoLogger(rootLogger, loggerChildOptions);\n    c.set(contextKey, logger2);\n    if (opts?.http === false) {\n      await next();\n      return;\n    }\n    let bindings = opts?.http?.onReqBindings?.(c) ?? {\n      req: {\n        url: c.req.path,\n        method: c.req.method,\n        headers: c.req.header()\n      }\n    };\n    const referRequestIdKey = opts?.http?.referRequestIdKey ?? \"requestId\";\n    if (referRequestIdKey in c.var) {\n      bindings.reqId = c.var[referRequestIdKey];\n    } else if (opts?.http?.reqId !== false) {\n      bindings.reqId = opts?.http?.reqId?.() ?? defaultReqIdGenerator();\n    }\n    if (opts?.http?.onReqMessage) {\n      const level = opts.http.onReqLevel?.(c) ?? \"info\";\n      const msg = await opts.http.onReqMessage(c);\n      logger2[level](bindings, msg);\n    }\n    if (opts?.http?.responseTime ?? true) {\n      const startTime = performance.now();\n      await next();\n      const endTime = performance.now();\n      const responseTime = Math.round(endTime - startTime);\n      bindings.responseTime = responseTime;\n    } else {\n      await next();\n    }\n    if (opts?.http?.onResMessage !== false) {\n      const onResBindings = opts?.http?.onResBindings?.(c) ?? {\n        res: {\n          status: c.res.status,\n          headers: c.res.headers\n        }\n      };\n      bindings = defu2(bindings, onResBindings);\n      const level = logger2[httpCfgSym].resLevel ?? opts?.http?.onResLevel?.(c) ?? (c.error ? \"error\" : \"info\");\n      const msg = logger2[httpCfgSym].resMessage ?? (opts?.http?.onResMessage ? await opts?.http?.onResMessage(c) : void 0) ?? (c.error ? c.error.message : \"Request completed\");\n      logger2[level](bindings, msg);\n    }\n  };\n};\nvar logger = pinoLogger;\nvar defaultReqId = 0;\nvar defaultReqIdGenerator = () => defaultReqId += 1;\nvar createStaticRootLogger = (opt) => {\n  if (typeof opt === \"function\") return null;\n  if (isPino(opt)) return opt;\n  return pino(opt);\n};\nvar parseDynamicRootLogger = (opt, c) => {\n  if (opt === void 0) {\n    const { LOG_LEVEL } = env(c);\n    return [\n      void 0,\n      {\n        level: LOG_LEVEL ?? \"info\"\n      }\n    ];\n  }\n  if (typeof opt !== \"function\") return [void 0, void 0];\n  const v = opt(c);\n  if (isPino(v)) return [v, void 0];\n  return [void 0, v];\n};\nvar getDefaultRootLogger = () => _defaultRootLogger ??= pino();\nvar _defaultRootLogger = void 0;\nexport {\n  PinoLogger,\n  getLogger,\n  httpCfgSym,\n  logger,\n  pinoLogger\n};\n", "function isPlainObject(value) {\n  if (value === null || typeof value !== \"object\") {\n    return false;\n  }\n  const prototype = Object.getPrototypeOf(value);\n  if (prototype !== null && prototype !== Object.prototype && Object.getPrototypeOf(prototype) !== null) {\n    return false;\n  }\n  if (Symbol.iterator in value) {\n    return false;\n  }\n  if (Symbol.toStringTag in value) {\n    return Object.prototype.toString.call(value) === \"[object Module]\";\n  }\n  return true;\n}\n\nfunction _defu(baseObject, defaults, namespace = \".\", merger) {\n  if (!isPlainObject(defaults)) {\n    return _defu(baseObject, {}, namespace, merger);\n  }\n  const object = Object.assign({}, defaults);\n  for (const key in baseObject) {\n    if (key === \"__proto__\" || key === \"constructor\") {\n      continue;\n    }\n    const value = baseObject[key];\n    if (value === null || value === void 0) {\n      continue;\n    }\n    if (merger && merger(object, key, value, namespace)) {\n      continue;\n    }\n    if (Array.isArray(value) && Array.isArray(object[key])) {\n      object[key] = [...value, ...object[key]];\n    } else if (isPlainObject(value) && isPlainObject(object[key])) {\n      object[key] = _defu(\n        value,\n        object[key],\n        (namespace ? `${namespace}.` : \"\") + key.toString(),\n        merger\n      );\n    } else {\n      object[key] = value;\n    }\n  }\n  return object;\n}\nfunction createDefu(merger) {\n  return (...arguments_) => (\n    // eslint-disable-next-line unicorn/no-array-reduce\n    arguments_.reduce((p, c) => _defu(p, c, \"\", merger), {})\n  );\n}\nconst defu = createDefu();\nconst defuFn = createDefu((object, key, currentValue) => {\n  if (object[key] !== void 0 && typeof currentValue === \"function\") {\n    object[key] = currentValue(object[key]);\n    return true;\n  }\n});\nconst defuArrayFn = createDefu((object, key, currentValue) => {\n  if (Array.isArray(object[key]) && typeof currentValue === \"function\") {\n    object[key] = currentValue(object[key]);\n    return true;\n  }\n});\n\nexport { createDefu, defu as default, defu, defuArrayFn, defuFn };\n", "// src/helper/adapter/index.ts\nvar env = (c, runtime) => {\n  const global = globalThis;\n  const globalEnv = global?.process?.env;\n  runtime ??= getRuntimeKey();\n  const runtimeEnvHandlers = {\n    bun: () => globalEnv,\n    node: () => globalEnv,\n    \"edge-light\": () => globalEnv,\n    deno: () => {\n      return Deno.env.toObject();\n    },\n    workerd: () => c.env,\n    fastly: () => ({}),\n    other: () => ({})\n  };\n  return runtimeEnvHandlers[runtime]();\n};\nvar knownUserAgents = {\n  deno: \"Deno\",\n  bun: \"Bun\",\n  workerd: \"Cloudflare-Workers\",\n  node: \"Node.js\"\n};\nvar getRuntimeKey = () => {\n  const global = globalThis;\n  const userAgentSupported = typeof navigator !== \"undefined\" && typeof navigator.userAgent === \"string\";\n  if (userAgentSupported) {\n    for (const [runtimeKey, userAgent] of Object.entries(knownUserAgents)) {\n      if (checkUserAgentEquals(userAgent)) {\n        return runtimeKey;\n      }\n    }\n  }\n  if (typeof global?.EdgeRuntime === \"string\") {\n    return \"edge-light\";\n  }\n  if (global?.fastly !== void 0) {\n    return \"fastly\";\n  }\n  if (global?.process?.release?.name === \"node\") {\n    return \"node\";\n  }\n  return \"other\";\n};\nvar checkUserAgentEquals = (platform) => {\n  const userAgent = navigator.userAgent;\n  return userAgent.startsWith(platform);\n};\nexport {\n  checkUserAgentEquals,\n  env,\n  getRuntimeKey,\n  knownUserAgents\n};\n", "import { config } from 'dotenv'\nimport { expand } from 'dotenv-expand'\nimport path from 'node:path'\nimport { z } from 'zod'\n\nexpand(\n  config({\n    path: path.resolve(\n      process.cwd(),\n      // eslint-disable-next-line node/no-process-env\n      process.env.NODE_ENV === 'test' ? '.env.test' : '.env',\n    ),\n  }),\n)\n\n// EnvSchema is ZodEffects object, which is a wrapper around a Zod schema that allows you to add custom validation logic\nconst EnvSchema = z\n  .object({\n    NODE_ENV: z.string().default('development'),\n    PORT: z.coerce.number().default(9999), // turn it in a string, then turn it in a number\n    LOG_LEVEL: z.enum([\n      'fatal',\n      'error',\n      'warn',\n      'info',\n      'debug',\n      'trace',\n      'silent',\n    ]),\n    DATABASE_URL: z.string().url(), // need to be a valid url\n    DATABASE_AUTH_TOKEN: z.string().optional(), // no need to specify when running locally\n  })\n  .superRefine((input, ctx) => {\n    // input: the fully parsed object from your schema\n    // ctx: the context object that you can use to add issues to the schema\n    // if we are in production mode, and the DATABASE_AUTH_TOKEN is not set, we add an issue to the schema\n    if (input.NODE_ENV === 'production' && !input.DATABASE_AUTH_TOKEN) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.invalid_type,\n        expected: 'string',\n        received: 'undefined',\n        path: ['DATABASE_AUTH_TOKEN'], // custom error directly onto the DATABASE_AUTH_TOKEN property\n        message: 'Must be set when NODE_ENV is \"production\"',\n      })\n    }\n  })\n\n// get the type of EnvSchema\n// other module can import this type\nexport type Environment = z.infer<typeof EnvSchema>\n\n// let env: env\n\nexport function parseEnv(data: Environment) {\n  const { data: env, error } = EnvSchema.safeParse(data)\n\n  if (error) {\n    // get array of arrays: key and value\n    const errorMessage = `\u274C Invalid environment variables: ${Object.entries(\n      error.flatten().fieldErrors,\n    )\n      .map(([key, errors]) => `${key}: ${errors.join(', ')}`)\n      .join(' | ')}`\n\n    throw new Error(errorMessage)\n  }\n  return env\n}\n\n// export default env\n// if any of the env variables is missing, the app will exit with a code 1\n// if one variable is missing, it will show: eg: { NODE_ENV: ['Required'] }\n", "// export a hono api instance has a specific documented route\n// create a stand along hono api instance to be mounted on top of this app\n\nimport { createRoute, z } from '@hono/zod-openapi'\n// * means \u201Cgrab every named export from the module.\u201D\n// as HttpStatusCodes means: bundle them all into a single object called HttpStatusCodes.\nimport * as HttpStatusCodes from 'stoker/http-status-codes'\nimport jsonContent from 'stoker/openapi/helpers/json-content'\n\nimport { createRouter } from '@/lib/create-app'\n\n// .openapi(...) takes two arguments:\n// Route metadata (for generating docs and validating),\n// Handler (the function that actually runs on an incoming request).\nconst router = createRouter()\n  .openapi(\n    // route definition\n    createRoute({\n      tags: ['Index'], // tags are used to group routes in the scalar UI\n      method: 'get',\n      path: '/',\n      responses: {\n        // 200 is the key of the response\n        // at runtime your responses object is effectively { 200: { /* JSON schema & description */ } }\n        // jsonContent takes Schema and description\n        [HttpStatusCodes.OK]: jsonContent(\n          z.object({\n            message: z.string(),\n          }),\n          'Task API Index',\n        ),\n      },\n    }),\n\n    // handler: implement the logic\n    (c) => {\n      return c.json({\n        message: 'task api index route',\n      }, HttpStatusCodes.OK)\n    },\n  )\n\nexport default router\n\n// Original router creation\n// const router = createRouter()\n//   .openapi(\n//     createRoute({\n//       tags: ['Index'],\n//       method: 'get',\n//       path: '/',\n//       responses: {\n//         200: {\n//           content: {\n//             'application/json': {\n//               schema: z.object({\n//                 message: z.string(),\n//               }),\n//             },\n//           },\n//           description: 'Task API Index'\n//         }\n//       },\n//     }),\n\n//     (c) => {\n//       return c.json({\n//         message: \"task api\"\n//     }, 200)\n//     }\n//   )\n\n// Helper function from stoker\n// import type { ZodSchema } from \"./types.ts\";\n\n// const jsonContent = <\n//   T extends ZodSchema,\n// >(schema: T,\n//   description: string,\n// ) => {\n//   return {\n//     content: {\n//       \"application/json\": {\n//         schema,\n//       },\n//     },\n//     description,\n//   };\n// };\n\n// export default jsonContent;\n", "import { createRouter } from '@/lib/create-app'\n\nimport * as handlers from './tasks.handlers'\nimport * as routes from './tasks.routes'\n\n// route definition and route handler are separated in different files to keep the main file clean\nconst router = createRouter()\n  .openapi(routes.list, handlers.list)\n  .openapi(routes.create, handlers.create)\n  .openapi(routes.getOneById, handlers.getOneById)\n  .openapi(routes.patchById, handlers.patchById)\n  .openapi(routes.deleteById, handlers.deleteById)\n\nexport default router\n\n// This is the index file, it's the entry point for the tasks routes\n// Once we have route definition in tasks.routes.ts and route handler in tasks.handlers.ts, we need to smack them together and actually add them to the api\n", "import { eq } from 'drizzle-orm'\nimport * as HttpStatusCodes from 'stoker/http-status-codes'\nimport * as HttpStatusPhrases from 'stoker/http-status-phrases'\n\nimport { createDbClient } from '@/db'\nimport { tasks } from '@/db/schema'\nimport { ZOD_ERROR_CODES, ZOD_ERROR_MESSAGES } from '@/lib/constants'\n\nimport type { AppRouteHandler } from '../../lib/types'\nimport type {\n  CreateRoute,\n  DeleteByIdRoute,\n  GetOneByIdRoute,\n  ListRoute,\n  PatchByIdRoute,\n} from './tasks.routes'\n\n// Each router creates a new instance of the db client\n// That's how Cloudflare workers works, because it's a serverless platform, each request is a serverless function that gets called\n// and each time it gets called, it creates a new instance of the db client\n\n// Create route handler\n// ListRoute is the RouteConfig created in the tasks.routes.ts file\nexport const list: AppRouteHandler<ListRoute> = async (c) => {\n  c.var.logger.info('Listing tasks')\n\n  // query the database\n  const { db } = createDbClient(c.env)\n  const tasks = await db.query.tasks.findMany()\n  return c.json(tasks, HttpStatusCodes.OK)\n}\n\n// original type\n// RouteHandler is a generic type, we need to specify it\n// const list: RouteHandler<ListRoute, CustomAppBindings> = c => { \u2026 }\n\nexport const create: AppRouteHandler<CreateRoute> = async (c) => {\n  // the code will never reach this point if the request body is invalid\n  // task: { name: string, done: boolean }\n  const task = c.req.valid('json')\n  // returning() returns the array of inserted rows, even if it's only one row\n  // [insertedTask]: array destructuring takes the first element of the array, because it's guaranteed to be one row here, insertedTask is always the inserted row\n  const { db } = createDbClient(c.env)\n  const [insertedTask] = await db.insert(tasks).values(task).returning()\n  return c.json(insertedTask, HttpStatusCodes.OK)\n}\n\nexport const getOneById: AppRouteHandler<GetOneByIdRoute> = async (c) => {\n  // the code will never reach this point if the id is invalid\n  const params = c.req.valid('param') // we can also destructure the id: { id: number }\n  const { db } = createDbClient(c.env)\n  const task = await db.query.tasks.findFirst({\n    where(fields, operator) {\n      return operator.eq(fields.id, params.id) // fields here is the fields of the tasks table\n    },\n  })\n  if (!task) {\n    return c.json(\n      { message: HttpStatusPhrases.NOT_FOUND },\n      HttpStatusCodes.NOT_FOUND,\n    )\n  }\n  return c.json(task, HttpStatusCodes.OK)\n}\n\n// why create doesn't need to deal with errors?\n\n// create handler for updating/patching a task by id\nexport const patchById: AppRouteHandler<PatchByIdRoute> = async (c) => {\n  const params = c.req.valid('param') // id is a string, even if it's a number in the database\n  const updates = c.req.valid('json') // you can just send name or done or both\n\n  // handle the empty updates: no name and no done\n  // Object.keys(updates).length: check if the updates object is empty\n  if (Object.keys(updates).length === 0) {\n    // MARK: what decides the shape of json response?\n    return c.json(\n      {\n        success: false,\n        error: {\n          issues: [\n            {\n              code: ZOD_ERROR_CODES.INVALID_UPDATES,\n              path: [],\n              message: ZOD_ERROR_MESSAGES.NO_UPDATES,\n            },\n          ],\n          name: 'ZodError',\n        },\n      },\n      HttpStatusCodes.UNPROCESSABLE_ENTITY, // HTTP status code (422) is sent in the response headers, not in the JSON body.\n    )\n  }\n  // eq is a helper function from drizzle-orm, pass in the columns we are comparing and the value we are comparing it to\n  // .returning() send back the full row(s) that were updated: return a list of updated rows, even if it's only one row\n  const { db } = createDbClient(c.env)\n  const [updatedTask] = await db\n    .update(tasks)\n    .set(updates)\n    .where(eq(tasks.id, params.id))\n    .returning()\n\n  if (!updatedTask) {\n    return c.json(\n      { message: HttpStatusPhrases.NOT_FOUND },\n      HttpStatusCodes.NOT_FOUND,\n    )\n  }\n\n  return c.json(updatedTask, HttpStatusCodes.OK)\n}\n\n// create handler for deleting a task by id\nexport const deleteById: AppRouteHandler<DeleteByIdRoute> = async (c) => {\n  // .valid() async is available only when you've attached a Zod schema to your route's request definition using createRoute() in tasks.routes.ts file\n  const params = c.req.valid('param') // safely returns parsed and validated URL params and gives you { id: string }\n  // ResultSet shape here from sqlite driver if task is not found:\n  // { columns: [],\n  // columnTypes: [],\n  // rows: [],\n  // rowsAffected: 0,\n  // lastInsertRowid: 0n }\n  const { db } = createDbClient(c.env)\n  const result = await db.delete(tasks).where(eq(tasks.id, params.id)) // safely returns parsed and validated request body (JSON) and gives you { name?: string, done?: boolean }\n\n  if (result.rowsAffected === 0) {\n    return c.json(\n      { message: HttpStatusPhrases.NOT_FOUND },\n      HttpStatusCodes.NOT_FOUND,\n    )\n  }\n  return c.body(null, HttpStatusCodes.NO_CONTENT) // 204\n}\n", "import type { AnyColumn } from './column.ts';\nimport { Column } from './column.ts';\nimport { entityKind, is } from './entity.ts';\nimport type { Relation } from './relations.ts';\nimport type { View } from './sql/sql.ts';\nimport { SQL, sql } from './sql/sql.ts';\nimport { Table } from './table.ts';\nimport { ViewBaseConfig } from './view-common.ts';\n\nexport class ColumnAliasProxyHandler<TColumn extends Column> implements ProxyHandler<TColumn> {\n\tstatic readonly [entityKind]: string = 'ColumnAliasProxyHandler';\n\n\tconstructor(private table: Table | View) {}\n\n\tget(columnObj: TColumn, prop: string | symbol): any {\n\t\tif (prop === 'table') {\n\t\t\treturn this.table;\n\t\t}\n\n\t\treturn columnObj[prop as keyof TColumn];\n\t}\n}\n\nexport class TableAliasProxyHandler<T extends Table | View> implements ProxyHandler<T> {\n\tstatic readonly [entityKind]: string = 'TableAliasProxyHandler';\n\n\tconstructor(private alias: string, private replaceOriginalName: boolean) {}\n\n\tget(target: T, prop: string | symbol): any {\n\t\tif (prop === Table.Symbol.IsAlias) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (prop === Table.Symbol.Name) {\n\t\t\treturn this.alias;\n\t\t}\n\n\t\tif (this.replaceOriginalName && prop === Table.Symbol.OriginalName) {\n\t\t\treturn this.alias;\n\t\t}\n\n\t\tif (prop === ViewBaseConfig) {\n\t\t\treturn {\n\t\t\t\t...target[ViewBaseConfig as keyof typeof target],\n\t\t\t\tname: this.alias,\n\t\t\t\tisAlias: true,\n\t\t\t};\n\t\t}\n\n\t\tif (prop === Table.Symbol.Columns) {\n\t\t\tconst columns = (target as Table)[Table.Symbol.Columns];\n\t\t\tif (!columns) {\n\t\t\t\treturn columns;\n\t\t\t}\n\n\t\t\tconst proxiedColumns: { [key: string]: any } = {};\n\n\t\t\tObject.keys(columns).map((key) => {\n\t\t\t\tproxiedColumns[key] = new Proxy(\n\t\t\t\t\tcolumns[key]!,\n\t\t\t\t\tnew ColumnAliasProxyHandler(new Proxy(target, this)),\n\t\t\t\t);\n\t\t\t});\n\n\t\t\treturn proxiedColumns;\n\t\t}\n\n\t\tconst value = target[prop as keyof typeof target];\n\t\tif (is(value, Column)) {\n\t\t\treturn new Proxy(value as AnyColumn, new ColumnAliasProxyHandler(new Proxy(target, this)));\n\t\t}\n\n\t\treturn value;\n\t}\n}\n\nexport class RelationTableAliasProxyHandler<T extends Relation> implements ProxyHandler<T> {\n\tstatic readonly [entityKind]: string = 'RelationTableAliasProxyHandler';\n\n\tconstructor(private alias: string) {}\n\n\tget(target: T, prop: string | symbol): any {\n\t\tif (prop === 'sourceTable') {\n\t\t\treturn aliasedTable(target.sourceTable, this.alias);\n\t\t}\n\n\t\treturn target[prop as keyof typeof target];\n\t}\n}\n\nexport function aliasedTable<T extends Table | View>(\n\ttable: T,\n\ttableAlias: string,\n): T {\n\treturn new Proxy(table, new TableAliasProxyHandler(tableAlias, false)) as any;\n}\n\nexport function aliasedRelation<T extends Relation>(relation: T, tableAlias: string): T {\n\treturn new Proxy(relation, new RelationTableAliasProxyHandler(tableAlias));\n}\n\nexport function aliasedTableColumn<T extends AnyColumn>(column: T, tableAlias: string): T {\n\treturn new Proxy(\n\t\tcolumn,\n\t\tnew ColumnAliasProxyHandler(new Proxy(column.table, new TableAliasProxyHandler(tableAlias, false))),\n\t);\n}\n\nexport function mapColumnsInAliasedSQLToAlias(query: SQL.Aliased, alias: string): SQL.Aliased {\n\treturn new SQL.Aliased(mapColumnsInSQLToAlias(query.sql, alias), query.fieldAlias);\n}\n\nexport function mapColumnsInSQLToAlias(query: SQL, alias: string): SQL {\n\treturn sql.join(query.queryChunks.map((c) => {\n\t\tif (is(c, Column)) {\n\t\t\treturn aliasedTableColumn(c, alias);\n\t\t}\n\t\tif (is(c, SQL)) {\n\t\t\treturn mapColumnsInSQLToAlias(c, alias);\n\t\t}\n\t\tif (is(c, SQL.Aliased)) {\n\t\t\treturn mapColumnsInAliasedSQLToAlias(c, alias);\n\t\t}\n\t\treturn c;\n\t}));\n}\n", "import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tGeneratedColumnConfig,\n\tGeneratedIdentityConfig,\n} from './column-builder.ts';\nimport { entityKind } from './entity.ts';\nimport type { DriverValueMapper, SQL, SQLWrapper } from './sql/sql.ts';\nimport type { Table } from './table.ts';\nimport type { Update } from './utils.ts';\n\nexport interface ColumnBaseConfig<\n\tTDataType extends ColumnDataType,\n\tTColumnType extends string,\n> extends ColumnBuilderBaseConfig<TDataType, TColumnType> {\n\ttableName: string;\n\tnotNull: boolean;\n\thasDefault: boolean;\n\tisPrimaryKey: boolean;\n\tisAutoincrement: boolean;\n\thasRuntimeDefault: boolean;\n}\n\nexport type ColumnTypeConfig<T extends ColumnBaseConfig<ColumnDataType, string>, TTypeConfig extends object> = T & {\n\tbrand: 'Column';\n\ttableName: T['tableName'];\n\tname: T['name'];\n\tdataType: T['dataType'];\n\tcolumnType: T['columnType'];\n\tdata: T['data'];\n\tdriverParam: T['driverParam'];\n\tnotNull: T['notNull'];\n\thasDefault: T['hasDefault'];\n\tisPrimaryKey: T['isPrimaryKey'];\n\tisAutoincrement: T['isAutoincrement'];\n\thasRuntimeDefault: T['hasRuntimeDefault'];\n\tenumValues: T['enumValues'];\n\tbaseColumn: T extends { baseColumn: infer U } ? U : unknown;\n\tgenerated: GeneratedColumnConfig<T['data']> | undefined;\n\tidentity: undefined | 'always' | 'byDefault';\n} & TTypeConfig;\n\nexport type ColumnRuntimeConfig<TData, TRuntimeConfig extends object> = ColumnBuilderRuntimeConfig<\n\tTData,\n\tTRuntimeConfig\n>;\n\nexport interface Column<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTRuntimeConfig extends object = object,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTTypeConfig extends object = object,\n> extends DriverValueMapper<T['data'], T['driverParam']>, SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\n/*\n\t`Column` only accepts a full `ColumnConfig` as its generic.\n\tTo infer parts of the config, use `AnyColumn` that accepts a partial config.\n\tSee `GetColumnData` for example usage of inferring.\n*/\nexport abstract class Column<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n> implements DriverValueMapper<T['data'], T['driverParam']>, SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Column';\n\n\tdeclare readonly _: ColumnTypeConfig<T, TTypeConfig>;\n\n\treadonly name: string;\n\treadonly keyAsName: boolean;\n\treadonly primary: boolean;\n\treadonly notNull: boolean;\n\treadonly default: T['data'] | SQL | undefined;\n\treadonly defaultFn: (() => T['data'] | SQL) | undefined;\n\treadonly onUpdateFn: (() => T['data'] | SQL) | undefined;\n\treadonly hasDefault: boolean;\n\treadonly isUnique: boolean;\n\treadonly uniqueName: string | undefined;\n\treadonly uniqueType: string | undefined;\n\treadonly dataType: T['dataType'];\n\treadonly columnType: T['columnType'];\n\treadonly enumValues: T['enumValues'] = undefined;\n\treadonly generated: GeneratedColumnConfig<T['data']> | undefined = undefined;\n\treadonly generatedIdentity: GeneratedIdentityConfig | undefined = undefined;\n\n\tprotected config: ColumnRuntimeConfig<T['data'], TRuntimeConfig>;\n\n\tconstructor(\n\t\treadonly table: Table,\n\t\tconfig: ColumnRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tthis.config = config;\n\t\tthis.name = config.name;\n\t\tthis.keyAsName = config.keyAsName;\n\t\tthis.notNull = config.notNull;\n\t\tthis.default = config.default;\n\t\tthis.defaultFn = config.defaultFn;\n\t\tthis.onUpdateFn = config.onUpdateFn;\n\t\tthis.hasDefault = config.hasDefault;\n\t\tthis.primary = config.primaryKey;\n\t\tthis.isUnique = config.isUnique;\n\t\tthis.uniqueName = config.uniqueName;\n\t\tthis.uniqueType = config.uniqueType;\n\t\tthis.dataType = config.dataType as T['dataType'];\n\t\tthis.columnType = config.columnType;\n\t\tthis.generated = config.generated;\n\t\tthis.generatedIdentity = config.generatedIdentity;\n\t}\n\n\tabstract getSQLType(): string;\n\n\tmapFromDriverValue(value: unknown): unknown {\n\t\treturn value;\n\t}\n\n\tmapToDriverValue(value: unknown): unknown {\n\t\treturn value;\n\t}\n\n\t// ** @internal */\n\tshouldDisableInsert(): boolean {\n\t\treturn this.config.generated !== undefined && this.config.generated.type !== 'byDefault';\n\t}\n}\n\nexport type UpdateColConfig<\n\tT extends ColumnBaseConfig<ColumnDataType, string>,\n\tTUpdate extends Partial<ColumnBaseConfig<ColumnDataType, string>>,\n> = Update<T, TUpdate>;\n\nexport type AnyColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = Column<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n\nexport type GetColumnData<TColumn extends Column, TInferMode extends 'query' | 'raw' = 'query'> =\n\t// dprint-ignore\n\tTInferMode extends 'raw' // Raw mode\n\t\t? TColumn['_']['data'] // Just return the underlying type\n\t\t: TColumn['_']['notNull'] extends true // Query mode\n\t\t? TColumn['_']['data'] // Query mode, not null\n\t\t: TColumn['_']['data'] | null; // Query mode, nullable\n\nexport type InferColumnsDataTypes<TColumns extends Record<string, Column>> = {\n\t[Key in keyof TColumns]: GetColumnData<TColumns[Key], 'query'>;\n};\n", "export const entityKind = Symbol.for('drizzle:entityKind');\nexport const hasOwnEntityKind = Symbol.for('drizzle:hasOwnEntityKind');\n\nexport interface DrizzleEntity {\n\t[entityKind]: string;\n}\n\nexport type DrizzleEntityClass<T> =\n\t& ((abstract new(...args: any[]) => T) | (new(...args: any[]) => T))\n\t& DrizzleEntity;\n\nexport function is<T extends DrizzleEntityClass<any>>(value: any, type: T): value is InstanceType<T> {\n\tif (!value || typeof value !== 'object') {\n\t\treturn false;\n\t}\n\n\tif (value instanceof type) { // eslint-disable-line no-instanceof/no-instanceof\n\t\treturn true;\n\t}\n\n\tif (!Object.prototype.hasOwnProperty.call(type, entityKind)) {\n\t\tthrow new Error(\n\t\t\t`Class \"${\n\t\t\t\ttype.name ?? '<unknown>'\n\t\t\t}\" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`,\n\t\t);\n\t}\n\n\tlet cls = Object.getPrototypeOf(value).constructor;\n\tif (cls) {\n\t\t// Traverse the prototype chain to find the entityKind\n\t\twhile (cls) {\n\t\t\tif (entityKind in cls && cls[entityKind] === type[entityKind]) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tcls = Object.getPrototypeOf(cls);\n\t\t}\n\t}\n\n\treturn false;\n}\n", "import type { CasingCache } from '~/casing.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport { isPgEnum } from '~/pg-core/columns/enum.ts';\nimport type { SelectResult } from '~/query-builders/select.types.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { tracer } from '~/tracing.ts';\nimport type { Assume, Equal } from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { AnyColumn } from '../column.ts';\nimport { Column } from '../column.ts';\nimport { IsAlias, Table } from '../table.ts';\n\n/**\n * This class is used to indicate a primitive param value that is used in `sql` tag.\n * It is only used on type level and is never instantiated at runtime.\n * If you see a value of this type in the code, its runtime value is actually the primitive param value.\n */\nexport class FakePrimitiveParam {\n\tstatic readonly [entityKind]: string = 'FakePrimitiveParam';\n}\n\nexport type Chunk =\n\t| string\n\t| Table\n\t| View\n\t| AnyColumn\n\t| Name\n\t| Param\n\t| Placeholder\n\t| SQL;\n\nexport interface BuildQueryConfig {\n\tcasing: CasingCache;\n\tescapeName(name: string): string;\n\tescapeParam(num: number, value: unknown): string;\n\tescapeString(str: string): string;\n\tprepareTyping?: (encoder: DriverValueEncoder<unknown, unknown>) => QueryTypingsValue;\n\tparamStartIndex?: { value: number };\n\tinlineParams?: boolean;\n\tinvokeSource?: 'indexes' | undefined;\n}\n\nexport type QueryTypingsValue = 'json' | 'decimal' | 'time' | 'timestamp' | 'uuid' | 'date' | 'none';\n\nexport interface Query {\n\tsql: string;\n\tparams: unknown[];\n}\n\nexport interface QueryWithTypings extends Query {\n\ttypings?: QueryTypingsValue[];\n}\n\n/**\n * Any value that implements the `getSQL` method. The implementations include:\n * - `Table`\n * - `Column`\n * - `View`\n * - `Subquery`\n * - `SQL`\n * - `SQL.Aliased`\n * - `Placeholder`\n * - `Param`\n */\nexport interface SQLWrapper {\n\tgetSQL(): SQL;\n\tshouldOmitSQLParens?(): boolean;\n}\n\nexport function isSQLWrapper(value: unknown): value is SQLWrapper {\n\treturn value !== null && value !== undefined && typeof (value as any).getSQL === 'function';\n}\n\nfunction mergeQueries(queries: QueryWithTypings[]): QueryWithTypings {\n\tconst result: QueryWithTypings = { sql: '', params: [] };\n\tfor (const query of queries) {\n\t\tresult.sql += query.sql;\n\t\tresult.params.push(...query.params);\n\t\tif (query.typings?.length) {\n\t\t\tif (!result.typings) {\n\t\t\t\tresult.typings = [];\n\t\t\t}\n\t\t\tresult.typings.push(...query.typings);\n\t\t}\n\t}\n\treturn result;\n}\n\nexport class StringChunk implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'StringChunk';\n\n\treadonly value: string[];\n\n\tconstructor(value: string | string[]) {\n\t\tthis.value = Array.isArray(value) ? value : [value];\n\t}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\nexport class SQL<T = unknown> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'SQL';\n\n\tdeclare _: {\n\t\tbrand: 'SQL';\n\t\ttype: T;\n\t};\n\n\t/** @internal */\n\tdecoder: DriverValueDecoder<T, any> = noopDecoder;\n\tprivate shouldInlineParams = false;\n\n\tconstructor(readonly queryChunks: SQLChunk[]) {}\n\n\tappend(query: SQL): this {\n\t\tthis.queryChunks.push(...query.queryChunks);\n\t\treturn this;\n\t}\n\n\ttoQuery(config: BuildQueryConfig): QueryWithTypings {\n\t\treturn tracer.startActiveSpan('drizzle.buildSQL', (span) => {\n\t\t\tconst query = this.buildQueryFromSourceParams(this.queryChunks, config);\n\t\t\tspan?.setAttributes({\n\t\t\t\t'drizzle.query.text': query.sql,\n\t\t\t\t'drizzle.query.params': JSON.stringify(query.params),\n\t\t\t});\n\t\t\treturn query;\n\t\t});\n\t}\n\n\tbuildQueryFromSourceParams(chunks: SQLChunk[], _config: BuildQueryConfig): Query {\n\t\tconst config = Object.assign({}, _config, {\n\t\t\tinlineParams: _config.inlineParams || this.shouldInlineParams,\n\t\t\tparamStartIndex: _config.paramStartIndex || { value: 0 },\n\t\t});\n\n\t\tconst {\n\t\t\tcasing,\n\t\t\tescapeName,\n\t\t\tescapeParam,\n\t\t\tprepareTyping,\n\t\t\tinlineParams,\n\t\t\tparamStartIndex,\n\t\t} = config;\n\n\t\treturn mergeQueries(chunks.map((chunk): QueryWithTypings => {\n\t\t\tif (is(chunk, StringChunk)) {\n\t\t\t\treturn { sql: chunk.value.join(''), params: [] };\n\t\t\t}\n\n\t\t\tif (is(chunk, Name)) {\n\t\t\t\treturn { sql: escapeName(chunk.value), params: [] };\n\t\t\t}\n\n\t\t\tif (chunk === undefined) {\n\t\t\t\treturn { sql: '', params: [] };\n\t\t\t}\n\n\t\t\tif (Array.isArray(chunk)) {\n\t\t\t\tconst result: SQLChunk[] = [new StringChunk('(')];\n\t\t\t\tfor (const [i, p] of chunk.entries()) {\n\t\t\t\t\tresult.push(p);\n\t\t\t\t\tif (i < chunk.length - 1) {\n\t\t\t\t\t\tresult.push(new StringChunk(', '));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult.push(new StringChunk(')'));\n\t\t\t\treturn this.buildQueryFromSourceParams(result, config);\n\t\t\t}\n\n\t\t\tif (is(chunk, SQL)) {\n\t\t\t\treturn this.buildQueryFromSourceParams(chunk.queryChunks, {\n\t\t\t\t\t...config,\n\t\t\t\t\tinlineParams: inlineParams || chunk.shouldInlineParams,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (is(chunk, Table)) {\n\t\t\t\tconst schemaName = chunk[Table.Symbol.Schema];\n\t\t\t\tconst tableName = chunk[Table.Symbol.Name];\n\t\t\t\treturn {\n\t\t\t\t\tsql: schemaName === undefined || chunk[IsAlias]\n\t\t\t\t\t\t? escapeName(tableName)\n\t\t\t\t\t\t: escapeName(schemaName) + '.' + escapeName(tableName),\n\t\t\t\t\tparams: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(chunk, Column)) {\n\t\t\t\tconst columnName = casing.getColumnCasing(chunk);\n\t\t\t\tif (_config.invokeSource === 'indexes') {\n\t\t\t\t\treturn { sql: escapeName(columnName), params: [] };\n\t\t\t\t}\n\n\t\t\t\tconst schemaName = chunk.table[Table.Symbol.Schema];\n\t\t\t\treturn {\n\t\t\t\t\tsql: chunk.table[IsAlias] || schemaName === undefined\n\t\t\t\t\t\t? escapeName(chunk.table[Table.Symbol.Name]) + '.' + escapeName(columnName)\n\t\t\t\t\t\t: escapeName(schemaName) + '.' + escapeName(chunk.table[Table.Symbol.Name]) + '.'\n\t\t\t\t\t\t\t+ escapeName(columnName),\n\t\t\t\t\tparams: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(chunk, View)) {\n\t\t\t\tconst schemaName = chunk[ViewBaseConfig].schema;\n\t\t\t\tconst viewName = chunk[ViewBaseConfig].name;\n\t\t\t\treturn {\n\t\t\t\t\tsql: schemaName === undefined || chunk[ViewBaseConfig].isAlias\n\t\t\t\t\t\t? escapeName(viewName)\n\t\t\t\t\t\t: escapeName(schemaName) + '.' + escapeName(viewName),\n\t\t\t\t\tparams: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(chunk, Param)) {\n\t\t\t\tif (is(chunk.value, Placeholder)) {\n\t\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ['none'] };\n\t\t\t\t}\n\n\t\t\t\tconst mappedValue = chunk.value === null ? null : chunk.encoder.mapToDriverValue(chunk.value);\n\n\t\t\t\tif (is(mappedValue, SQL)) {\n\t\t\t\t\treturn this.buildQueryFromSourceParams([mappedValue], config);\n\t\t\t\t}\n\n\t\t\t\tif (inlineParams) {\n\t\t\t\t\treturn { sql: this.mapInlineParam(mappedValue, config), params: [] };\n\t\t\t\t}\n\n\t\t\t\tlet typings: QueryTypingsValue[] = ['none'];\n\t\t\t\tif (prepareTyping) {\n\t\t\t\t\ttypings = [prepareTyping(chunk.encoder)];\n\t\t\t\t}\n\n\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, mappedValue), params: [mappedValue], typings };\n\t\t\t}\n\n\t\t\tif (is(chunk, Placeholder)) {\n\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ['none'] };\n\t\t\t}\n\n\t\t\tif (is(chunk, SQL.Aliased) && chunk.fieldAlias !== undefined) {\n\t\t\t\treturn { sql: escapeName(chunk.fieldAlias), params: [] };\n\t\t\t}\n\n\t\t\tif (is(chunk, Subquery)) {\n\t\t\t\tif (chunk._.isWith) {\n\t\t\t\t\treturn { sql: escapeName(chunk._.alias), params: [] };\n\t\t\t\t}\n\t\t\t\treturn this.buildQueryFromSourceParams([\n\t\t\t\t\tnew StringChunk('('),\n\t\t\t\t\tchunk._.sql,\n\t\t\t\t\tnew StringChunk(') '),\n\t\t\t\t\tnew Name(chunk._.alias),\n\t\t\t\t], config);\n\t\t\t}\n\n\t\t\tif (isPgEnum(chunk)) {\n\t\t\t\tif (chunk.schema) {\n\t\t\t\t\treturn { sql: escapeName(chunk.schema) + '.' + escapeName(chunk.enumName), params: [] };\n\t\t\t\t}\n\t\t\t\treturn { sql: escapeName(chunk.enumName), params: [] };\n\t\t\t}\n\n\t\t\tif (isSQLWrapper(chunk)) {\n\t\t\t\tif (chunk.shouldOmitSQLParens?.()) {\n\t\t\t\t\treturn this.buildQueryFromSourceParams([chunk.getSQL()], config);\n\t\t\t\t}\n\t\t\t\treturn this.buildQueryFromSourceParams([\n\t\t\t\t\tnew StringChunk('('),\n\t\t\t\t\tchunk.getSQL(),\n\t\t\t\t\tnew StringChunk(')'),\n\t\t\t\t], config);\n\t\t\t}\n\n\t\t\tif (inlineParams) {\n\t\t\t\treturn { sql: this.mapInlineParam(chunk, config), params: [] };\n\t\t\t}\n\n\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ['none'] };\n\t\t}));\n\t}\n\n\tprivate mapInlineParam(\n\t\tchunk: unknown,\n\t\t{ escapeString }: BuildQueryConfig,\n\t): string {\n\t\tif (chunk === null) {\n\t\t\treturn 'null';\n\t\t}\n\t\tif (typeof chunk === 'number' || typeof chunk === 'boolean') {\n\t\t\treturn chunk.toString();\n\t\t}\n\t\tif (typeof chunk === 'string') {\n\t\t\treturn escapeString(chunk);\n\t\t}\n\t\tif (typeof chunk === 'object') {\n\t\t\tconst mappedValueAsString = chunk.toString();\n\t\t\tif (mappedValueAsString === '[object Object]') {\n\t\t\t\treturn escapeString(JSON.stringify(chunk));\n\t\t\t}\n\t\t\treturn escapeString(mappedValueAsString);\n\t\t}\n\t\tthrow new Error('Unexpected param value: ' + chunk);\n\t}\n\n\tgetSQL(): SQL {\n\t\treturn this;\n\t}\n\n\tas(alias: string): SQL.Aliased<T>;\n\t/**\n\t * @deprecated\n\t * Use ``sql<DataType>`query`.as(alias)`` instead.\n\t */\n\tas<TData>(): SQL<TData>;\n\t/**\n\t * @deprecated\n\t * Use ``sql<DataType>`query`.as(alias)`` instead.\n\t */\n\tas<TData>(alias: string): SQL.Aliased<TData>;\n\tas(alias?: string): SQL<T> | SQL.Aliased<T> {\n\t\t// TODO: remove with deprecated overloads\n\t\tif (alias === undefined) {\n\t\t\treturn this;\n\t\t}\n\n\t\treturn new SQL.Aliased(this, alias);\n\t}\n\n\tmapWith<\n\t\tTDecoder extends\n\t\t\t| DriverValueDecoder<any, any>\n\t\t\t| DriverValueDecoder<any, any>['mapFromDriverValue'],\n\t>(decoder: TDecoder): SQL<GetDecoderResult<TDecoder>> {\n\t\tthis.decoder = typeof decoder === 'function' ? { mapFromDriverValue: decoder } : decoder;\n\t\treturn this as SQL<GetDecoderResult<TDecoder>>;\n\t}\n\n\tinlineParams(): this {\n\t\tthis.shouldInlineParams = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * This method is used to conditionally include a part of the query.\n\t *\n\t * @param condition - Condition to check\n\t * @returns itself if the condition is `true`, otherwise `undefined`\n\t */\n\tif(condition: any | undefined): this | undefined {\n\t\treturn condition ? this : undefined;\n\t}\n}\n\nexport type GetDecoderResult<T> = T extends Column ? T['_']['data'] : T extends\n\t| DriverValueDecoder<infer TData, any>\n\t| DriverValueDecoder<infer TData, any>['mapFromDriverValue'] ? TData\n: never;\n\n/**\n * Any DB name (table, column, index etc.)\n */\nexport class Name implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Name';\n\n\tprotected brand!: 'Name';\n\n\tconstructor(readonly value: string) {}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/**\n * Any DB name (table, column, index etc.)\n * @deprecated Use `sql.identifier` instead.\n */\nexport function name(value: string): Name {\n\treturn new Name(value);\n}\n\nexport interface DriverValueDecoder<TData, TDriverParam> {\n\tmapFromDriverValue(value: TDriverParam): TData;\n}\n\nexport interface DriverValueEncoder<TData, TDriverParam> {\n\tmapToDriverValue(value: TData): TDriverParam | SQL;\n}\n\nexport function isDriverValueEncoder(value: unknown): value is DriverValueEncoder<any, any> {\n\treturn typeof value === 'object' && value !== null && 'mapToDriverValue' in value\n\t\t&& typeof (value as any).mapToDriverValue === 'function';\n}\n\nexport const noopDecoder: DriverValueDecoder<any, any> = {\n\tmapFromDriverValue: (value) => value,\n};\n\nexport const noopEncoder: DriverValueEncoder<any, any> = {\n\tmapToDriverValue: (value) => value,\n};\n\nexport interface DriverValueMapper<TData, TDriverParam>\n\textends DriverValueDecoder<TData, TDriverParam>, DriverValueEncoder<TData, TDriverParam>\n{}\n\nexport const noopMapper: DriverValueMapper<any, any> = {\n\t...noopDecoder,\n\t...noopEncoder,\n};\n\n/** Parameter value that is optionally bound to an encoder (for example, a column). */\nexport class Param<TDataType = unknown, TDriverParamType = TDataType> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Param';\n\n\tprotected brand!: 'BoundParamValue';\n\n\t/**\n\t * @param value - Parameter value\n\t * @param encoder - Encoder to convert the value to a driver parameter\n\t */\n\tconstructor(\n\t\treadonly value: TDataType,\n\t\treadonly encoder: DriverValueEncoder<TDataType, TDriverParamType> = noopEncoder,\n\t) {}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/** @deprecated Use `sql.param` instead. */\nexport function param<TData, TDriver>(\n\tvalue: TData,\n\tencoder?: DriverValueEncoder<TData, TDriver>,\n): Param<TData, TDriver> {\n\treturn new Param(value, encoder);\n}\n\n/**\n * Anything that can be passed to the `` sql`...` `` tagged function.\n */\nexport type SQLChunk =\n\t| StringChunk\n\t| SQLChunk[]\n\t| SQLWrapper\n\t| SQL\n\t| Table\n\t| View\n\t| Subquery\n\t| AnyColumn\n\t| Param\n\t| Name\n\t| undefined\n\t| FakePrimitiveParam\n\t| Placeholder;\n\nexport function sql<T>(strings: TemplateStringsArray, ...params: any[]): SQL<T>;\n/*\n\tThe type of `params` is specified as `SQLChunk[]`, but that's slightly incorrect -\n\tin runtime, users won't pass `FakePrimitiveParam` instances as `params` - they will pass primitive values\n\twhich will be wrapped in `Param`. That's why the overload specifies `params` as `any[]` and not as `SQLSourceParam[]`.\n\tThis type is used to make our lives easier and the type checker happy.\n*/\nexport function sql(strings: TemplateStringsArray, ...params: SQLChunk[]): SQL {\n\tconst queryChunks: SQLChunk[] = [];\n\tif (params.length > 0 || (strings.length > 0 && strings[0] !== '')) {\n\t\tqueryChunks.push(new StringChunk(strings[0]!));\n\t}\n\tfor (const [paramIndex, param] of params.entries()) {\n\t\tqueryChunks.push(param, new StringChunk(strings[paramIndex + 1]!));\n\t}\n\n\treturn new SQL(queryChunks);\n}\n\nexport namespace sql {\n\texport function empty(): SQL {\n\t\treturn new SQL([]);\n\t}\n\n\t/** @deprecated - use `sql.join()` */\n\texport function fromList(list: SQLChunk[]): SQL {\n\t\treturn new SQL(list);\n\t}\n\n\t/**\n\t * Convenience function to create an SQL query from a raw string.\n\t * @param str The raw SQL query string.\n\t */\n\texport function raw(str: string): SQL {\n\t\treturn new SQL([new StringChunk(str)]);\n\t}\n\n\t/**\n\t * Join a list of SQL chunks with a separator.\n\t * @example\n\t * ```ts\n\t * const query = sql.join([sql`a`, sql`b`, sql`c`]);\n\t * // sql`abc`\n\t * ```\n\t * @example\n\t * ```ts\n\t * const query = sql.join([sql`a`, sql`b`, sql`c`], sql`, `);\n\t * // sql`a, b, c`\n\t * ```\n\t */\n\texport function join(chunks: SQLChunk[], separator?: SQLChunk): SQL {\n\t\tconst result: SQLChunk[] = [];\n\t\tfor (const [i, chunk] of chunks.entries()) {\n\t\t\tif (i > 0 && separator !== undefined) {\n\t\t\t\tresult.push(separator);\n\t\t\t}\n\t\t\tresult.push(chunk);\n\t\t}\n\t\treturn new SQL(result);\n\t}\n\n\t/**\n\t * Create a SQL chunk that represents a DB identifier (table, column, index etc.).\n\t * When used in a query, the identifier will be escaped based on the DB engine.\n\t * For example, in PostgreSQL, identifiers are escaped with double quotes.\n\t *\n\t * **WARNING: This function does not offer any protection against SQL injections, so you must validate any user input beforehand.**\n\t *\n\t * @example ```ts\n\t * const query = sql`SELECT * FROM ${sql.identifier('my-table')}`;\n\t * // 'SELECT * FROM \"my-table\"'\n\t * ```\n\t */\n\texport function identifier(value: string): Name {\n\t\treturn new Name(value);\n\t}\n\n\texport function placeholder<TName extends string>(name: TName): Placeholder<TName> {\n\t\treturn new Placeholder(name);\n\t}\n\n\texport function param<TData, TDriver>(\n\t\tvalue: TData,\n\t\tencoder?: DriverValueEncoder<TData, TDriver>,\n\t): Param<TData, TDriver> {\n\t\treturn new Param(value, encoder);\n\t}\n}\n\nexport namespace SQL {\n\texport class Aliased<T = unknown> implements SQLWrapper {\n\t\tstatic readonly [entityKind]: string = 'SQL.Aliased';\n\n\t\tdeclare _: {\n\t\t\tbrand: 'SQL.Aliased';\n\t\t\ttype: T;\n\t\t};\n\n\t\t/** @internal */\n\t\tisSelectionField = false;\n\n\t\tconstructor(\n\t\t\treadonly sql: SQL,\n\t\t\treadonly fieldAlias: string,\n\t\t) {}\n\n\t\tgetSQL(): SQL {\n\t\t\treturn this.sql;\n\t\t}\n\n\t\t/** @internal */\n\t\tclone() {\n\t\t\treturn new Aliased(this.sql, this.fieldAlias);\n\t\t}\n\t}\n}\n\nexport class Placeholder<TName extends string = string, TValue = any> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Placeholder';\n\n\tdeclare protected: TValue;\n\n\tconstructor(readonly name: TName) {}\n\n\tgetSQL(): SQL {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/** @deprecated Use `sql.placeholder` instead. */\nexport function placeholder<TName extends string>(name: TName): Placeholder<TName> {\n\treturn new Placeholder(name);\n}\n\nexport function fillPlaceholders(params: unknown[], values: Record<string, unknown>): unknown[] {\n\treturn params.map((p) => {\n\t\tif (is(p, Placeholder)) {\n\t\t\tif (!(p.name in values)) {\n\t\t\t\tthrow new Error(`No value for placeholder \"${p.name}\" was provided`);\n\t\t\t}\n\n\t\t\treturn values[p.name];\n\t\t}\n\n\t\tif (is(p, Param) && is(p.value, Placeholder)) {\n\t\t\tif (!(p.value.name in values)) {\n\t\t\t\tthrow new Error(`No value for placeholder \"${p.value.name}\" was provided`);\n\t\t\t}\n\n\t\t\treturn p.encoder.mapToDriverValue(values[p.value.name]);\n\t\t}\n\n\t\treturn p;\n\t});\n}\n\nexport type ColumnsSelection = Record<string, unknown>;\n\nconst IsDrizzleView = Symbol.for('drizzle:IsDrizzleView');\n\nexport abstract class View<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelection extends ColumnsSelection = ColumnsSelection,\n> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'View';\n\n\tdeclare _: {\n\t\tbrand: 'View';\n\t\tviewBrand: string;\n\t\tname: TName;\n\t\texisting: TExisting;\n\t\tselectedFields: TSelection;\n\t};\n\n\t/** @internal */\n\t[ViewBaseConfig]: {\n\t\tname: TName;\n\t\toriginalName: TName;\n\t\tschema: string | undefined;\n\t\tselectedFields: ColumnsSelection;\n\t\tisExisting: TExisting;\n\t\tquery: TExisting extends true ? undefined : SQL;\n\t\tisAlias: boolean;\n\t};\n\n\t/** @internal */\n\t[IsDrizzleView] = true;\n\n\tdeclare readonly $inferSelect: InferSelectViewModel<View<Assume<TName, string>, TExisting, TSelection>>;\n\n\tconstructor(\n\t\t{ name, schema, selectedFields, query }: {\n\t\t\tname: TName;\n\t\t\tschema: string | undefined;\n\t\t\tselectedFields: ColumnsSelection;\n\t\t\tquery: SQL | undefined;\n\t\t},\n\t) {\n\t\tthis[ViewBaseConfig] = {\n\t\t\tname,\n\t\t\toriginalName: name,\n\t\t\tschema,\n\t\t\tselectedFields,\n\t\t\tquery: query as (TExisting extends true ? undefined : SQL),\n\t\t\tisExisting: !query as TExisting,\n\t\t\tisAlias: false,\n\t\t};\n\t}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\nexport function isView(view: unknown): view is View {\n\treturn typeof view === 'object' && view !== null && IsDrizzleView in view;\n}\n\nexport function getViewName<T extends View>(view: T): T['_']['name'] {\n\treturn view[ViewBaseConfig].name;\n}\n\nexport type InferSelectViewModel<TView extends View> =\n\tEqual<TView['_']['selectedFields'], { [x: string]: unknown }> extends true ? { [x: string]: unknown }\n\t\t: SelectResult<\n\t\t\tTView['_']['selectedFields'],\n\t\t\t'single',\n\t\t\tRecord<TView['_']['name'], 'not-null'>\n\t\t>;\n\n// Defined separately from the Column class to resolve circular dependency\nColumn.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n\n// Defined separately from the Table class to resolve circular dependency\nTable.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n\n// Defined separately from the Column class to resolve circular dependency\nSubquery.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport type { NonArray, Writable } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\n// Enum as ts enum\n\nexport type PgEnumObjectColumnBuilderInitial<TName extends string, TValues extends object> = PgEnumObjectColumnBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgEnumObjectColumn';\n\tdata: TValues[keyof TValues];\n\tenumValues: string[];\n\tdriverParam: string;\n}>;\n\nexport interface PgEnumObject<TValues extends object> {\n\t(): PgEnumObjectColumnBuilderInitial<'', TValues>;\n\t<TName extends string>(name: TName): PgEnumObjectColumnBuilderInitial<TName, TValues>;\n\t<TName extends string>(name?: TName): PgEnumObjectColumnBuilderInitial<TName, TValues>;\n\n\treadonly enumName: string;\n\treadonly enumValues: string[];\n\treadonly schema: string | undefined;\n\t/** @internal */\n\t[isPgEnumSym]: true;\n}\n\nexport class PgEnumObjectColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<'string', 'PgEnumObjectColumn'> & { enumValues: string[] },\n> extends PgColumnBuilder<T, { enum: PgEnumObject<any> }> {\n\tstatic override readonly [entityKind]: string = 'PgEnumObjectColumnBuilder';\n\n\tconstructor(name: T['name'], enumInstance: PgEnumObject<any>) {\n\t\tsuper(name, 'string', 'PgEnumObjectColumn');\n\t\tthis.config.enum = enumInstance;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgEnumObjectColumn<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgEnumObjectColumn<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgEnumObjectColumn<T extends ColumnBaseConfig<'string', 'PgEnumObjectColumn'> & { enumValues: object }>\n\textends PgColumn<T, { enum: PgEnumObject<object> }>\n{\n\tstatic override readonly [entityKind]: string = 'PgEnumObjectColumn';\n\n\treadonly enum;\n\toverride readonly enumValues = this.config.enum.enumValues;\n\n\tconstructor(\n\t\ttable: AnyPgTable<{ name: T['tableName'] }>,\n\t\tconfig: PgEnumObjectColumnBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.enum = config.enum;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn this.enum.enumName;\n\t}\n}\n\n// Enum as string union\n\nexport type PgEnumColumnBuilderInitial<TName extends string, TValues extends [string, ...string[]]> =\n\tPgEnumColumnBuilder<{\n\t\tname: TName;\n\t\tdataType: 'string';\n\t\tcolumnType: 'PgEnumColumn';\n\t\tdata: TValues[number];\n\t\tenumValues: TValues;\n\t\tdriverParam: string;\n\t}>;\n\nconst isPgEnumSym = Symbol.for('drizzle:isPgEnum');\nexport interface PgEnum<TValues extends [string, ...string[]]> {\n\t(): PgEnumColumnBuilderInitial<'', TValues>;\n\t<TName extends string>(name: TName): PgEnumColumnBuilderInitial<TName, TValues>;\n\t<TName extends string>(name?: TName): PgEnumColumnBuilderInitial<TName, TValues>;\n\n\treadonly enumName: string;\n\treadonly enumValues: TValues;\n\treadonly schema: string | undefined;\n\t/** @internal */\n\t[isPgEnumSym]: true;\n}\n\nexport function isPgEnum(obj: unknown): obj is PgEnum<[string, ...string[]]> {\n\treturn !!obj && typeof obj === 'function' && isPgEnumSym in obj && obj[isPgEnumSym] === true;\n}\n\nexport class PgEnumColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<'string', 'PgEnumColumn'> & { enumValues: [string, ...string[]] },\n> extends PgColumnBuilder<T, { enum: PgEnum<T['enumValues']> }> {\n\tstatic override readonly [entityKind]: string = 'PgEnumColumnBuilder';\n\n\tconstructor(name: T['name'], enumInstance: PgEnum<T['enumValues']>) {\n\t\tsuper(name, 'string', 'PgEnumColumn');\n\t\tthis.config.enum = enumInstance;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgEnumColumn<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgEnumColumn<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgEnumColumn<T extends ColumnBaseConfig<'string', 'PgEnumColumn'> & { enumValues: [string, ...string[]] }>\n\textends PgColumn<T, { enum: PgEnum<T['enumValues']> }>\n{\n\tstatic override readonly [entityKind]: string = 'PgEnumColumn';\n\n\treadonly enum = this.config.enum;\n\toverride readonly enumValues = this.config.enum.enumValues;\n\n\tconstructor(\n\t\ttable: AnyPgTable<{ name: T['tableName'] }>,\n\t\tconfig: PgEnumColumnBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.enum = config.enum;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn this.enum.enumName;\n\t}\n}\n\nexport function pgEnum<U extends string, T extends Readonly<[U, ...U[]]>>(\n\tenumName: string,\n\tvalues: T | Writable<T>,\n): PgEnum<Writable<T>>;\n\nexport function pgEnum<E extends Record<string, string>>(\n\tenumName: string,\n\tenumObj: NonArray<E>,\n): PgEnumObject<E>;\n\nexport function pgEnum(\n\tenumName: any,\n\tinput: any,\n): any {\n\treturn Array.isArray(input)\n\t\t? pgEnumWithSchema(enumName, [...input] as [string, ...string[]], undefined)\n\t\t: pgEnumObjectWithSchema(enumName, input, undefined);\n}\n\n/** @internal */\nexport function pgEnumWithSchema<U extends string, T extends Readonly<[U, ...U[]]>>(\n\tenumName: string,\n\tvalues: T | Writable<T>,\n\tschema?: string,\n): PgEnum<Writable<T>> {\n\tconst enumInstance: PgEnum<Writable<T>> = Object.assign(\n\t\t<TName extends string>(name?: TName): PgEnumColumnBuilderInitial<TName, Writable<T>> =>\n\t\t\tnew PgEnumColumnBuilder(name ?? '' as TName, enumInstance),\n\t\t{\n\t\t\tenumName,\n\t\t\tenumValues: values,\n\t\t\tschema,\n\t\t\t[isPgEnumSym]: true,\n\t\t} as const,\n\t);\n\n\treturn enumInstance;\n}\n\n/** @internal */\nexport function pgEnumObjectWithSchema<T extends object>(\n\tenumName: string,\n\tvalues: T,\n\tschema?: string,\n): PgEnumObject<T> {\n\tconst enumInstance: PgEnumObject<T> = Object.assign(\n\t\t<TName extends string>(name?: TName): PgEnumObjectColumnBuilderInitial<TName, T> =>\n\t\t\tnew PgEnumObjectColumnBuilder(name ?? '' as TName, enumInstance),\n\t\t{\n\t\t\tenumName,\n\t\t\tenumValues: Object.values(values),\n\t\t\tschema,\n\t\t\t[isPgEnumSym]: true,\n\t\t} as const,\n\t);\n\n\treturn enumInstance;\n}\n", "import type {\n\tColumnBuilderBase,\n\tColumnBuilderBaseConfig,\n\tColumnBuilderExtraConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tHasGenerated,\n\tMakeColumnConfig,\n} from '~/column-builder.ts';\nimport { ColumnBuilder } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { Column } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport type { Simplify, Update } from '~/utils.ts';\n\nimport type { ForeignKey, UpdateDeleteAction } from '~/pg-core/foreign-keys.ts';\nimport { ForeignKeyBuilder } from '~/pg-core/foreign-keys.ts';\nimport type { AnyPgTable, PgTable } from '~/pg-core/table.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport { iife } from '~/tracing-utils.ts';\nimport type { PgIndexOpClass } from '../indexes.ts';\nimport { uniqueKeyName } from '../unique-constraint.ts';\nimport { makePgArray, parsePgArray } from '../utils/array.ts';\n\nexport interface ReferenceConfig {\n\tref: () => PgColumn;\n\tactions: {\n\t\tonUpdate?: UpdateDeleteAction;\n\t\tonDelete?: UpdateDeleteAction;\n\t};\n}\n\nexport interface PgColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> extends ColumnBuilderBase<T, TTypeConfig & { dialect: 'pg' }> {}\n\nexport abstract class PgColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = ColumnBuilderExtraConfig,\n> extends ColumnBuilder<T, TRuntimeConfig, TTypeConfig & { dialect: 'pg' }, TExtraConfig>\n\timplements PgColumnBuilderBase<T, TTypeConfig>\n{\n\tprivate foreignKeyConfigs: ReferenceConfig[] = [];\n\n\tstatic override readonly [entityKind]: string = 'PgColumnBuilder';\n\n\tarray<TSize extends number | undefined = undefined>(size?: TSize): PgArrayBuilder<\n\t\t& {\n\t\t\tname: T['name'];\n\t\t\tdataType: 'array';\n\t\t\tcolumnType: 'PgArray';\n\t\t\tdata: T['data'][];\n\t\t\tdriverParam: T['driverParam'][] | string;\n\t\t\tenumValues: T['enumValues'];\n\t\t\tsize: TSize;\n\t\t\tbaseBuilder: T;\n\t\t}\n\t\t& (T extends { notNull: true } ? { notNull: true } : {})\n\t\t& (T extends { hasDefault: true } ? { hasDefault: true } : {}),\n\t\tT\n\t> {\n\t\treturn new PgArrayBuilder(this.config.name, this as PgColumnBuilder<any, any>, size as any);\n\t}\n\n\treferences(\n\t\tref: ReferenceConfig['ref'],\n\t\tactions: ReferenceConfig['actions'] = {},\n\t): this {\n\t\tthis.foreignKeyConfigs.push({ ref, actions });\n\t\treturn this;\n\t}\n\n\tunique(\n\t\tname?: string,\n\t\tconfig?: { nulls: 'distinct' | 'not distinct' },\n\t): this {\n\t\tthis.config.isUnique = true;\n\t\tthis.config.uniqueName = name;\n\t\tthis.config.uniqueType = config?.nulls;\n\t\treturn this;\n\t}\n\n\tgeneratedAlwaysAs(as: SQL | T['data'] | (() => SQL)): HasGenerated<this, {\n\t\ttype: 'always';\n\t}> {\n\t\tthis.config.generated = {\n\t\t\tas,\n\t\t\ttype: 'always',\n\t\t\tmode: 'stored',\n\t\t};\n\t\treturn this as HasGenerated<this, {\n\t\t\ttype: 'always';\n\t\t}>;\n\t}\n\n\t/** @internal */\n\tbuildForeignKeys(column: PgColumn, table: PgTable): ForeignKey[] {\n\t\treturn this.foreignKeyConfigs.map(({ ref, actions }) => {\n\t\t\treturn iife(\n\t\t\t\t(ref, actions) => {\n\t\t\t\t\tconst builder = new ForeignKeyBuilder(() => {\n\t\t\t\t\t\tconst foreignColumn = ref();\n\t\t\t\t\t\treturn { columns: [column], foreignColumns: [foreignColumn] };\n\t\t\t\t\t});\n\t\t\t\t\tif (actions.onUpdate) {\n\t\t\t\t\t\tbuilder.onUpdate(actions.onUpdate);\n\t\t\t\t\t}\n\t\t\t\t\tif (actions.onDelete) {\n\t\t\t\t\t\tbuilder.onDelete(actions.onDelete);\n\t\t\t\t\t}\n\t\t\t\t\treturn builder.build(table);\n\t\t\t\t},\n\t\t\t\tref,\n\t\t\t\tactions,\n\t\t\t);\n\t\t});\n\t}\n\n\t/** @internal */\n\tabstract build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgColumn<MakeColumnConfig<T, TTableName>>;\n\n\t/** @internal */\n\tbuildExtraConfigColumn<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): ExtraConfigColumn {\n\t\treturn new ExtraConfigColumn(table, this.config);\n\t}\n}\n\n// To understand how to use `PgColumn` and `PgColumn`, see `Column` and `AnyColumn` documentation.\nexport abstract class PgColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = {},\n\tTTypeConfig extends object = {},\n> extends Column<T, TRuntimeConfig, TTypeConfig & { dialect: 'pg' }> {\n\tstatic override readonly [entityKind]: string = 'PgColumn';\n\n\tconstructor(\n\t\toverride readonly table: PgTable,\n\t\tconfig: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tif (!config.uniqueName) {\n\t\t\tconfig.uniqueName = uniqueKeyName(table, [config.name]);\n\t\t}\n\t\tsuper(table, config);\n\t}\n}\n\nexport type IndexedExtraConfigType = { order?: 'asc' | 'desc'; nulls?: 'first' | 'last'; opClass?: string };\n\nexport class ExtraConfigColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n> extends PgColumn<T, IndexedExtraConfigType> {\n\tstatic override readonly [entityKind]: string = 'ExtraConfigColumn';\n\n\toverride getSQLType(): string {\n\t\treturn this.getSQLType();\n\t}\n\n\tindexConfig: IndexedExtraConfigType = {\n\t\torder: this.config.order ?? 'asc',\n\t\tnulls: this.config.nulls ?? 'last',\n\t\topClass: this.config.opClass,\n\t};\n\tdefaultConfig: IndexedExtraConfigType = {\n\t\torder: 'asc',\n\t\tnulls: 'last',\n\t\topClass: undefined,\n\t};\n\n\tasc(): Omit<this, 'asc' | 'desc'> {\n\t\tthis.indexConfig.order = 'asc';\n\t\treturn this;\n\t}\n\n\tdesc(): Omit<this, 'asc' | 'desc'> {\n\t\tthis.indexConfig.order = 'desc';\n\t\treturn this;\n\t}\n\n\tnullsFirst(): Omit<this, 'nullsFirst' | 'nullsLast'> {\n\t\tthis.indexConfig.nulls = 'first';\n\t\treturn this;\n\t}\n\n\tnullsLast(): Omit<this, 'nullsFirst' | 'nullsLast'> {\n\t\tthis.indexConfig.nulls = 'last';\n\t\treturn this;\n\t}\n\n\t/**\n\t * ### PostgreSQL documentation quote\n\t *\n\t * > An operator class with optional parameters can be specified for each column of an index.\n\t * The operator class identifies the operators to be used by the index for that column.\n\t * For example, a B-tree index on four-byte integers would use the int4_ops class;\n\t * this operator class includes comparison functions for four-byte integers.\n\t * In practice the default operator class for the column's data type is usually sufficient.\n\t * The main point of having operator classes is that for some data types, there could be more than one meaningful ordering.\n\t * For example, we might want to sort a complex-number data type either by absolute value or by real part.\n\t * We could do this by defining two operator classes for the data type and then selecting the proper class when creating an index.\n\t * More information about operator classes check:\n\t *\n\t * ### Useful links\n\t * https://www.postgresql.org/docs/current/sql-createindex.html\n\t *\n\t * https://www.postgresql.org/docs/current/indexes-opclass.html\n\t *\n\t * https://www.postgresql.org/docs/current/xindex.html\n\t *\n\t * ### Additional types\n\t * If you have the `pg_vector` extension installed in your database, you can use the\n\t * `vector_l2_ops`, `vector_ip_ops`, `vector_cosine_ops`, `vector_l1_ops`, `bit_hamming_ops`, `bit_jaccard_ops`, `halfvec_l2_ops`, `sparsevec_l2_ops` options, which are predefined types.\n\t *\n\t * **You can always specify any string you want in the operator class, in case Drizzle doesn't have it natively in its types**\n\t *\n\t * @param opClass\n\t * @returns\n\t */\n\top(opClass: PgIndexOpClass): Omit<this, 'op'> {\n\t\tthis.indexConfig.opClass = opClass;\n\t\treturn this;\n\t}\n}\n\nexport class IndexedColumn {\n\tstatic readonly [entityKind]: string = 'IndexedColumn';\n\tconstructor(\n\t\tname: string | undefined,\n\t\tkeyAsName: boolean,\n\t\ttype: string,\n\t\tindexConfig: IndexedExtraConfigType,\n\t) {\n\t\tthis.name = name;\n\t\tthis.keyAsName = keyAsName;\n\t\tthis.type = type;\n\t\tthis.indexConfig = indexConfig;\n\t}\n\n\tname: string | undefined;\n\tkeyAsName: boolean;\n\ttype: string;\n\tindexConfig: IndexedExtraConfigType;\n}\n\nexport type AnyPgColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = PgColumn<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n\nexport type PgArrayColumnBuilderBaseConfig = ColumnBuilderBaseConfig<'array', 'PgArray'> & {\n\tsize: number | undefined;\n\tbaseBuilder: ColumnBuilderBaseConfig<ColumnDataType, string>;\n};\n\nexport class PgArrayBuilder<\n\tT extends PgArrayColumnBuilderBaseConfig,\n\tTBase extends ColumnBuilderBaseConfig<ColumnDataType, string> | PgArrayColumnBuilderBaseConfig,\n> extends PgColumnBuilder<\n\tT,\n\t{\n\t\tbaseBuilder: TBase extends PgArrayColumnBuilderBaseConfig ? PgArrayBuilder<\n\t\t\t\tTBase,\n\t\t\t\tTBase extends { baseBuilder: infer TBaseBuilder extends ColumnBuilderBaseConfig<any, any> } ? TBaseBuilder\n\t\t\t\t\t: never\n\t\t\t>\n\t\t\t: PgColumnBuilder<TBase, {}, Simplify<Omit<TBase, keyof ColumnBuilderBaseConfig<any, any>>>>;\n\t\tsize: T['size'];\n\t},\n\t{\n\t\tbaseBuilder: TBase extends PgArrayColumnBuilderBaseConfig ? PgArrayBuilder<\n\t\t\t\tTBase,\n\t\t\t\tTBase extends { baseBuilder: infer TBaseBuilder extends ColumnBuilderBaseConfig<any, any> } ? TBaseBuilder\n\t\t\t\t\t: never\n\t\t\t>\n\t\t\t: PgColumnBuilder<TBase, {}, Simplify<Omit<TBase, keyof ColumnBuilderBaseConfig<any, any>>>>;\n\t\tsize: T['size'];\n\t}\n> {\n\tstatic override readonly [entityKind] = 'PgArrayBuilder';\n\n\tconstructor(\n\t\tname: string,\n\t\tbaseBuilder: PgArrayBuilder<T, TBase>['config']['baseBuilder'],\n\t\tsize: T['size'],\n\t) {\n\t\tsuper(name, 'array', 'PgArray');\n\t\tthis.config.baseBuilder = baseBuilder;\n\t\tthis.config.size = size;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgArray<MakeColumnConfig<T, TTableName> & { size: T['size']; baseBuilder: T['baseBuilder'] }, TBase> {\n\t\tconst baseColumn = this.config.baseBuilder.build(table);\n\t\treturn new PgArray<MakeColumnConfig<T, TTableName> & { size: T['size']; baseBuilder: T['baseBuilder'] }, TBase>(\n\t\t\ttable as AnyPgTable<{ name: MakeColumnConfig<T, TTableName>['tableName'] }>,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t\tbaseColumn,\n\t\t);\n\t}\n}\n\nexport class PgArray<\n\tT extends ColumnBaseConfig<'array', 'PgArray'> & {\n\t\tsize: number | undefined;\n\t\tbaseBuilder: ColumnBuilderBaseConfig<ColumnDataType, string>;\n\t},\n\tTBase extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n> extends PgColumn<T, {}, { size: T['size']; baseBuilder: T['baseBuilder'] }> {\n\treadonly size: T['size'];\n\n\tstatic override readonly [entityKind]: string = 'PgArray';\n\n\tconstructor(\n\t\ttable: AnyPgTable<{ name: T['tableName'] }>,\n\t\tconfig: PgArrayBuilder<T, TBase>['config'],\n\t\treadonly baseColumn: PgColumn,\n\t\treadonly range?: [number | undefined, number | undefined],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.size = config.size;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn `${this.baseColumn.getSQLType()}[${typeof this.size === 'number' ? this.size : ''}]`;\n\t}\n\n\toverride mapFromDriverValue(value: unknown[] | string): T['data'] {\n\t\tif (typeof value === 'string') {\n\t\t\t// Thank you node-postgres for not parsing enum arrays\n\t\t\tvalue = parsePgArray(value);\n\t\t}\n\t\treturn value.map((v) => this.baseColumn.mapFromDriverValue(v));\n\t}\n\n\toverride mapToDriverValue(value: unknown[], isNestedArray = false): unknown[] | string {\n\t\tconst a = value.map((v) =>\n\t\t\tv === null\n\t\t\t\t? null\n\t\t\t\t: is(this.baseColumn, PgArray)\n\t\t\t\t? this.baseColumn.mapToDriverValue(v as unknown[], true)\n\t\t\t\t: this.baseColumn.mapToDriverValue(v)\n\t\t);\n\t\tif (isNestedArray) return a;\n\t\treturn makePgArray(a);\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { Column } from './column.ts';\nimport type { GelColumn, GelExtraConfigColumn } from './gel-core/index.ts';\nimport type { MySqlColumn } from './mysql-core/index.ts';\nimport type { ExtraConfigColumn, PgColumn, PgSequenceOptions } from './pg-core/index.ts';\nimport type { SingleStoreColumn } from './singlestore-core/index.ts';\nimport type { SQL } from './sql/sql.ts';\nimport type { SQLiteColumn } from './sqlite-core/index.ts';\nimport type { Assume, Simplify } from './utils.ts';\n\nexport type ColumnDataType =\n\t| 'string'\n\t| 'number'\n\t| 'boolean'\n\t| 'array'\n\t| 'json'\n\t| 'date'\n\t| 'bigint'\n\t| 'custom'\n\t| 'buffer'\n\t| 'dateDuration'\n\t| 'duration'\n\t| 'relDuration'\n\t| 'localTime'\n\t| 'localDate'\n\t| 'localDateTime';\n\nexport type Dialect = 'pg' | 'mysql' | 'sqlite' | 'singlestore' | 'common' | 'gel';\n\nexport type GeneratedStorageMode = 'virtual' | 'stored';\n\nexport type GeneratedType = 'always' | 'byDefault';\n\nexport type GeneratedColumnConfig<TDataType> = {\n\tas: TDataType | SQL | (() => SQL);\n\ttype?: GeneratedType;\n\tmode?: GeneratedStorageMode;\n};\n\nexport type GeneratedIdentityConfig = {\n\tsequenceName?: string;\n\tsequenceOptions?: PgSequenceOptions;\n\ttype: 'always' | 'byDefault';\n};\n\nexport interface ColumnBuilderBaseConfig<TDataType extends ColumnDataType, TColumnType extends string> {\n\tname: string;\n\tdataType: TDataType;\n\tcolumnType: TColumnType;\n\tdata: unknown;\n\tdriverParam: unknown;\n\tenumValues: string[] | undefined;\n}\n\nexport type MakeColumnConfig<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTableName extends string,\n\tTData = T extends { $type: infer U } ? U : T['data'],\n> = {\n\tname: T['name'];\n\ttableName: TTableName;\n\tdataType: T['dataType'];\n\tcolumnType: T['columnType'];\n\tdata: TData;\n\tdriverParam: T['driverParam'];\n\tnotNull: T extends { notNull: true } ? true : false;\n\thasDefault: T extends { hasDefault: true } ? true : false;\n\tisPrimaryKey: T extends { isPrimaryKey: true } ? true : false;\n\tisAutoincrement: T extends { isAutoincrement: true } ? true : false;\n\thasRuntimeDefault: T extends { hasRuntimeDefault: true } ? true : false;\n\tenumValues: T['enumValues'];\n\tbaseColumn: T extends { baseBuilder: infer U extends ColumnBuilderBase } ? BuildColumn<TTableName, U, 'common'>\n\t\t: never;\n\tidentity: T extends { identity: 'always' } ? 'always' : T extends { identity: 'byDefault' } ? 'byDefault' : undefined;\n\tgenerated: T extends { generated: infer G } ? unknown extends G ? undefined\n\t\t: G extends undefined ? undefined\n\t\t: G\n\t\t: undefined;\n} & {};\n\nexport type ColumnBuilderTypeConfig<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> = Simplify<\n\t& {\n\t\tbrand: 'ColumnBuilder';\n\t\tname: T['name'];\n\t\tdataType: T['dataType'];\n\t\tcolumnType: T['columnType'];\n\t\tdata: T['data'];\n\t\tdriverParam: T['driverParam'];\n\t\tnotNull: T extends { notNull: infer U } ? U : boolean;\n\t\thasDefault: T extends { hasDefault: infer U } ? U : boolean;\n\t\tenumValues: T['enumValues'];\n\t\tidentity: T extends { identity: infer U } ? U : unknown;\n\t\tgenerated: T extends { generated: infer G } ? G extends undefined ? unknown : G : unknown;\n\t}\n\t& TTypeConfig\n>;\n\nexport type ColumnBuilderRuntimeConfig<TData, TRuntimeConfig extends object = object> = {\n\tname: string;\n\tkeyAsName: boolean;\n\tnotNull: boolean;\n\tdefault: TData | SQL | undefined;\n\tdefaultFn: (() => TData | SQL) | undefined;\n\tonUpdateFn: (() => TData | SQL) | undefined;\n\thasDefault: boolean;\n\tprimaryKey: boolean;\n\tisUnique: boolean;\n\tuniqueName: string | undefined;\n\tuniqueType: string | undefined;\n\tdataType: string;\n\tcolumnType: string;\n\tgenerated: GeneratedColumnConfig<TData> | undefined;\n\tgeneratedIdentity: GeneratedIdentityConfig | undefined;\n} & TRuntimeConfig;\n\nexport interface ColumnBuilderExtraConfig {\n\tprimaryKeyHasDefault?: boolean;\n}\n\nexport type NotNull<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\tnotNull: true;\n\t};\n};\n\nexport type HasDefault<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\thasDefault: true;\n\t};\n};\n\nexport type IsPrimaryKey<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\tisPrimaryKey: true;\n\t};\n};\n\nexport type IsAutoincrement<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\tisAutoincrement: true;\n\t};\n};\n\nexport type HasRuntimeDefault<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\thasRuntimeDefault: true;\n\t};\n};\n\nexport type $Type<T extends ColumnBuilderBase, TType> = T & {\n\t_: {\n\t\t$type: TType;\n\t};\n};\n\nexport type HasGenerated<T extends ColumnBuilderBase, TGenerated extends {} = {}> = T & {\n\t_: {\n\t\thasDefault: true;\n\t\tgenerated: TGenerated;\n\t};\n};\n\nexport type IsIdentity<\n\tT extends ColumnBuilderBase,\n\tTType extends 'always' | 'byDefault',\n> = T & {\n\t_: {\n\t\tnotNull: true;\n\t\thasDefault: true;\n\t\tidentity: TType;\n\t};\n};\nexport interface ColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> {\n\t_: ColumnBuilderTypeConfig<T, TTypeConfig>;\n}\n\n// To understand how to use `ColumnBuilder` and `AnyColumnBuilder`, see `Column` and `AnyColumn` documentation.\nexport abstract class ColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = ColumnBuilderExtraConfig,\n> implements ColumnBuilderBase<T, TTypeConfig> {\n\tstatic readonly [entityKind]: string = 'ColumnBuilder';\n\n\tdeclare _: ColumnBuilderTypeConfig<T, TTypeConfig>;\n\n\tprotected config: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>;\n\n\tconstructor(name: T['name'], dataType: T['dataType'], columnType: T['columnType']) {\n\t\tthis.config = {\n\t\t\tname,\n\t\t\tkeyAsName: name === '',\n\t\t\tnotNull: false,\n\t\t\tdefault: undefined,\n\t\t\thasDefault: false,\n\t\t\tprimaryKey: false,\n\t\t\tisUnique: false,\n\t\t\tuniqueName: undefined,\n\t\t\tuniqueType: undefined,\n\t\t\tdataType,\n\t\t\tcolumnType,\n\t\t\tgenerated: undefined,\n\t\t} as ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>;\n\t}\n\n\t/**\n\t * Changes the data type of the column. Commonly used with `json` columns. Also, useful for branded types.\n\t *\n\t * @example\n\t * ```ts\n\t * const users = pgTable('users', {\n\t * \tid: integer('id').$type<UserId>().primaryKey(),\n\t * \tdetails: json('details').$type<UserDetails>().notNull(),\n\t * });\n\t * ```\n\t */\n\t$type<TType>(): $Type<this, TType> {\n\t\treturn this as $Type<this, TType>;\n\t}\n\n\t/**\n\t * Adds a `not null` clause to the column definition.\n\t *\n\t * Affects the `select` model of the table - columns *without* `not null` will be nullable on select.\n\t */\n\tnotNull(): NotNull<this> {\n\t\tthis.config.notNull = true;\n\t\treturn this as NotNull<this>;\n\t}\n\n\t/**\n\t * Adds a `default <value>` clause to the column definition.\n\t *\n\t * Affects the `insert` model of the table - columns *with* `default` are optional on insert.\n\t *\n\t * If you need to set a dynamic default value, use {@link $defaultFn} instead.\n\t */\n\tdefault(value: (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL): HasDefault<this> {\n\t\tthis.config.default = value;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasDefault<this>;\n\t}\n\n\t/**\n\t * Adds a dynamic default value to the column.\n\t * The function will be called when the row is inserted, and the returned value will be used as the column value.\n\t *\n\t * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n\t */\n\t$defaultFn(\n\t\tfn: () => (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL,\n\t): HasRuntimeDefault<HasDefault<this>> {\n\t\tthis.config.defaultFn = fn;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasRuntimeDefault<HasDefault<this>>;\n\t}\n\n\t/**\n\t * Alias for {@link $defaultFn}.\n\t */\n\t$default = this.$defaultFn;\n\n\t/**\n\t * Adds a dynamic update value to the column.\n\t * The function will be called when the row is updated, and the returned value will be used as the column value if none is provided.\n\t * If no `default` (or `$defaultFn`) value is provided, the function will be called when the row is inserted as well, and the returned value will be used as the column value.\n\t *\n\t * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n\t */\n\t$onUpdateFn(\n\t\tfn: () => (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL,\n\t): HasDefault<this> {\n\t\tthis.config.onUpdateFn = fn;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasDefault<this>;\n\t}\n\n\t/**\n\t * Alias for {@link $onUpdateFn}.\n\t */\n\t$onUpdate = this.$onUpdateFn;\n\n\t/**\n\t * Adds a `primary key` clause to the column definition. This implicitly makes the column `not null`.\n\t *\n\t * In SQLite, `integer primary key` implicitly makes the column auto-incrementing.\n\t */\n\tprimaryKey(): TExtraConfig['primaryKeyHasDefault'] extends true ? IsPrimaryKey<HasDefault<NotNull<this>>>\n\t\t: IsPrimaryKey<NotNull<this>>\n\t{\n\t\tthis.config.primaryKey = true;\n\t\tthis.config.notNull = true;\n\t\treturn this as TExtraConfig['primaryKeyHasDefault'] extends true ? IsPrimaryKey<HasDefault<NotNull<this>>>\n\t\t\t: IsPrimaryKey<NotNull<this>>;\n\t}\n\n\tabstract generatedAlwaysAs(\n\t\tas: SQL | T['data'] | (() => SQL),\n\t\tconfig?: Partial<GeneratedColumnConfig<unknown>>,\n\t): HasGenerated<this, {\n\t\ttype: 'always';\n\t}>;\n\n\t/** @internal Sets the name of the column to the key within the table definition if a name was not given. */\n\tsetName(name: string) {\n\t\tif (this.config.name !== '') return;\n\t\tthis.config.name = name;\n\t}\n}\n\nexport type BuildColumn<\n\tTTableName extends string,\n\tTBuilder extends ColumnBuilderBase,\n\tTDialect extends Dialect,\n> = TDialect extends 'pg' ? PgColumn<\n\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t{},\n\t\tSimplify<Omit<TBuilder['_'], keyof MakeColumnConfig<TBuilder['_'], TTableName> | 'brand' | 'dialect'>>\n\t>\n\t: TDialect extends 'mysql' ? MySqlColumn<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<\n\t\t\t\tOmit<\n\t\t\t\t\tTBuilder['_'],\n\t\t\t\t\t| keyof MakeColumnConfig<TBuilder['_'], TTableName>\n\t\t\t\t\t| 'brand'\n\t\t\t\t\t| 'dialect'\n\t\t\t\t\t| 'primaryKeyHasDefault'\n\t\t\t\t\t| 'mysqlColumnBuilderBrand'\n\t\t\t\t>\n\t\t\t>\n\t\t>\n\t: TDialect extends 'sqlite' ? SQLiteColumn<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<Omit<TBuilder['_'], keyof MakeColumnConfig<TBuilder['_'], TTableName> | 'brand' | 'dialect'>>\n\t\t>\n\t: TDialect extends 'common' ? Column<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<Omit<TBuilder['_'], keyof MakeColumnConfig<TBuilder['_'], TTableName> | 'brand' | 'dialect'>>\n\t\t>\n\t: TDialect extends 'singlestore' ? SingleStoreColumn<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<\n\t\t\t\tOmit<\n\t\t\t\t\tTBuilder['_'],\n\t\t\t\t\t| keyof MakeColumnConfig<TBuilder['_'], TTableName>\n\t\t\t\t\t| 'brand'\n\t\t\t\t\t| 'dialect'\n\t\t\t\t\t| 'primaryKeyHasDefault'\n\t\t\t\t\t| 'singlestoreColumnBuilderBrand'\n\t\t\t\t>\n\t\t\t>\n\t\t>\n\t: TDialect extends 'gel' ? GelColumn<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<Omit<TBuilder['_'], keyof MakeColumnConfig<TBuilder['_'], TTableName> | 'brand' | 'dialect'>>\n\t\t>\n\t: never;\n\nexport type BuildIndexColumn<\n\tTDialect extends Dialect,\n> = TDialect extends 'pg' ? ExtraConfigColumn\n\t: TDialect extends 'gel' ? GelExtraConfigColumn\n\t: never;\n\n// TODO\n// try to make sql as well + indexRaw\n\n// optional after everything will be working as expected\n// also try to leave only needed methods for extraConfig\n// make an error if I pass .asc() to fk and so on\n\nexport type BuildColumns<\n\tTTableName extends string,\n\tTConfigMap extends Record<string, ColumnBuilderBase>,\n\tTDialect extends Dialect,\n> =\n\t& {\n\t\t[Key in keyof TConfigMap]: BuildColumn<TTableName, {\n\t\t\t_:\n\t\t\t\t& Omit<TConfigMap[Key]['_'], 'name'>\n\t\t\t\t& { name: TConfigMap[Key]['_']['name'] extends '' ? Assume<Key, string> : TConfigMap[Key]['_']['name'] };\n\t\t}, TDialect>;\n\t}\n\t& {};\n\nexport type BuildExtraConfigColumns<\n\t_TTableName extends string,\n\tTConfigMap extends Record<string, ColumnBuilderBase>,\n\tTDialect extends Dialect,\n> =\n\t& {\n\t\t[Key in keyof TConfigMap]: BuildIndexColumn<TDialect>;\n\t}\n\t& {};\n\nexport type ChangeColumnTableName<TColumn extends Column, TAlias extends string, TDialect extends Dialect> =\n\tTDialect extends 'pg' ? PgColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'mysql' ? MySqlColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'singlestore' ? SingleStoreColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'sqlite' ? SQLiteColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'gel' ? GelColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: never;\n", "import { entityKind } from '~/entity.ts';\nimport { TableName } from '~/table.utils.ts';\nimport type { AnyPgColumn, PgColumn } from './columns/index.ts';\nimport type { PgTable } from './table.ts';\n\nexport type UpdateDeleteAction = 'cascade' | 'restrict' | 'no action' | 'set null' | 'set default';\n\nexport type Reference = () => {\n\treadonly name?: string;\n\treadonly columns: PgColumn[];\n\treadonly foreignTable: PgTable;\n\treadonly foreignColumns: PgColumn[];\n};\n\nexport class ForeignKeyBuilder {\n\tstatic readonly [entityKind]: string = 'PgForeignKeyBuilder';\n\n\t/** @internal */\n\treference: Reference;\n\n\t/** @internal */\n\t_onUpdate: UpdateDeleteAction | undefined = 'no action';\n\n\t/** @internal */\n\t_onDelete: UpdateDeleteAction | undefined = 'no action';\n\n\tconstructor(\n\t\tconfig: () => {\n\t\t\tname?: string;\n\t\t\tcolumns: PgColumn[];\n\t\t\tforeignColumns: PgColumn[];\n\t\t},\n\t\tactions?: {\n\t\t\tonUpdate?: UpdateDeleteAction;\n\t\t\tonDelete?: UpdateDeleteAction;\n\t\t} | undefined,\n\t) {\n\t\tthis.reference = () => {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn { name, columns, foreignTable: foreignColumns[0]!.table as PgTable, foreignColumns };\n\t\t};\n\t\tif (actions) {\n\t\t\tthis._onUpdate = actions.onUpdate;\n\t\t\tthis._onDelete = actions.onDelete;\n\t\t}\n\t}\n\n\tonUpdate(action: UpdateDeleteAction): this {\n\t\tthis._onUpdate = action === undefined ? 'no action' : action;\n\t\treturn this;\n\t}\n\n\tonDelete(action: UpdateDeleteAction): this {\n\t\tthis._onDelete = action === undefined ? 'no action' : action;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): ForeignKey {\n\t\treturn new ForeignKey(table, this);\n\t}\n}\n\nexport type AnyForeignKeyBuilder = ForeignKeyBuilder;\n\nexport class ForeignKey {\n\tstatic readonly [entityKind]: string = 'PgForeignKey';\n\n\treadonly reference: Reference;\n\treadonly onUpdate: UpdateDeleteAction | undefined;\n\treadonly onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(readonly table: PgTable, builder: ForeignKeyBuilder) {\n\t\tthis.reference = builder.reference;\n\t\tthis.onUpdate = builder._onUpdate;\n\t\tthis.onDelete = builder._onDelete;\n\t}\n\n\tgetName(): string {\n\t\tconst { name, columns, foreignColumns } = this.reference();\n\t\tconst columnNames = columns.map((column) => column.name);\n\t\tconst foreignColumnNames = foreignColumns.map((column) => column.name);\n\t\tconst chunks = [\n\t\t\tthis.table[TableName],\n\t\t\t...columnNames,\n\t\t\tforeignColumns[0]!.table[TableName],\n\t\t\t...foreignColumnNames,\n\t\t];\n\t\treturn name ?? `${chunks.join('_')}_fk`;\n\t}\n}\n\ntype ColumnsWithTable<\n\tTTableName extends string,\n\tTColumns extends PgColumn[],\n> = { [Key in keyof TColumns]: AnyPgColumn<{ tableName: TTableName }> };\n\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnyPgColumn<{ tableName: TTableName }>, ...AnyPgColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder {\n\tfunction mappedConfig() {\n\t\tconst { name, columns, foreignColumns } = config;\n\t\treturn {\n\t\t\tname,\n\t\t\tcolumns,\n\t\t\tforeignColumns,\n\t\t};\n\t}\n\n\treturn new ForeignKeyBuilder(mappedConfig);\n}\n", "/** @internal */\nexport const TableName = Symbol.for('drizzle:Name');\n", "export function iife<T extends unknown[], U>(fn: (...args: T) => U, ...args: T): U {\n\treturn fn(...args);\n}\n", "import { entityKind } from '~/entity.ts';\nimport { TableName } from '~/table.utils.ts';\nimport type { PgColumn } from './columns/index.ts';\nimport type { PgTable } from './table.ts';\n\nexport function unique(name?: string): UniqueOnConstraintBuilder {\n\treturn new UniqueOnConstraintBuilder(name);\n}\n\nexport function uniqueKeyName(table: PgTable, columns: string[]) {\n\treturn `${table[TableName]}_${columns.join('_')}_unique`;\n}\n\nexport class UniqueConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'PgUniqueConstraintBuilder';\n\n\t/** @internal */\n\tcolumns: PgColumn[];\n\t/** @internal */\n\tnullsNotDistinctConfig = false;\n\n\tconstructor(\n\t\tcolumns: PgColumn[],\n\t\tprivate name?: string,\n\t) {\n\t\tthis.columns = columns;\n\t}\n\n\tnullsNotDistinct() {\n\t\tthis.nullsNotDistinctConfig = true;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): UniqueConstraint {\n\t\treturn new UniqueConstraint(table, this.columns, this.nullsNotDistinctConfig, this.name);\n\t}\n}\n\nexport class UniqueOnConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'PgUniqueOnConstraintBuilder';\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tname?: string,\n\t) {\n\t\tthis.name = name;\n\t}\n\n\ton(...columns: [PgColumn, ...PgColumn[]]) {\n\t\treturn new UniqueConstraintBuilder(columns, this.name);\n\t}\n}\n\nexport class UniqueConstraint {\n\tstatic readonly [entityKind]: string = 'PgUniqueConstraint';\n\n\treadonly columns: PgColumn[];\n\treadonly name?: string;\n\treadonly nullsNotDistinct: boolean = false;\n\n\tconstructor(readonly table: PgTable, columns: PgColumn[], nullsNotDistinct: boolean, name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n\t\tthis.nullsNotDistinct = nullsNotDistinct;\n\t}\n\n\tgetName() {\n\t\treturn this.name;\n\t}\n}\n", "function parsePgArrayValue(arrayString: string, startFrom: number, inQuotes: boolean): [string, number] {\n\tfor (let i = startFrom; i < arrayString.length; i++) {\n\t\tconst char = arrayString[i];\n\n\t\tif (char === '\\\\') {\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === '\"') {\n\t\t\treturn [arrayString.slice(startFrom, i).replace(/\\\\/g, ''), i + 1];\n\t\t}\n\n\t\tif (inQuotes) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === ',' || char === '}') {\n\t\t\treturn [arrayString.slice(startFrom, i).replace(/\\\\/g, ''), i];\n\t\t}\n\t}\n\n\treturn [arrayString.slice(startFrom).replace(/\\\\/g, ''), arrayString.length];\n}\n\nexport function parsePgNestedArray(arrayString: string, startFrom = 0): [any[], number] {\n\tconst result: any[] = [];\n\tlet i = startFrom;\n\tlet lastCharIsComma = false;\n\n\twhile (i < arrayString.length) {\n\t\tconst char = arrayString[i];\n\n\t\tif (char === ',') {\n\t\t\tif (lastCharIsComma || i === startFrom) {\n\t\t\t\tresult.push('');\n\t\t\t}\n\t\t\tlastCharIsComma = true;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tlastCharIsComma = false;\n\n\t\tif (char === '\\\\') {\n\t\t\ti += 2;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === '\"') {\n\t\t\tconst [value, startFrom] = parsePgArrayValue(arrayString, i + 1, true);\n\t\t\tresult.push(value);\n\t\t\ti = startFrom;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === '}') {\n\t\t\treturn [result, i + 1];\n\t\t}\n\n\t\tif (char === '{') {\n\t\t\tconst [value, startFrom] = parsePgNestedArray(arrayString, i + 1);\n\t\t\tresult.push(value);\n\t\t\ti = startFrom;\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst [value, newStartFrom] = parsePgArrayValue(arrayString, i, false);\n\t\tresult.push(value);\n\t\ti = newStartFrom;\n\t}\n\n\treturn [result, i];\n}\n\nexport function parsePgArray(arrayString: string): any[] {\n\tconst [result] = parsePgNestedArray(arrayString, 1);\n\treturn result;\n}\n\nexport function makePgArray(array: any[]): string {\n\treturn `{${\n\t\tarray.map((item) => {\n\t\t\tif (Array.isArray(item)) {\n\t\t\t\treturn makePgArray(item);\n\t\t\t}\n\n\t\t\tif (typeof item === 'string') {\n\t\t\t\treturn `\"${item.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"')}\"`;\n\t\t\t}\n\n\t\t\treturn `${item}`;\n\t\t}).join(',')\n\t}}`;\n}\n", "import { entityKind } from './entity.ts';\nimport type { SQL, SQLWrapper } from './sql/sql.ts';\n\nexport interface Subquery<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTAlias extends string = string,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTSelectedFields extends Record<string, unknown> = Record<string, unknown>,\n> extends SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\nexport class Subquery<\n\tTAlias extends string = string,\n\tTSelectedFields extends Record<string, unknown> = Record<string, unknown>,\n> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Subquery';\n\n\tdeclare _: {\n\t\tbrand: 'Subquery';\n\t\tsql: SQL;\n\t\tselectedFields: TSelectedFields;\n\t\talias: TAlias;\n\t\tisWith: boolean;\n\t};\n\n\tconstructor(sql: SQL, selection: Record<string, unknown>, alias: string, isWith = false) {\n\t\tthis._ = {\n\t\t\tbrand: 'Subquery',\n\t\t\tsql,\n\t\t\tselectedFields: selection as TSelectedFields,\n\t\t\talias: alias as TAlias,\n\t\t\tisWith,\n\t\t};\n\t}\n\n\t// getSQL(): SQL<unknown> {\n\t// \treturn new SQL([this]);\n\t// }\n}\n\nexport class WithSubquery<\n\tTAlias extends string = string,\n\tTSelection extends Record<string, unknown> = Record<string, unknown>,\n> extends Subquery<TAlias, TSelection> {\n\tstatic override readonly [entityKind]: string = 'WithSubquery';\n}\n\nexport type WithSubqueryWithoutSelection<TAlias extends string> = WithSubquery<TAlias, {}>;\n", "import type { Span, Tracer } from '@opentelemetry/api';\nimport { iife } from '~/tracing-utils.ts';\nimport { npmVersion } from '~/version.ts';\n\nlet otel: typeof import('@opentelemetry/api') | undefined;\nlet rawTracer: Tracer | undefined;\n// try {\n// \totel = await import('@opentelemetry/api');\n// } catch (err: any) {\n// \tif (err.code !== 'MODULE_NOT_FOUND' && err.code !== 'ERR_MODULE_NOT_FOUND') {\n// \t\tthrow err;\n// \t}\n// }\n\ntype SpanName =\n\t| 'drizzle.operation'\n\t| 'drizzle.prepareQuery'\n\t| 'drizzle.buildSQL'\n\t| 'drizzle.execute'\n\t| 'drizzle.driver.execute'\n\t| 'drizzle.mapResponse';\n\n/** @internal */\nexport const tracer = {\n\tstartActiveSpan<F extends (span?: Span) => unknown>(name: SpanName, fn: F): ReturnType<F> {\n\t\tif (!otel) {\n\t\t\treturn fn() as ReturnType<F>;\n\t\t}\n\n\t\tif (!rawTracer) {\n\t\t\trawTracer = otel.trace.getTracer('drizzle-orm', npmVersion);\n\t\t}\n\n\t\treturn iife(\n\t\t\t(otel, rawTracer) =>\n\t\t\t\trawTracer.startActiveSpan(\n\t\t\t\t\tname,\n\t\t\t\t\t((span: Span) => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\treturn fn(span);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tspan.setStatus({\n\t\t\t\t\t\t\t\tcode: otel.SpanStatusCode.ERROR,\n\t\t\t\t\t\t\t\tmessage: e instanceof Error ? e.message : 'Unknown error', // eslint-disable-line no-instanceof/no-instanceof\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tspan.end();\n\t\t\t\t\t\t}\n\t\t\t\t\t}) as F,\n\t\t\t\t),\n\t\t\totel,\n\t\t\trawTracer,\n\t\t);\n\t},\n};\n", "// package.json\nvar version = \"0.43.1\";\n\n// src/version.ts\nvar compatibilityVersion = 10;\nexport {\n  compatibilityVersion,\n  version as npmVersion\n};\n", "export const ViewBaseConfig = Symbol.for('drizzle:ViewBaseConfig');\n", "import type { Column, GetColumnData } from './column.ts';\nimport { entityKind } from './entity.ts';\nimport type { OptionalKeyOnly, RequiredKeyOnly } from './operations.ts';\nimport type { SQLWrapper } from './sql/sql.ts';\nimport { TableName } from './table.utils.ts';\nimport type { Simplify, Update } from './utils.ts';\n\nexport interface TableConfig<TColumn extends Column = Column<any>> {\n\tname: string;\n\tschema: string | undefined;\n\tcolumns: Record<string, TColumn>;\n\tdialect: string;\n}\n\nexport type UpdateTableConfig<T extends TableConfig, TUpdate extends Partial<TableConfig>> = Required<\n\tUpdate<T, TUpdate>\n>;\n\n/** @internal */\nexport const Schema = Symbol.for('drizzle:Schema');\n\n/** @internal */\nexport const Columns = Symbol.for('drizzle:Columns');\n\n/** @internal */\nexport const ExtraConfigColumns = Symbol.for('drizzle:ExtraConfigColumns');\n\n/** @internal */\nexport const OriginalName = Symbol.for('drizzle:OriginalName');\n\n/** @internal */\nexport const BaseName = Symbol.for('drizzle:BaseName');\n\n/** @internal */\nexport const IsAlias = Symbol.for('drizzle:IsAlias');\n\n/** @internal */\nexport const ExtraConfigBuilder = Symbol.for('drizzle:ExtraConfigBuilder');\n\nconst IsDrizzleTable = Symbol.for('drizzle:IsDrizzleTable');\n\nexport interface Table<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tT extends TableConfig = TableConfig,\n> extends SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\n\nexport class Table<T extends TableConfig = TableConfig> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Table';\n\n\tdeclare readonly _: {\n\t\treadonly brand: 'Table';\n\t\treadonly config: T;\n\t\treadonly name: T['name'];\n\t\treadonly schema: T['schema'];\n\t\treadonly columns: T['columns'];\n\t\treadonly inferSelect: InferSelectModel<Table<T>>;\n\t\treadonly inferInsert: InferInsertModel<Table<T>>;\n\t};\n\n\tdeclare readonly $inferSelect: InferSelectModel<Table<T>>;\n\tdeclare readonly $inferInsert: InferInsertModel<Table<T>>;\n\n\t/** @internal */\n\tstatic readonly Symbol = {\n\t\tName: TableName as typeof TableName,\n\t\tSchema: Schema as typeof Schema,\n\t\tOriginalName: OriginalName as typeof OriginalName,\n\t\tColumns: Columns as typeof Columns,\n\t\tExtraConfigColumns: ExtraConfigColumns as typeof ExtraConfigColumns,\n\t\tBaseName: BaseName as typeof BaseName,\n\t\tIsAlias: IsAlias as typeof IsAlias,\n\t\tExtraConfigBuilder: ExtraConfigBuilder as typeof ExtraConfigBuilder,\n\t};\n\n\t/**\n\t * @internal\n\t * Can be changed if the table is aliased.\n\t */\n\t[TableName]: string;\n\n\t/**\n\t * @internal\n\t * Used to store the original name of the table, before any aliasing.\n\t */\n\t[OriginalName]: string;\n\n\t/** @internal */\n\t[Schema]: string | undefined;\n\n\t/** @internal */\n\t[Columns]!: T['columns'];\n\n\t/** @internal */\n\t[ExtraConfigColumns]!: Record<string, unknown>;\n\n\t/**\n\t *  @internal\n\t * Used to store the table name before the transformation via the `tableCreator` functions.\n\t */\n\t[BaseName]: string;\n\n\t/** @internal */\n\t[IsAlias] = false;\n\n\t/** @internal */\n\t[IsDrizzleTable] = true;\n\n\t/** @internal */\n\t[ExtraConfigBuilder]: ((self: any) => Record<string, unknown> | unknown[]) | undefined = undefined;\n\n\tconstructor(name: string, schema: string | undefined, baseName: string) {\n\t\tthis[TableName] = this[OriginalName] = name;\n\t\tthis[Schema] = schema;\n\t\tthis[BaseName] = baseName;\n\t}\n}\n\nexport function isTable(table: unknown): table is Table {\n\treturn typeof table === 'object' && table !== null && IsDrizzleTable in table;\n}\n\n/**\n * Any table with a specified boundary.\n *\n * @example\n\t```ts\n\t// Any table with a specific name\n\ttype AnyUsersTable = AnyTable<{ name: 'users' }>;\n\t```\n *\n * To describe any table with any config, simply use `Table` without any type arguments, like this:\n *\n\t```ts\n\tfunction needsTable(table: Table) {\n\t\t...\n\t}\n\t```\n */\nexport type AnyTable<TPartial extends Partial<TableConfig>> = Table<UpdateTableConfig<TableConfig, TPartial>>;\n\nexport function getTableName<T extends Table>(table: T): T['_']['name'] {\n\treturn table[TableName];\n}\n\nexport function getTableUniqueName<T extends Table>(table: T): `${T['_']['schema']}.${T['_']['name']}` {\n\treturn `${table[Schema] ?? 'public'}.${table[TableName]}`;\n}\n\nexport type MapColumnName<TName extends string, TColumn extends Column, TDBColumNames extends boolean> =\n\tTDBColumNames extends true ? TColumn['_']['name']\n\t\t: TName;\n\nexport type InferModelFromColumns<\n\tTColumns extends Record<string, Column>,\n\tTInferMode extends 'select' | 'insert' = 'select',\n\tTConfig extends { dbColumnNames: boolean; override?: boolean } = { dbColumnNames: false; override: false },\n> = Simplify<\n\tTInferMode extends 'insert' ?\n\t\t\t& {\n\t\t\t\t[\n\t\t\t\t\tKey in keyof TColumns & string as RequiredKeyOnly<\n\t\t\t\t\t\tMapColumnName<Key, TColumns[Key], TConfig['dbColumnNames']>,\n\t\t\t\t\t\tTColumns[Key]\n\t\t\t\t\t>\n\t\t\t\t]: GetColumnData<TColumns[Key], 'query'>;\n\t\t\t}\n\t\t\t& {\n\t\t\t\t[\n\t\t\t\t\tKey in keyof TColumns & string as OptionalKeyOnly<\n\t\t\t\t\t\tMapColumnName<Key, TColumns[Key], TConfig['dbColumnNames']>,\n\t\t\t\t\t\tTColumns[Key],\n\t\t\t\t\t\tTConfig['override']\n\t\t\t\t\t>\n\t\t\t\t]?: GetColumnData<TColumns[Key], 'query'> | undefined;\n\t\t\t}\n\t\t: {\n\t\t\t[\n\t\t\t\tKey in keyof TColumns & string as MapColumnName<\n\t\t\t\t\tKey,\n\t\t\t\t\tTColumns[Key],\n\t\t\t\t\tTConfig['dbColumnNames']\n\t\t\t\t>\n\t\t\t]: GetColumnData<TColumns[Key], 'query'>;\n\t\t}\n>;\n\n/** @deprecated Use one of the alternatives: {@link InferSelectModel} / {@link InferInsertModel}, or `table.$inferSelect` / `table.$inferInsert`\n */\nexport type InferModel<\n\tTTable extends Table,\n\tTInferMode extends 'select' | 'insert' = 'select',\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = InferModelFromColumns<TTable['_']['columns'], TInferMode, TConfig>;\n\nexport type InferSelectModel<\n\tTTable extends Table,\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = InferModelFromColumns<TTable['_']['columns'], 'select', TConfig>;\n\nexport type InferInsertModel<\n\tTTable extends Table,\n\tTConfig extends { dbColumnNames: boolean; override?: boolean } = { dbColumnNames: false; override: false },\n> = InferModelFromColumns<TTable['_']['columns'], 'insert', TConfig>;\n\nexport type InferEnum<T> = T extends { enumValues: readonly (infer U)[] } ? U\n\t: never;\n", "import { entityKind } from '~/entity.ts';\n\nexport class DrizzleError extends Error {\n\tstatic readonly [entityKind]: string = 'DrizzleError';\n\n\tconstructor({ message, cause }: { message?: string; cause?: unknown }) {\n\t\tsuper(message);\n\t\tthis.name = 'DrizzleError';\n\t\tthis.cause = cause;\n\t}\n}\n\nexport class TransactionRollbackError extends DrizzleError {\n\tstatic override readonly [entityKind]: string = 'TransactionRollbackError';\n\n\tconstructor() {\n\t\tsuper({ message: 'Rollback' });\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\n\nexport interface Logger {\n\tlogQuery(query: string, params: unknown[]): void;\n}\n\nexport interface LogWriter {\n\twrite(message: string): void;\n}\n\nexport class ConsoleLogWriter implements LogWriter {\n\tstatic readonly [entityKind]: string = 'ConsoleLogWriter';\n\n\twrite(message: string) {\n\t\tconsole.log(message);\n\t}\n}\n\nexport class DefaultLogger implements Logger {\n\tstatic readonly [entityKind]: string = 'DefaultLogger';\n\n\treadonly writer: LogWriter;\n\n\tconstructor(config?: { writer: LogWriter }) {\n\t\tthis.writer = config?.writer ?? new ConsoleLogWriter();\n\t}\n\n\tlogQuery(query: string, params: unknown[]): void {\n\t\tconst stringifiedParams = params.map((p) => {\n\t\t\ttry {\n\t\t\t\treturn JSON.stringify(p);\n\t\t\t} catch {\n\t\t\t\treturn String(p);\n\t\t\t}\n\t\t});\n\t\tconst paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(', ')}]` : '';\n\t\tthis.writer.write(`Query: ${query}${paramsStr}`);\n\t}\n}\n\nexport class NoopLogger implements Logger {\n\tstatic readonly [entityKind]: string = 'NoopLogger';\n\n\tlogQuery(): void {\n\t\t// noop\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\n\nexport abstract class QueryPromise<T> implements Promise<T> {\n\tstatic readonly [entityKind]: string = 'QueryPromise';\n\n\t[Symbol.toStringTag] = 'QueryPromise';\n\n\tcatch<TResult = never>(\n\t\tonRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null | undefined,\n\t): Promise<T | TResult> {\n\t\treturn this.then(undefined, onRejected);\n\t}\n\n\tfinally(onFinally?: (() => void) | null | undefined): Promise<T> {\n\t\treturn this.then(\n\t\t\t(value) => {\n\t\t\t\tonFinally?.();\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\t(reason) => {\n\t\t\t\tonFinally?.();\n\t\t\t\tthrow reason;\n\t\t\t},\n\t\t);\n\t}\n\n\tthen<TResult1 = T, TResult2 = never>(\n\t\tonFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n\t\tonRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n\t): Promise<TResult1 | TResult2> {\n\t\treturn this.execute().then(onFulfilled, onRejected);\n\t}\n\n\tabstract execute(): Promise<T>;\n}\n", "import { type AnyTable, getTableUniqueName, type InferModelFromColumns, Table } from '~/table.ts';\nimport { type AnyColumn, Column } from './column.ts';\nimport { entityKind, is } from './entity.ts';\nimport { PrimaryKeyBuilder } from './pg-core/primary-keys.ts';\nimport {\n\tand,\n\tasc,\n\tbetween,\n\tdesc,\n\teq,\n\texists,\n\tgt,\n\tgte,\n\tilike,\n\tinArray,\n\tisNotNull,\n\tisNull,\n\tlike,\n\tlt,\n\tlte,\n\tne,\n\tnot,\n\tnotBetween,\n\tnotExists,\n\tnotIlike,\n\tnotInArray,\n\tnotLike,\n\tor,\n} from './sql/expressions/index.ts';\nimport { type Placeholder, SQL, sql } from './sql/sql.ts';\nimport type { Assume, ColumnsWithTable, Equal, Simplify, ValueOrArray } from './utils.ts';\n\nexport abstract class Relation<TTableName extends string = string> {\n\tstatic readonly [entityKind]: string = 'Relation';\n\n\tdeclare readonly $brand: 'Relation';\n\treadonly referencedTableName: TTableName;\n\tfieldName!: string;\n\n\tconstructor(\n\t\treadonly sourceTable: Table,\n\t\treadonly referencedTable: AnyTable<{ name: TTableName }>,\n\t\treadonly relationName: string | undefined,\n\t) {\n\t\tthis.referencedTableName = referencedTable[Table.Symbol.Name] as TTableName;\n\t}\n\n\tabstract withFieldName(fieldName: string): Relation<TTableName>;\n}\n\nexport class Relations<\n\tTTableName extends string = string,\n\tTConfig extends Record<string, Relation> = Record<string, Relation>,\n> {\n\tstatic readonly [entityKind]: string = 'Relations';\n\n\tdeclare readonly $brand: 'Relations';\n\n\tconstructor(\n\t\treadonly table: AnyTable<{ name: TTableName }>,\n\t\treadonly config: (helpers: TableRelationsHelpers<TTableName>) => TConfig,\n\t) {}\n}\n\nexport class One<\n\tTTableName extends string = string,\n\tTIsNullable extends boolean = boolean,\n> extends Relation<TTableName> {\n\tstatic override readonly [entityKind]: string = 'One';\n\n\tdeclare protected $relationBrand: 'One';\n\n\tconstructor(\n\t\tsourceTable: Table,\n\t\treferencedTable: AnyTable<{ name: TTableName }>,\n\t\treadonly config:\n\t\t\t| RelationConfig<\n\t\t\t\tTTableName,\n\t\t\t\tstring,\n\t\t\t\tAnyColumn<{ tableName: TTableName }>[]\n\t\t\t>\n\t\t\t| undefined,\n\t\treadonly isNullable: TIsNullable,\n\t) {\n\t\tsuper(sourceTable, referencedTable, config?.relationName);\n\t}\n\n\twithFieldName(fieldName: string): One<TTableName> {\n\t\tconst relation = new One(\n\t\t\tthis.sourceTable,\n\t\t\tthis.referencedTable,\n\t\t\tthis.config,\n\t\t\tthis.isNullable,\n\t\t);\n\t\trelation.fieldName = fieldName;\n\t\treturn relation;\n\t}\n}\n\nexport class Many<TTableName extends string> extends Relation<TTableName> {\n\tstatic override readonly [entityKind]: string = 'Many';\n\n\tdeclare protected $relationBrand: 'Many';\n\n\tconstructor(\n\t\tsourceTable: Table,\n\t\treferencedTable: AnyTable<{ name: TTableName }>,\n\t\treadonly config: { relationName: string } | undefined,\n\t) {\n\t\tsuper(sourceTable, referencedTable, config?.relationName);\n\t}\n\n\twithFieldName(fieldName: string): Many<TTableName> {\n\t\tconst relation = new Many(\n\t\t\tthis.sourceTable,\n\t\t\tthis.referencedTable,\n\t\t\tthis.config,\n\t\t);\n\t\trelation.fieldName = fieldName;\n\t\treturn relation;\n\t}\n}\n\nexport type TableRelationsKeysOnly<\n\tTSchema extends Record<string, unknown>,\n\tTTableName extends string,\n\tK extends keyof TSchema,\n> = TSchema[K] extends Relations<TTableName> ? K : never;\n\nexport type ExtractTableRelationsFromSchema<\n\tTSchema extends Record<string, unknown>,\n\tTTableName extends string,\n> = ExtractObjectValues<\n\t{\n\t\t[\n\t\t\tK in keyof TSchema as TableRelationsKeysOnly<\n\t\t\t\tTSchema,\n\t\t\t\tTTableName,\n\t\t\t\tK\n\t\t\t>\n\t\t]: TSchema[K] extends Relations<TTableName, infer TConfig> ? TConfig : never;\n\t}\n>;\n\nexport type ExtractObjectValues<T> = T[keyof T];\n\nexport type ExtractRelationsFromTableExtraConfigSchema<\n\tTConfig extends unknown[],\n> = ExtractObjectValues<\n\t{\n\t\t[\n\t\t\tK in keyof TConfig as TConfig[K] extends Relations<any> ? K\n\t\t\t\t: never\n\t\t]: TConfig[K] extends Relations<infer TRelationConfig> ? TRelationConfig\n\t\t\t: never;\n\t}\n>;\n\nexport function getOperators() {\n\treturn {\n\t\tand,\n\t\tbetween,\n\t\teq,\n\t\texists,\n\t\tgt,\n\t\tgte,\n\t\tilike,\n\t\tinArray,\n\t\tisNull,\n\t\tisNotNull,\n\t\tlike,\n\t\tlt,\n\t\tlte,\n\t\tne,\n\t\tnot,\n\t\tnotBetween,\n\t\tnotExists,\n\t\tnotLike,\n\t\tnotIlike,\n\t\tnotInArray,\n\t\tor,\n\t\tsql,\n\t};\n}\n\nexport type Operators = ReturnType<typeof getOperators>;\n\nexport function getOrderByOperators() {\n\treturn {\n\t\tsql,\n\t\tasc,\n\t\tdesc,\n\t};\n}\n\nexport type OrderByOperators = ReturnType<typeof getOrderByOperators>;\n\nexport type FindTableByDBName<\n\tTSchema extends TablesRelationalConfig,\n\tTTableName extends string,\n> = ExtractObjectValues<\n\t{\n\t\t[\n\t\t\tK in keyof TSchema as TSchema[K]['dbName'] extends TTableName ? K\n\t\t\t\t: never\n\t\t]: TSchema[K];\n\t}\n>;\n\nexport type DBQueryConfig<\n\tTRelationType extends 'one' | 'many' = 'one' | 'many',\n\tTIsRoot extends boolean = boolean,\n\tTSchema extends TablesRelationalConfig = TablesRelationalConfig,\n\tTTableConfig extends TableRelationalConfig = TableRelationalConfig,\n> =\n\t& {\n\t\tcolumns?:\n\t\t\t| {\n\t\t\t\t[K in keyof TTableConfig['columns']]?: boolean;\n\t\t\t}\n\t\t\t| undefined;\n\t\twith?:\n\t\t\t| {\n\t\t\t\t[K in keyof TTableConfig['relations']]?:\n\t\t\t\t\t| true\n\t\t\t\t\t| DBQueryConfig<\n\t\t\t\t\t\tTTableConfig['relations'][K] extends One ? 'one' : 'many',\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tTSchema,\n\t\t\t\t\t\tFindTableByDBName<\n\t\t\t\t\t\t\tTSchema,\n\t\t\t\t\t\t\tTTableConfig['relations'][K]['referencedTableName']\n\t\t\t\t\t\t>\n\t\t\t\t\t>\n\t\t\t\t\t| undefined;\n\t\t\t}\n\t\t\t| undefined;\n\t\textras?:\n\t\t\t| Record<string, SQL.Aliased>\n\t\t\t| ((\n\t\t\t\tfields: Simplify<\n\t\t\t\t\t[TTableConfig['columns']] extends [never] ? {}\n\t\t\t\t\t\t: TTableConfig['columns']\n\t\t\t\t>,\n\t\t\t\toperators: { sql: Operators['sql'] },\n\t\t\t) => Record<string, SQL.Aliased>)\n\t\t\t| undefined;\n\t}\n\t& (TRelationType extends 'many' ?\n\t\t\t& {\n\t\t\t\twhere?:\n\t\t\t\t\t| SQL\n\t\t\t\t\t| undefined\n\t\t\t\t\t| ((\n\t\t\t\t\t\tfields: Simplify<\n\t\t\t\t\t\t\t[TTableConfig['columns']] extends [never] ? {}\n\t\t\t\t\t\t\t\t: TTableConfig['columns']\n\t\t\t\t\t\t>,\n\t\t\t\t\t\toperators: Operators,\n\t\t\t\t\t) => SQL | undefined);\n\t\t\t\torderBy?:\n\t\t\t\t\t| ValueOrArray<AnyColumn | SQL>\n\t\t\t\t\t| ((\n\t\t\t\t\t\tfields: Simplify<\n\t\t\t\t\t\t\t[TTableConfig['columns']] extends [never] ? {}\n\t\t\t\t\t\t\t\t: TTableConfig['columns']\n\t\t\t\t\t\t>,\n\t\t\t\t\t\toperators: OrderByOperators,\n\t\t\t\t\t) => ValueOrArray<AnyColumn | SQL>)\n\t\t\t\t\t| undefined;\n\t\t\t\tlimit?: number | Placeholder | undefined;\n\t\t\t}\n\t\t\t& (TIsRoot extends true ? {\n\t\t\t\t\toffset?: number | Placeholder | undefined;\n\t\t\t\t}\n\t\t\t\t: {})\n\t\t: {});\n\nexport interface TableRelationalConfig {\n\ttsName: string;\n\tdbName: string;\n\tcolumns: Record<string, Column>;\n\trelations: Record<string, Relation>;\n\tprimaryKey: AnyColumn[];\n\tschema?: string;\n}\n\nexport type TablesRelationalConfig = Record<string, TableRelationalConfig>;\n\nexport interface RelationalSchemaConfig<\n\tTSchema extends TablesRelationalConfig,\n> {\n\tfullSchema: Record<string, unknown>;\n\tschema: TSchema;\n\ttableNamesMap: Record<string, string>;\n}\n\nexport type ExtractTablesWithRelations<\n\tTSchema extends Record<string, unknown>,\n> = {\n\t[\n\t\tK in keyof TSchema as TSchema[K] extends Table ? K\n\t\t\t: never\n\t]: TSchema[K] extends Table ? {\n\t\t\ttsName: K & string;\n\t\t\tdbName: TSchema[K]['_']['name'];\n\t\t\tcolumns: TSchema[K]['_']['columns'];\n\t\t\trelations: ExtractTableRelationsFromSchema<\n\t\t\t\tTSchema,\n\t\t\t\tTSchema[K]['_']['name']\n\t\t\t>;\n\t\t\tprimaryKey: AnyColumn[];\n\t\t}\n\t\t: never;\n};\n\nexport type ReturnTypeOrValue<T> = T extends (...args: any[]) => infer R ? R\n\t: T;\n\nexport type BuildRelationResult<\n\tTSchema extends TablesRelationalConfig,\n\tTInclude,\n\tTRelations extends Record<string, Relation>,\n> = {\n\t[\n\t\tK in\n\t\t\t& NonUndefinedKeysOnly<TInclude>\n\t\t\t& keyof TRelations\n\t]: TRelations[K] extends infer TRel extends Relation ? BuildQueryResult<\n\t\t\tTSchema,\n\t\t\tFindTableByDBName<TSchema, TRel['referencedTableName']>,\n\t\t\tAssume<TInclude[K], true | Record<string, unknown>>\n\t\t> extends infer TResult ? TRel extends One ?\n\t\t\t\t\t| TResult\n\t\t\t\t\t| (Equal<TRel['isNullable'], false> extends true ? null : never)\n\t\t\t: TResult[]\n\t\t: never\n\t\t: never;\n};\n\nexport type NonUndefinedKeysOnly<T> =\n\t& ExtractObjectValues<\n\t\t{\n\t\t\t[K in keyof T as T[K] extends undefined ? never : K]: K;\n\t\t}\n\t>\n\t& keyof T;\n\nexport type BuildQueryResult<\n\tTSchema extends TablesRelationalConfig,\n\tTTableConfig extends TableRelationalConfig,\n\tTFullSelection extends true | Record<string, unknown>,\n> = Equal<TFullSelection, true> extends true ? InferModelFromColumns<TTableConfig['columns']>\n\t: TFullSelection extends Record<string, unknown> ? Simplify<\n\t\t\t& (TFullSelection['columns'] extends Record<string, unknown> ? InferModelFromColumns<\n\t\t\t\t\t{\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tK in Equal<\n\t\t\t\t\t\t\t\tExclude<\n\t\t\t\t\t\t\t\t\tTFullSelection['columns'][\n\t\t\t\t\t\t\t\t\t\t& keyof TFullSelection['columns']\n\t\t\t\t\t\t\t\t\t\t& keyof TTableConfig['columns']\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tundefined\n\t\t\t\t\t\t\t\t>,\n\t\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t\t> extends true ? Exclude<\n\t\t\t\t\t\t\t\t\tkeyof TTableConfig['columns'],\n\t\t\t\t\t\t\t\t\tNonUndefinedKeysOnly<TFullSelection['columns']>\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t& {\n\t\t\t\t\t\t\t\t\t\t[K in keyof TFullSelection['columns']]: Equal<\n\t\t\t\t\t\t\t\t\t\t\tTFullSelection['columns'][K],\n\t\t\t\t\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t\t\t\t\t> extends true ? K\n\t\t\t\t\t\t\t\t\t\t\t: never;\n\t\t\t\t\t\t\t\t\t}[keyof TFullSelection['columns']]\n\t\t\t\t\t\t\t\t\t& keyof TTableConfig['columns']\n\t\t\t\t\t\t]: TTableConfig['columns'][K];\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t: InferModelFromColumns<TTableConfig['columns']>)\n\t\t\t& (TFullSelection['extras'] extends\n\t\t\t\t| Record<string, unknown>\n\t\t\t\t| ((...args: any[]) => Record<string, unknown>) ? {\n\t\t\t\t\t[\n\t\t\t\t\t\tK in NonUndefinedKeysOnly<\n\t\t\t\t\t\t\tReturnTypeOrValue<TFullSelection['extras']>\n\t\t\t\t\t\t>\n\t\t\t\t\t]: Assume<\n\t\t\t\t\t\tReturnTypeOrValue<TFullSelection['extras']>[K],\n\t\t\t\t\t\tSQL.Aliased\n\t\t\t\t\t>['_']['type'];\n\t\t\t\t}\n\t\t\t\t: {})\n\t\t\t& (TFullSelection['with'] extends Record<string, unknown> ? BuildRelationResult<\n\t\t\t\t\tTSchema,\n\t\t\t\t\tTFullSelection['with'],\n\t\t\t\t\tTTableConfig['relations']\n\t\t\t\t>\n\t\t\t\t: {})\n\t\t>\n\t: never;\n\nexport interface RelationConfig<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends AnyColumn<{ tableName: TTableName }>[],\n> {\n\trelationName?: string;\n\tfields: TColumns;\n\treferences: ColumnsWithTable<TTableName, TForeignTableName, TColumns>;\n}\n\nexport function extractTablesRelationalConfig<\n\tTTables extends TablesRelationalConfig,\n>(\n\tschema: Record<string, unknown>,\n\tconfigHelpers: (table: Table) => any,\n): { tables: TTables; tableNamesMap: Record<string, string> } {\n\tif (\n\t\tObject.keys(schema).length === 1\n\t\t&& 'default' in schema\n\t\t&& !is(schema['default'], Table)\n\t) {\n\t\tschema = schema['default'] as Record<string, unknown>;\n\t}\n\n\t// table DB name -> schema table key\n\tconst tableNamesMap: Record<string, string> = {};\n\t// Table relations found before their tables - need to buffer them until we know the schema table key\n\tconst relationsBuffer: Record<\n\t\tstring,\n\t\t{ relations: Record<string, Relation>; primaryKey?: AnyColumn[] }\n\t> = {};\n\tconst tablesConfig: TablesRelationalConfig = {};\n\tfor (const [key, value] of Object.entries(schema)) {\n\t\tif (is(value, Table)) {\n\t\t\tconst dbName = getTableUniqueName(value);\n\t\t\tconst bufferedRelations = relationsBuffer[dbName];\n\t\t\ttableNamesMap[dbName] = key;\n\t\t\ttablesConfig[key] = {\n\t\t\t\ttsName: key,\n\t\t\t\tdbName: value[Table.Symbol.Name],\n\t\t\t\tschema: value[Table.Symbol.Schema],\n\t\t\t\tcolumns: value[Table.Symbol.Columns],\n\t\t\t\trelations: bufferedRelations?.relations ?? {},\n\t\t\t\tprimaryKey: bufferedRelations?.primaryKey ?? [],\n\t\t\t};\n\n\t\t\t// Fill in primary keys\n\t\t\tfor (\n\t\t\t\tconst column of Object.values(\n\t\t\t\t\t(value as Table)[Table.Symbol.Columns],\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tif (column.primary) {\n\t\t\t\t\ttablesConfig[key]!.primaryKey.push(column);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst extraConfig = value[Table.Symbol.ExtraConfigBuilder]?.((value as Table)[Table.Symbol.ExtraConfigColumns]);\n\t\t\tif (extraConfig) {\n\t\t\t\tfor (const configEntry of Object.values(extraConfig)) {\n\t\t\t\t\tif (is(configEntry, PrimaryKeyBuilder)) {\n\t\t\t\t\t\ttablesConfig[key]!.primaryKey.push(...configEntry.columns);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (is(value, Relations)) {\n\t\t\tconst dbName = getTableUniqueName(value.table);\n\t\t\tconst tableName = tableNamesMap[dbName];\n\t\t\tconst relations: Record<string, Relation> = value.config(\n\t\t\t\tconfigHelpers(value.table),\n\t\t\t);\n\t\t\tlet primaryKey: AnyColumn[] | undefined;\n\n\t\t\tfor (const [relationName, relation] of Object.entries(relations)) {\n\t\t\t\tif (tableName) {\n\t\t\t\t\tconst tableConfig = tablesConfig[tableName]!;\n\t\t\t\t\ttableConfig.relations[relationName] = relation;\n\t\t\t\t\tif (primaryKey) {\n\t\t\t\t\t\ttableConfig.primaryKey.push(...primaryKey);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!(dbName in relationsBuffer)) {\n\t\t\t\t\t\trelationsBuffer[dbName] = {\n\t\t\t\t\t\t\trelations: {},\n\t\t\t\t\t\t\tprimaryKey,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\trelationsBuffer[dbName]!.relations[relationName] = relation;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { tables: tablesConfig as TTables, tableNamesMap };\n}\n\nexport function relations<\n\tTTableName extends string,\n\tTRelations extends Record<string, Relation<any>>,\n>(\n\ttable: AnyTable<{ name: TTableName }>,\n\trelations: (helpers: TableRelationsHelpers<TTableName>) => TRelations,\n): Relations<TTableName, TRelations> {\n\treturn new Relations<TTableName, TRelations>(\n\t\ttable,\n\t\t(helpers: TableRelationsHelpers<TTableName>) =>\n\t\t\tObject.fromEntries(\n\t\t\t\tObject.entries(relations(helpers)).map(([key, value]) => [\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue.withFieldName(key),\n\t\t\t\t]),\n\t\t\t) as TRelations,\n\t);\n}\n\nexport function createOne<TTableName extends string>(sourceTable: Table) {\n\treturn function one<\n\t\tTForeignTable extends Table,\n\t\tTColumns extends [\n\t\t\tAnyColumn<{ tableName: TTableName }>,\n\t\t\t...AnyColumn<{ tableName: TTableName }>[],\n\t\t],\n\t>(\n\t\ttable: TForeignTable,\n\t\tconfig?: RelationConfig<TTableName, TForeignTable['_']['name'], TColumns>,\n\t): One<\n\t\tTForeignTable['_']['name'],\n\t\tEqual<TColumns[number]['_']['notNull'], true>\n\t> {\n\t\treturn new One(\n\t\t\tsourceTable,\n\t\t\ttable,\n\t\t\tconfig,\n\t\t\t(config?.fields.reduce<boolean>((res, f) => res && f.notNull, true)\n\t\t\t\t?? false) as Equal<TColumns[number]['_']['notNull'], true>,\n\t\t);\n\t};\n}\n\nexport function createMany(sourceTable: Table) {\n\treturn function many<TForeignTable extends Table>(\n\t\treferencedTable: TForeignTable,\n\t\tconfig?: { relationName: string },\n\t): Many<TForeignTable['_']['name']> {\n\t\treturn new Many(sourceTable, referencedTable, config);\n\t};\n}\n\nexport interface NormalizedRelation {\n\tfields: AnyColumn[];\n\treferences: AnyColumn[];\n}\n\nexport function normalizeRelation(\n\tschema: TablesRelationalConfig,\n\ttableNamesMap: Record<string, string>,\n\trelation: Relation,\n): NormalizedRelation {\n\tif (is(relation, One) && relation.config) {\n\t\treturn {\n\t\t\tfields: relation.config.fields,\n\t\t\treferences: relation.config.references,\n\t\t};\n\t}\n\n\tconst referencedTableTsName = tableNamesMap[getTableUniqueName(relation.referencedTable)];\n\tif (!referencedTableTsName) {\n\t\tthrow new Error(\n\t\t\t`Table \"${relation.referencedTable[Table.Symbol.Name]}\" not found in schema`,\n\t\t);\n\t}\n\n\tconst referencedTableConfig = schema[referencedTableTsName];\n\tif (!referencedTableConfig) {\n\t\tthrow new Error(`Table \"${referencedTableTsName}\" not found in schema`);\n\t}\n\n\tconst sourceTable = relation.sourceTable;\n\tconst sourceTableTsName = tableNamesMap[getTableUniqueName(sourceTable)];\n\tif (!sourceTableTsName) {\n\t\tthrow new Error(\n\t\t\t`Table \"${sourceTable[Table.Symbol.Name]}\" not found in schema`,\n\t\t);\n\t}\n\n\tconst reverseRelations: Relation[] = [];\n\tfor (\n\t\tconst referencedTableRelation of Object.values(\n\t\t\treferencedTableConfig.relations,\n\t\t)\n\t) {\n\t\tif (\n\t\t\t(relation.relationName\n\t\t\t\t&& relation !== referencedTableRelation\n\t\t\t\t&& referencedTableRelation.relationName === relation.relationName)\n\t\t\t|| (!relation.relationName\n\t\t\t\t&& referencedTableRelation.referencedTable === relation.sourceTable)\n\t\t) {\n\t\t\treverseRelations.push(referencedTableRelation);\n\t\t}\n\t}\n\n\tif (reverseRelations.length > 1) {\n\t\tthrow relation.relationName\n\t\t\t? new Error(\n\t\t\t\t`There are multiple relations with name \"${relation.relationName}\" in table \"${referencedTableTsName}\"`,\n\t\t\t)\n\t\t\t: new Error(\n\t\t\t\t`There are multiple relations between \"${referencedTableTsName}\" and \"${\n\t\t\t\t\trelation.sourceTable[Table.Symbol.Name]\n\t\t\t\t}\". Please specify relation name`,\n\t\t\t);\n\t}\n\n\tif (\n\t\treverseRelations[0]\n\t\t&& is(reverseRelations[0], One)\n\t\t&& reverseRelations[0].config\n\t) {\n\t\treturn {\n\t\t\tfields: reverseRelations[0].config.references,\n\t\t\treferences: reverseRelations[0].config.fields,\n\t\t};\n\t}\n\n\tthrow new Error(\n\t\t`There is not enough information to infer relation \"${sourceTableTsName}.${relation.fieldName}\"`,\n\t);\n}\n\nexport function createTableRelationsHelpers<TTableName extends string>(\n\tsourceTable: AnyTable<{ name: TTableName }>,\n) {\n\treturn {\n\t\tone: createOne<TTableName>(sourceTable),\n\t\tmany: createMany(sourceTable),\n\t};\n}\n\nexport type TableRelationsHelpers<TTableName extends string> = ReturnType<\n\ttypeof createTableRelationsHelpers<TTableName>\n>;\n\nexport interface BuildRelationalQueryResult<\n\tTTable extends Table = Table,\n\tTColumn extends Column = Column,\n> {\n\ttableTsKey: string;\n\tselection: {\n\t\tdbKey: string;\n\t\ttsKey: string;\n\t\tfield: TColumn | SQL | SQL.Aliased;\n\t\trelationTableTsKey: string | undefined;\n\t\tisJson: boolean;\n\t\tisExtra?: boolean;\n\t\tselection: BuildRelationalQueryResult<TTable>['selection'];\n\t}[];\n\tsql: TTable | SQL;\n}\n\nexport function mapRelationalRow(\n\ttablesConfig: TablesRelationalConfig,\n\ttableConfig: TableRelationalConfig,\n\trow: unknown[],\n\tbuildQueryResultSelection: BuildRelationalQueryResult['selection'],\n\tmapColumnValue: (value: unknown) => unknown = (value) => value,\n): Record<string, unknown> {\n\tconst result: Record<string, unknown> = {};\n\n\tfor (\n\t\tconst [\n\t\t\tselectionItemIndex,\n\t\t\tselectionItem,\n\t\t] of buildQueryResultSelection.entries()\n\t) {\n\t\tif (selectionItem.isJson) {\n\t\t\tconst relation = tableConfig.relations[selectionItem.tsKey]!;\n\t\t\tconst rawSubRows = row[selectionItemIndex] as\n\t\t\t\t| unknown[]\n\t\t\t\t| null\n\t\t\t\t| [null]\n\t\t\t\t| string;\n\t\t\tconst subRows = typeof rawSubRows === 'string'\n\t\t\t\t? (JSON.parse(rawSubRows) as unknown[])\n\t\t\t\t: rawSubRows;\n\t\t\tresult[selectionItem.tsKey] = is(relation, One)\n\t\t\t\t? subRows\n\t\t\t\t\t&& mapRelationalRow(\n\t\t\t\t\t\ttablesConfig,\n\t\t\t\t\t\ttablesConfig[selectionItem.relationTableTsKey!]!,\n\t\t\t\t\t\tsubRows,\n\t\t\t\t\t\tselectionItem.selection,\n\t\t\t\t\t\tmapColumnValue,\n\t\t\t\t\t)\n\t\t\t\t: (subRows as unknown[][]).map((subRow) =>\n\t\t\t\t\tmapRelationalRow(\n\t\t\t\t\t\ttablesConfig,\n\t\t\t\t\t\ttablesConfig[selectionItem.relationTableTsKey!]!,\n\t\t\t\t\t\tsubRow,\n\t\t\t\t\t\tselectionItem.selection,\n\t\t\t\t\t\tmapColumnValue,\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t} else {\n\t\t\tconst value = mapColumnValue(row[selectionItemIndex]);\n\t\t\tconst field = selectionItem.field!;\n\t\t\tlet decoder;\n\t\t\tif (is(field, Column)) {\n\t\t\t\tdecoder = field;\n\t\t\t} else if (is(field, SQL)) {\n\t\t\t\tdecoder = field.decoder;\n\t\t\t} else {\n\t\t\t\tdecoder = field.sql.decoder;\n\t\t\t}\n\t\t\tresult[selectionItem.tsKey] = value === null ? null : decoder.mapFromDriverValue(value);\n\t\t}\n\t}\n\n\treturn result;\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { AnyPgColumn, PgColumn } from './columns/index.ts';\nimport { PgTable } from './table.ts';\n\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumn extends AnyPgColumn<{ tableName: TTableName }>,\n\tTColumns extends AnyPgColumn<{ tableName: TTableName }>[],\n>(config: { name?: string; columns: [TColumn, ...TColumns] }): PrimaryKeyBuilder;\n/**\n * @deprecated: Please use primaryKey({ columns: [] }) instead of this function\n * @param columns\n */\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumns extends AnyPgColumn<{ tableName: TTableName }>[],\n>(...columns: TColumns): PrimaryKeyBuilder;\nexport function primaryKey(...config: any) {\n\tif (config[0].columns) {\n\t\treturn new PrimaryKeyBuilder(config[0].columns, config[0].name);\n\t}\n\treturn new PrimaryKeyBuilder(config);\n}\n\nexport class PrimaryKeyBuilder {\n\tstatic readonly [entityKind]: string = 'PgPrimaryKeyBuilder';\n\n\t/** @internal */\n\tcolumns: PgColumn[];\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tcolumns: PgColumn[],\n\t\tname?: string,\n\t) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): PrimaryKey {\n\t\treturn new PrimaryKey(table, this.columns, this.name);\n\t}\n}\n\nexport class PrimaryKey {\n\tstatic readonly [entityKind]: string = 'PgPrimaryKey';\n\n\treadonly columns: AnyPgColumn<{}>[];\n\treadonly name?: string;\n\n\tconstructor(readonly table: PgTable, columns: AnyPgColumn<{}>[], name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\tgetName(): string {\n\t\treturn this.name ?? `${this.table[PgTable.Symbol.Name]}_${this.columns.map((column) => column.name).join('_')}_pk`;\n\t}\n}\n", "import type { BuildColumns, BuildExtraConfigColumns } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport { Table, type TableConfig as TableConfigBase, type UpdateTableConfig } from '~/table.ts';\nimport type { CheckBuilder } from './checks.ts';\nimport { getPgColumnBuilders, type PgColumnsBuilders } from './columns/all.ts';\nimport type { ExtraConfigColumn, PgColumn, PgColumnBuilder, PgColumnBuilderBase } from './columns/common.ts';\nimport type { ForeignKey, ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { AnyIndexBuilder } from './indexes.ts';\nimport type { PgPolicy } from './policies.ts';\nimport type { PrimaryKeyBuilder } from './primary-keys.ts';\nimport type { UniqueConstraintBuilder } from './unique-constraint.ts';\n\nexport type PgTableExtraConfigValue =\n\t| AnyIndexBuilder\n\t| CheckBuilder\n\t| ForeignKeyBuilder\n\t| PrimaryKeyBuilder\n\t| UniqueConstraintBuilder\n\t| PgPolicy;\n\nexport type PgTableExtraConfig = Record<\n\tstring,\n\tPgTableExtraConfigValue\n>;\n\nexport type TableConfig = TableConfigBase<PgColumn>;\n\n/** @internal */\nexport const InlineForeignKeys = Symbol.for('drizzle:PgInlineForeignKeys');\n/** @internal */\nexport const EnableRLS = Symbol.for('drizzle:EnableRLS');\n\nexport class PgTable<T extends TableConfig = TableConfig> extends Table<T> {\n\tstatic override readonly [entityKind]: string = 'PgTable';\n\n\t/** @internal */\n\tstatic override readonly Symbol = Object.assign({}, Table.Symbol, {\n\t\tInlineForeignKeys: InlineForeignKeys as typeof InlineForeignKeys,\n\t\tEnableRLS: EnableRLS as typeof EnableRLS,\n\t});\n\n\t/**@internal */\n\t[InlineForeignKeys]: ForeignKey[] = [];\n\n\t/** @internal */\n\t[EnableRLS]: boolean = false;\n\n\t/** @internal */\n\toverride [Table.Symbol.ExtraConfigBuilder]: ((self: Record<string, PgColumn>) => PgTableExtraConfig) | undefined =\n\t\tundefined;\n\n\t/** @internal */\n\toverride [Table.Symbol.ExtraConfigColumns]: Record<string, ExtraConfigColumn> = {};\n}\n\nexport type AnyPgTable<TPartial extends Partial<TableConfig> = {}> = PgTable<UpdateTableConfig<TableConfig, TPartial>>;\n\nexport type PgTableWithColumns<T extends TableConfig> =\n\t& PgTable<T>\n\t& {\n\t\t[Key in keyof T['columns']]: T['columns'][Key];\n\t}\n\t& {\n\t\tenableRLS: () => Omit<\n\t\t\tPgTableWithColumns<T>,\n\t\t\t'enableRLS'\n\t\t>;\n\t};\n\n/** @internal */\nexport function pgTableWithSchema<\n\tTTableName extends string,\n\tTSchemaName extends string | undefined,\n\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n>(\n\tname: TTableName,\n\tcolumns: TColumnsMap | ((columnTypes: PgColumnsBuilders) => TColumnsMap),\n\textraConfig:\n\t\t| ((self: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>) => PgTableExtraConfig | PgTableExtraConfigValue[])\n\t\t| undefined,\n\tschema: TSchemaName,\n\tbaseName = name,\n): PgTableWithColumns<{\n\tname: TTableName;\n\tschema: TSchemaName;\n\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\tdialect: 'pg';\n}> {\n\tconst rawTable = new PgTable<{\n\t\tname: TTableName;\n\t\tschema: TSchemaName;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>(name, schema, baseName);\n\n\tconst parsedColumns: TColumnsMap = typeof columns === 'function' ? columns(getPgColumnBuilders()) : columns;\n\n\tconst builtColumns = Object.fromEntries(\n\t\tObject.entries(parsedColumns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as PgColumnBuilder;\n\t\t\tcolBuilder.setName(name);\n\t\t\tconst column = colBuilder.build(rawTable);\n\t\t\trawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\n\tconst builtColumnsForExtraConfig = Object.fromEntries(\n\t\tObject.entries(parsedColumns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as PgColumnBuilder;\n\t\t\tcolBuilder.setName(name);\n\t\t\tconst column = colBuilder.buildExtraConfigColumn(rawTable);\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>;\n\n\tconst table = Object.assign(rawTable, builtColumns);\n\n\ttable[Table.Symbol.Columns] = builtColumns;\n\ttable[Table.Symbol.ExtraConfigColumns] = builtColumnsForExtraConfig;\n\n\tif (extraConfig) {\n\t\ttable[PgTable.Symbol.ExtraConfigBuilder] = extraConfig as any;\n\t}\n\n\treturn Object.assign(table, {\n\t\tenableRLS: () => {\n\t\t\ttable[PgTable.Symbol.EnableRLS] = true;\n\t\t\treturn table as PgTableWithColumns<{\n\t\t\t\tname: TTableName;\n\t\t\t\tschema: TSchemaName;\n\t\t\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\t\t\tdialect: 'pg';\n\t\t\t}>;\n\t\t},\n\t});\n}\n\nexport interface PgTableFn<TSchema extends string | undefined = undefined> {\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig?: (\n\t\t\tself: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>,\n\t\t) => PgTableExtraConfigValue[],\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: (columnTypes: PgColumnsBuilders) => TColumnsMap,\n\t\textraConfig?: (self: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>) => PgTableExtraConfigValue[],\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n\t/**\n\t * @deprecated The third parameter of pgTable is changing and will only accept an array instead of an object\n\t *\n\t * @example\n\t * Deprecated version:\n\t * ```ts\n\t * export const users = pgTable(\"users\", {\n\t * \tid: integer(),\n\t * }, (t) => ({\n\t * \tidx: index('custom_name').on(t.id)\n\t * }));\n\t * ```\n\t *\n\t * New API:\n\t * ```ts\n\t * export const users = pgTable(\"users\", {\n\t * \tid: integer(),\n\t * }, (t) => [\n\t * \tindex('custom_name').on(t.id)\n\t * ]);\n\t * ```\n\t */\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig: (\n\t\t\tself: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>,\n\t\t) => PgTableExtraConfig,\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n\n\t/**\n\t * @deprecated The third parameter of pgTable is changing and will only accept an array instead of an object\n\t *\n\t * @example\n\t * Deprecated version:\n\t * ```ts\n\t * export const users = pgTable(\"users\", {\n\t * \tid: integer(),\n\t * }, (t) => ({\n\t * \tidx: index('custom_name').on(t.id)\n\t * }));\n\t * ```\n\t *\n\t * New API:\n\t * ```ts\n\t * export const users = pgTable(\"users\", {\n\t * \tid: integer(),\n\t * }, (t) => [\n\t * \tindex('custom_name').on(t.id)\n\t * ]);\n\t * ```\n\t */\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: (columnTypes: PgColumnsBuilders) => TColumnsMap,\n\t\textraConfig: (self: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>) => PgTableExtraConfig,\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n}\n\nexport const pgTable: PgTableFn = (name, columns, extraConfig) => {\n\treturn pgTableWithSchema(name, columns, extraConfig, undefined);\n};\n\nexport function pgTableCreator(customizeTableName: (name: string) => string): PgTableFn {\n\treturn (name, columns, extraConfig) => {\n\t\treturn pgTableWithSchema(customizeTableName(name) as typeof name, columns, extraConfig, undefined, name);\n\t};\n}\n", "import type { AnyColumn } from './column.ts';\nimport { Column } from './column.ts';\nimport { is } from './entity.ts';\nimport type { Logger } from './logger.ts';\nimport type { SelectedFieldsOrdered } from './operations.ts';\nimport type { TableLike } from './query-builders/select.types.ts';\nimport { Param, SQL, View } from './sql/sql.ts';\nimport type { DriverValueDecoder } from './sql/sql.ts';\nimport { Subquery } from './subquery.ts';\nimport { getTableName, Table } from './table.ts';\nimport { ViewBaseConfig } from './view-common.ts';\n\n/** @internal */\nexport function mapResultRow<TResult>(\n\tcolumns: SelectedFieldsOrdered<AnyColumn>,\n\trow: unknown[],\n\tjoinsNotNullableMap: Record<string, boolean> | undefined,\n): TResult {\n\t// Key -> nested object key, value -> table name if all fields in the nested object are from the same table, false otherwise\n\tconst nullifyMap: Record<string, string | false> = {};\n\n\tconst result = columns.reduce<Record<string, any>>(\n\t\t(result, { path, field }, columnIndex) => {\n\t\t\tlet decoder: DriverValueDecoder<unknown, unknown>;\n\t\t\tif (is(field, Column)) {\n\t\t\t\tdecoder = field;\n\t\t\t} else if (is(field, SQL)) {\n\t\t\t\tdecoder = field.decoder;\n\t\t\t} else {\n\t\t\t\tdecoder = field.sql.decoder;\n\t\t\t}\n\t\t\tlet node = result;\n\t\t\tfor (const [pathChunkIndex, pathChunk] of path.entries()) {\n\t\t\t\tif (pathChunkIndex < path.length - 1) {\n\t\t\t\t\tif (!(pathChunk in node)) {\n\t\t\t\t\t\tnode[pathChunk] = {};\n\t\t\t\t\t}\n\t\t\t\t\tnode = node[pathChunk];\n\t\t\t\t} else {\n\t\t\t\t\tconst rawValue = row[columnIndex]!;\n\t\t\t\t\tconst value = node[pathChunk] = rawValue === null ? null : decoder.mapFromDriverValue(rawValue);\n\n\t\t\t\t\tif (joinsNotNullableMap && is(field, Column) && path.length === 2) {\n\t\t\t\t\t\tconst objectName = path[0]!;\n\t\t\t\t\t\tif (!(objectName in nullifyMap)) {\n\t\t\t\t\t\t\tnullifyMap[objectName] = value === null ? getTableName(field.table) : false;\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\ttypeof nullifyMap[objectName] === 'string' && nullifyMap[objectName] !== getTableName(field.table)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tnullifyMap[objectName] = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t},\n\t\t{},\n\t);\n\n\t// Nullify all nested objects from nullifyMap that are nullable\n\tif (joinsNotNullableMap && Object.keys(nullifyMap).length > 0) {\n\t\tfor (const [objectName, tableName] of Object.entries(nullifyMap)) {\n\t\t\tif (typeof tableName === 'string' && !joinsNotNullableMap[tableName]) {\n\t\t\t\tresult[objectName] = null;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result as TResult;\n}\n\n/** @internal */\nexport function orderSelectedFields<TColumn extends AnyColumn>(\n\tfields: Record<string, unknown>,\n\tpathPrefix?: string[],\n): SelectedFieldsOrdered<TColumn> {\n\treturn Object.entries(fields).reduce<SelectedFieldsOrdered<AnyColumn>>((result, [name, field]) => {\n\t\tif (typeof name !== 'string') {\n\t\t\treturn result;\n\t\t}\n\n\t\tconst newPath = pathPrefix ? [...pathPrefix, name] : [name];\n\t\tif (is(field, Column) || is(field, SQL) || is(field, SQL.Aliased)) {\n\t\t\tresult.push({ path: newPath, field });\n\t\t} else if (is(field, Table)) {\n\t\t\tresult.push(...orderSelectedFields(field[Table.Symbol.Columns], newPath));\n\t\t} else {\n\t\t\tresult.push(...orderSelectedFields(field as Record<string, unknown>, newPath));\n\t\t}\n\t\treturn result;\n\t}, []) as SelectedFieldsOrdered<TColumn>;\n}\n\nexport function haveSameKeys(left: Record<string, unknown>, right: Record<string, unknown>) {\n\tconst leftKeys = Object.keys(left);\n\tconst rightKeys = Object.keys(right);\n\n\tif (leftKeys.length !== rightKeys.length) {\n\t\treturn false;\n\t}\n\n\tfor (const [index, key] of leftKeys.entries()) {\n\t\tif (key !== rightKeys[index]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/** @internal */\nexport function mapUpdateSet(table: Table, values: Record<string, unknown>): UpdateSet {\n\tconst entries: [string, UpdateSet[string]][] = Object.entries(values)\n\t\t.filter(([, value]) => value !== undefined)\n\t\t.map(([key, value]) => {\n\t\t\t// eslint-disable-next-line unicorn/prefer-ternary\n\t\t\tif (is(value, SQL) || is(value, Column)) {\n\t\t\t\treturn [key, value];\n\t\t\t} else {\n\t\t\t\treturn [key, new Param(value, table[Table.Symbol.Columns][key])];\n\t\t\t}\n\t\t});\n\n\tif (entries.length === 0) {\n\t\tthrow new Error('No values to set');\n\t}\n\n\treturn Object.fromEntries(entries);\n}\n\nexport type UpdateSet = Record<string, SQL | Param | AnyColumn | null | undefined>;\n\nexport type OneOrMany<T> = T | T[];\n\nexport type Update<T, TUpdate> =\n\t& {\n\t\t[K in Exclude<keyof T, keyof TUpdate>]: T[K];\n\t}\n\t& TUpdate;\n\nexport type Simplify<T> =\n\t& {\n\t\t// @ts-ignore - \"Type parameter 'K' has a circular constraint\", not sure why\n\t\t[K in keyof T]: T[K];\n\t}\n\t& {};\n\nexport type SimplifyMappedType<T> = [T] extends [unknown] ? T : never;\n\nexport type ShallowRecord<K extends keyof any, T> = SimplifyMappedType<{ [P in K]: T }>;\n\nexport type Assume<T, U> = T extends U ? T : U;\n\nexport type Equal<X, Y> = (<T>() => T extends X ? 1 : 2) extends (<T>() => T extends Y ? 1 : 2) ? true : false;\n\nexport interface DrizzleTypeError<T extends string> {\n\t$drizzleTypeError: T;\n}\n\nexport type ValueOrArray<T> = T | T[];\n\n/** @internal */\nexport function applyMixins(baseClass: any, extendedClasses: any[]) {\n\tfor (const extendedClass of extendedClasses) {\n\t\tfor (const name of Object.getOwnPropertyNames(extendedClass.prototype)) {\n\t\t\tif (name === 'constructor') continue;\n\n\t\t\tObject.defineProperty(\n\t\t\t\tbaseClass.prototype,\n\t\t\t\tname,\n\t\t\t\tObject.getOwnPropertyDescriptor(extendedClass.prototype, name) || Object.create(null),\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport type Or<T1, T2> = T1 extends true ? true : T2 extends true ? true : false;\n\nexport type IfThenElse<If, Then, Else> = If extends true ? Then : Else;\n\nexport type PromiseOf<T> = T extends Promise<infer U> ? U : T;\n\nexport type Writable<T> = {\n\t-readonly [P in keyof T]: T[P];\n};\n\nexport type NonArray<T> = T extends any[] ? never : T;\n\nexport function getTableColumns<T extends Table>(table: T): T['_']['columns'] {\n\treturn table[Table.Symbol.Columns];\n}\n\nexport function getViewSelectedFields<T extends View>(view: T): T['_']['selectedFields'] {\n\treturn view[ViewBaseConfig].selectedFields;\n}\n\n/** @internal */\nexport function getTableLikeName(table: TableLike): string | undefined {\n\treturn is(table, Subquery)\n\t\t? table._.alias\n\t\t: is(table, View)\n\t\t? table[ViewBaseConfig].name\n\t\t: is(table, SQL)\n\t\t? undefined\n\t\t: table[Table.Symbol.IsAlias]\n\t\t? table[Table.Symbol.Name]\n\t\t: table[Table.Symbol.BaseName];\n}\n\nexport type ColumnsWithTable<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends AnyColumn<{ tableName: TTableName }>[],\n> = { [Key in keyof TColumns]: AnyColumn<{ tableName: TForeignTableName }> };\n\nexport type Casing = 'snake_case' | 'camelCase';\n\nexport interface DrizzleConfig<TSchema extends Record<string, unknown> = Record<string, never>> {\n\tlogger?: boolean | Logger;\n\tschema?: TSchema;\n\tcasing?: Casing;\n}\nexport type ValidateShape<T, ValidShape, TResult = T> = T extends ValidShape\n\t? Exclude<keyof T, keyof ValidShape> extends never ? TResult\n\t: DrizzleTypeError<\n\t\t`Invalid key(s): ${Exclude<(keyof T) & (string | number | bigint | boolean | null | undefined), keyof ValidShape>}`\n\t>\n\t: never;\n\nexport type KnownKeysOnly<T, U> = {\n\t[K in keyof T]: K extends keyof U ? T[K] : never;\n};\n\nexport type IsAny<T> = 0 extends (1 & T) ? true : false;\n\n/** @internal */\nexport function getColumnNameAndConfig<\n\tTConfig extends Record<string, any> | undefined,\n>(a: string | TConfig | undefined, b: TConfig | undefined) {\n\treturn {\n\t\tname: typeof a === 'string' && a.length > 0 ? a : '' as string,\n\t\tconfig: typeof a === 'object' ? a : b as TConfig,\n\t};\n}\n\nexport type IfNotImported<T, Y, N> = unknown extends T ? Y : N;\n\nexport type ImportTypeError<TPackageName extends string> =\n\t`Please install \\`${TPackageName}\\` to allow Drizzle ORM to connect to the database`;\n\nexport type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Keys extends any\n\t? Required<Pick<T, Keys>> & Partial<Omit<T, Keys>>\n\t: never;\n\ntype ExpectedConfigShape = {\n\tlogger?: boolean | {\n\t\tlogQuery(query: string, params: unknown[]): void;\n\t};\n\tschema?: Record<string, never>;\n\tcasing?: 'snake_case' | 'camelCase';\n};\n\n// If this errors, you must update config shape checker function with new config specs\nconst _: DrizzleConfig = {} as ExpectedConfigShape;\nconst __: ExpectedConfigShape = {} as DrizzleConfig;\n\nexport function isConfig(data: any): boolean {\n\tif (typeof data !== 'object' || data === null) return false;\n\n\tif (data.constructor.name !== 'Object') return false;\n\n\tif ('logger' in data) {\n\t\tconst type = typeof data['logger'];\n\t\tif (\n\t\t\ttype !== 'boolean' && (type !== 'object' || typeof data['logger']['logQuery'] !== 'function')\n\t\t\t&& type !== 'undefined'\n\t\t) return false;\n\n\t\treturn true;\n\t}\n\n\tif ('schema' in data) {\n\t\tconst type = typeof data['schema'];\n\t\tif (type !== 'object' && type !== 'undefined') return false;\n\n\t\treturn true;\n\t}\n\n\tif ('casing' in data) {\n\t\tconst type = typeof data['casing'];\n\t\tif (type !== 'string' && type !== 'undefined') return false;\n\n\t\treturn true;\n\t}\n\n\tif ('mode' in data) {\n\t\tif (data['mode'] !== 'default' || data['mode'] !== 'planetscale' || data['mode'] !== undefined) return false;\n\n\t\treturn true;\n\t}\n\n\tif ('connection' in data) {\n\t\tconst type = typeof data['connection'];\n\t\tif (type !== 'string' && type !== 'object' && type !== 'undefined') return false;\n\n\t\treturn true;\n\t}\n\n\tif ('client' in data) {\n\t\tconst type = typeof data['client'];\n\t\tif (type !== 'object' && type !== 'function' && type !== 'undefined') return false;\n\n\t\treturn true;\n\t}\n\n\tif (Object.keys(data).length === 0) return true;\n\n\treturn false;\n}\n\nexport type NeonAuthToken = string | (() => string | Promise<string>);\n", "import { type AnyColumn, Column, type GetColumnData } from '~/column.ts';\nimport { is } from '~/entity.ts';\nimport { Table } from '~/table.ts';\nimport {\n\tisDriverValueEncoder,\n\tisSQLWrapper,\n\tParam,\n\tPlaceholder,\n\tSQL,\n\tsql,\n\ttype SQLChunk,\n\ttype SQLWrapper,\n\tStringChunk,\n\tView,\n} from '../sql.ts';\n\nexport function bindIfParam(value: unknown, column: SQLWrapper): SQLChunk {\n\tif (\n\t\tisDriverValueEncoder(column)\n\t\t&& !isSQLWrapper(value)\n\t\t&& !is(value, Param)\n\t\t&& !is(value, Placeholder)\n\t\t&& !is(value, Column)\n\t\t&& !is(value, Table)\n\t\t&& !is(value, View)\n\t) {\n\t\treturn new Param(value, column);\n\t}\n\treturn value as SQLChunk;\n}\n\nexport interface BinaryOperator {\n\t<TColumn extends Column>(\n\t\tleft: TColumn,\n\t\tright: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n\t): SQL;\n\t<T>(left: SQL.Aliased<T>, right: T | SQLWrapper): SQL;\n\t<T extends SQLWrapper>(\n\t\tleft: Exclude<T, SQL.Aliased | Column>,\n\t\tright: unknown,\n\t): SQL;\n}\n\n/**\n * Test that two values are equal.\n *\n * Remember that the SQL standard dictates that\n * two NULL values are not equal, so if you want to test\n * whether a value is null, you may want to use\n * `isNull` instead.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by Ford\n * db.select().from(cars)\n *   .where(eq(cars.make, 'Ford'))\n * ```\n *\n * @see isNull for a way to test equality to NULL.\n */\nexport const eq: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} = ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that two values are not equal.\n *\n * Remember that the SQL standard dictates that\n * two NULL values are not equal, so if you want to test\n * whether a value is not null, you may want to use\n * `isNotNull` instead.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars not made by Ford\n * db.select().from(cars)\n *   .where(ne(cars.make, 'Ford'))\n * ```\n *\n * @see isNotNull for a way to test whether a value is not null.\n */\nexport const ne: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} <> ${bindIfParam(right, left)}`;\n};\n\n/**\n * Combine a list of conditions with the `and` operator. Conditions\n * that are equal `undefined` are automatically ignored.\n *\n * ## Examples\n *\n * ```ts\n * db.select().from(cars)\n *   .where(\n *     and(\n *       eq(cars.make, 'Volvo'),\n *       eq(cars.year, 1950),\n *     )\n *   )\n * ```\n */\nexport function and(...conditions: (SQLWrapper | undefined)[]): SQL | undefined;\nexport function and(\n\t...unfilteredConditions: (SQLWrapper | undefined)[]\n): SQL | undefined {\n\tconst conditions = unfilteredConditions.filter(\n\t\t(c): c is Exclude<typeof c, undefined> => c !== undefined,\n\t);\n\n\tif (conditions.length === 0) {\n\t\treturn undefined;\n\t}\n\n\tif (conditions.length === 1) {\n\t\treturn new SQL(conditions);\n\t}\n\n\treturn new SQL([\n\t\tnew StringChunk('('),\n\t\tsql.join(conditions, new StringChunk(' and ')),\n\t\tnew StringChunk(')'),\n\t]);\n}\n\n/**\n * Combine a list of conditions with the `or` operator. Conditions\n * that are equal `undefined` are automatically ignored.\n *\n * ## Examples\n *\n * ```ts\n * db.select().from(cars)\n *   .where(\n *     or(\n *       eq(cars.make, 'GM'),\n *       eq(cars.make, 'Ford'),\n *     )\n *   )\n * ```\n */\nexport function or(...conditions: (SQLWrapper | undefined)[]): SQL | undefined;\nexport function or(\n\t...unfilteredConditions: (SQLWrapper | undefined)[]\n): SQL | undefined {\n\tconst conditions = unfilteredConditions.filter(\n\t\t(c): c is Exclude<typeof c, undefined> => c !== undefined,\n\t);\n\n\tif (conditions.length === 0) {\n\t\treturn undefined;\n\t}\n\n\tif (conditions.length === 1) {\n\t\treturn new SQL(conditions);\n\t}\n\n\treturn new SQL([\n\t\tnew StringChunk('('),\n\t\tsql.join(conditions, new StringChunk(' or ')),\n\t\tnew StringChunk(')'),\n\t]);\n}\n\n/**\n * Negate the meaning of an expression using the `not` keyword.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars _not_ made by GM or Ford.\n * db.select().from(cars)\n *   .where(not(inArray(cars.make, ['GM', 'Ford'])))\n * ```\n */\nexport function not(condition: SQLWrapper): SQL {\n\treturn sql`not ${condition}`;\n}\n\n/**\n * Test that the first expression passed is greater than\n * the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made after 2000.\n * db.select().from(cars)\n *   .where(gt(cars.year, 2000))\n * ```\n *\n * @see gte for greater-than-or-equal\n */\nexport const gt: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} > ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that the first expression passed is greater than\n * or equal to the second expression. Use `gt` to\n * test whether an expression is strictly greater\n * than another.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made on or after 2000.\n * db.select().from(cars)\n *   .where(gte(cars.year, 2000))\n * ```\n *\n * @see gt for a strictly greater-than condition\n */\nexport const gte: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} >= ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that the first expression passed is less than\n * the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made before 2000.\n * db.select().from(cars)\n *   .where(lt(cars.year, 2000))\n * ```\n *\n * @see lte for less-than-or-equal\n */\nexport const lt: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} < ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that the first expression passed is less than\n * or equal to the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made before 2000.\n * db.select().from(cars)\n *   .where(lte(cars.year, 2000))\n * ```\n *\n * @see lt for a strictly less-than condition\n */\nexport const lte: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} <= ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test whether the first parameter, a column or expression,\n * has a value from a list passed as the second argument.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by Ford or GM.\n * db.select().from(cars)\n *   .where(inArray(cars.make, ['Ford', 'GM']))\n * ```\n *\n * @see notInArray for the inverse of this test\n */\nexport function inArray<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function inArray<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: ReadonlyArray<GetColumnData<TColumn, 'raw'> | Placeholder> | SQLWrapper,\n): SQL;\nexport function inArray<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: ReadonlyArray<unknown | Placeholder> | SQLWrapper,\n): SQL;\nexport function inArray(\n\tcolumn: SQLWrapper,\n\tvalues: ReadonlyArray<unknown | Placeholder> | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\treturn sql`false`;\n\t\t}\n\t\treturn sql`${column} in ${values.map((v) => bindIfParam(v, column))}`;\n\t}\n\n\treturn sql`${column} in ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test whether the first parameter, a column or expression,\n * has a value that is not present in a list passed as the\n * second argument.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by any company except Ford or GM.\n * db.select().from(cars)\n *   .where(notInArray(cars.make, ['Ford', 'GM']))\n * ```\n *\n * @see inArray for the inverse of this test\n */\nexport function notInArray<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function notInArray<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function notInArray<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function notInArray(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\treturn sql`true`;\n\t\t}\n\t\treturn sql`${column} not in ${values.map((v) => bindIfParam(v, column))}`;\n\t}\n\n\treturn sql`${column} not in ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test whether an expression is NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have no discontinuedAt date.\n * db.select().from(cars)\n *   .where(isNull(cars.discontinuedAt))\n * ```\n *\n * @see isNotNull for the inverse of this test\n */\nexport function isNull(value: SQLWrapper): SQL {\n\treturn sql`${value} is null`;\n}\n\n/**\n * Test whether an expression is not NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have been discontinued.\n * db.select().from(cars)\n *   .where(isNotNull(cars.discontinuedAt))\n * ```\n *\n * @see isNull for the inverse of this test\n */\nexport function isNotNull(value: SQLWrapper): SQL {\n\treturn sql`${value} is not null`;\n}\n\n/**\n * Test whether a subquery evaluates to have any rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column has a match in a cities\n * // table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     exists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see notExists for the inverse of this test\n */\nexport function exists(subquery: SQLWrapper): SQL {\n\treturn sql`exists ${subquery}`;\n}\n\n/**\n * Test whether a subquery doesn't include any result\n * rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column doesn't match\n * // a row in the cities table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     notExists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see exists for the inverse of this test\n */\nexport function notExists(subquery: SQLWrapper): SQL {\n\treturn sql`not exists ${subquery}`;\n}\n\n/**\n * Test whether an expression is between two values. This\n * is an easier way to express range tests, which would be\n * expressed mathematically as `x <= a <= y` but in SQL\n * would have to be like `a >= x AND a <= y`.\n *\n * Between is inclusive of the endpoints: if `column`\n * is equal to `min` or `max`, it will be TRUE.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made between 1990 and 2000\n * db.select().from(cars)\n *   .where(between(cars.year, 1990, 2000))\n * ```\n *\n * @see notBetween for the inverse of this test\n */\nexport function between<T>(\n\tcolumn: SQL.Aliased,\n\tmin: T | SQLWrapper,\n\tmax: T | SQLWrapper,\n): SQL;\nexport function between<TColumn extends AnyColumn>(\n\tcolumn: TColumn,\n\tmin: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n\tmax: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n): SQL;\nexport function between<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tmin: unknown,\n\tmax: unknown,\n): SQL;\nexport function between(column: SQLWrapper, min: unknown, max: unknown): SQL {\n\treturn sql`${column} between ${bindIfParam(min, column)} and ${\n\t\tbindIfParam(\n\t\t\tmax,\n\t\t\tcolumn,\n\t\t)\n\t}`;\n}\n\n/**\n * Test whether an expression is not between two values.\n *\n * This, like `between`, includes its endpoints, so if\n * the `column` is equal to `min` or `max`, in this case\n * it will evaluate to FALSE.\n *\n * ## Examples\n *\n * ```ts\n * // Exclude cars made in the 1970s\n * db.select().from(cars)\n *   .where(notBetween(cars.year, 1970, 1979))\n * ```\n *\n * @see between for the inverse of this test\n */\nexport function notBetween<T>(\n\tcolumn: SQL.Aliased,\n\tmin: T | SQLWrapper,\n\tmax: T | SQLWrapper,\n): SQL;\nexport function notBetween<TColumn extends AnyColumn>(\n\tcolumn: TColumn,\n\tmin: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n\tmax: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n): SQL;\nexport function notBetween<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tmin: unknown,\n\tmax: unknown,\n): SQL;\nexport function notBetween(\n\tcolumn: SQLWrapper,\n\tmin: unknown,\n\tmax: unknown,\n): SQL {\n\treturn sql`${column} not between ${\n\t\tbindIfParam(\n\t\t\tmin,\n\t\t\tcolumn,\n\t\t)\n\t} and ${bindIfParam(max, column)}`;\n}\n\n/**\n * Compare a column to a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(like(cars.name, '%Turbo%'))\n * ```\n *\n * @see ilike for a case-insensitive version of this condition\n */\nexport function like(column: Column | SQL.Aliased | SQL, value: string | SQLWrapper): SQL {\n\treturn sql`${column} like ${value}`;\n}\n\n/**\n * The inverse of like - this tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"ROver\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see like for the inverse condition\n * @see notIlike for a case-insensitive version of this condition\n */\nexport function notLike(column: Column | SQL.Aliased | SQL, value: string | SQLWrapper): SQL {\n\treturn sql`${column} not like ${value}`;\n}\n\n/**\n * Case-insensitively compare a column to a pattern,\n * which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * Unlike like, this performs a case-insensitive comparison.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(ilike(cars.name, '%Turbo%'))\n * ```\n *\n * @see like for a case-sensitive version of this condition\n */\nexport function ilike(column: Column | SQL.Aliased | SQL, value: string | SQLWrapper): SQL {\n\treturn sql`${column} ilike ${value}`;\n}\n\n/**\n * The inverse of ilike - this case-insensitively tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"Rover\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see ilike for the inverse condition\n * @see notLike for a case-sensitive version of this condition\n */\nexport function notIlike(column: Column | SQL.Aliased | SQL, value: string | SQLWrapper): SQL {\n\treturn sql`${column} not ilike ${value}`;\n}\n\n/**\n * Test that a column or expression contains all elements of\n * the list passed as the second argument.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select posts where its tags contain \"Typescript\" and \"ORM\".\n * db.select().from(posts)\n *   .where(arrayContains(posts.tags, ['Typescript', 'ORM']))\n * ```\n *\n * @see arrayContained to find if an array contains all elements of a column or expression\n * @see arrayOverlaps to find if a column or expression contains any elements of an array\n */\nexport function arrayContains<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContains<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContains<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function arrayContains(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('arrayContains requires at least one value');\n\t\t}\n\t\tconst array = sql`${bindIfParam(values, column)}`;\n\t\treturn sql`${column} @> ${array}`;\n\t}\n\n\treturn sql`${column} @> ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test that the list passed as the second argument contains\n * all elements of a column or expression.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select posts where its tags contain \"Typescript\", \"ORM\" or both,\n * // but filtering posts that have additional tags.\n * db.select().from(posts)\n *   .where(arrayContained(posts.tags, ['Typescript', 'ORM']))\n * ```\n *\n * @see arrayContains to find if a column or expression contains all elements of an array\n * @see arrayOverlaps to find if a column or expression contains any elements of an array\n */\nexport function arrayContained<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContained<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContained<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function arrayContained(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('arrayContained requires at least one value');\n\t\t}\n\t\tconst array = sql`${bindIfParam(values, column)}`;\n\t\treturn sql`${column} <@ ${array}`;\n\t}\n\n\treturn sql`${column} <@ ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test that a column or expression contains any elements of\n * the list passed as the second argument.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select posts where its tags contain \"Typescript\", \"ORM\" or both.\n * db.select().from(posts)\n *   .where(arrayOverlaps(posts.tags, ['Typescript', 'ORM']))\n * ```\n *\n * @see arrayContains to find if a column or expression contains all elements of an array\n * @see arrayContained to find if an array contains all elements of a column or expression\n */\nexport function arrayOverlaps<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayOverlaps<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayOverlaps<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function arrayOverlaps(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('arrayOverlaps requires at least one value');\n\t\t}\n\t\tconst array = sql`${bindIfParam(values, column)}`;\n\t\treturn sql`${column} && ${array}`;\n\t}\n\n\treturn sql`${column} && ${bindIfParam(values, column)}`;\n}\n", "import type { AnyColumn } from '../../column.ts';\nimport type { SQL, SQLWrapper } from '../sql.ts';\nimport { sql } from '../sql.ts';\n\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in ascending\n * order. By the SQL standard, ascending order is the\n * default, so it is not usually necessary to specify\n * ascending sort order.\n *\n * ## Examples\n *\n * ```ts\n * // Return cars, starting with the oldest models\n * // and going in ascending order to the newest.\n * db.select().from(cars)\n *   .orderBy(asc(cars.year));\n * ```\n *\n * @see desc to sort in descending order\n */\nexport function asc(column: AnyColumn | SQLWrapper): SQL {\n\treturn sql`${column} asc`;\n}\n\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in descending\n * order.\n *\n * ## Examples\n *\n * ```ts\n * // Select users, with the most recently created\n * // records coming first.\n * db.select().from(users)\n *   .orderBy(desc(users.createdAt));\n * ```\n *\n * @see asc to sort in ascending order\n */\nexport function desc(column: AnyColumn | SQLWrapper): SQL {\n\treturn sql`${column} desc`;\n}\n", "// database connection\nimport { createClient } from '@libsql/client'\nimport { drizzle } from 'drizzle-orm/libsql'\n\n// Imports all exported members from the ./schema file, and Bundles them into a single object called schema\n// since schema.ts exports the tasks table definition, after this import you can access it as: schema.tasks\nimport type { Environment } from '../env'\n\nimport * as schema from './schema'\n\n// libSQL can connect to both SQLite files and Turso remote databases\n// LibSQL is a fork of SQLite that offers a bit more functionality compared to standard SQLite\n\n// The lib Sql client that Turso provide can actually talk to a file on your local machine.\n// So when we are running in Dev mode, we can talk to a sqlite database living in the same folder\n// When we deploy, we can create an Turso instance and then set our environment variable to be that endpoint\n\n// export default db\n\nexport function createDbClient(env: Environment) {\n  const client = createClient({\n    url: env.DATABASE_URL,\n    authToken: env.DATABASE_AUTH_TOKEN,\n  })\n\n  // create a drizzle db instance\n  // let drizzle know about the schema, so that we can use the schema to query the database\n  const db = drizzle(client, { schema })\n\n  return { db, client }\n}\n", "import { LibsqlError } from \"@libsql/core/api\";\nimport { expandConfig } from \"@libsql/core/config\";\nimport { supportedUrlLink } from \"@libsql/core/util\";\nimport { _createClient as _createWsClient } from \"./ws.js\";\nimport { _createClient as _createHttpClient } from \"./http.js\";\nexport * from \"@libsql/core/api\";\nexport function createClient(config) {\n    return _createClient(expandConfig(config, true));\n}\n/** @private */\nexport function _createClient(config) {\n    if (config.scheme === \"ws\" || config.scheme === \"wss\") {\n        return _createWsClient(config);\n    }\n    else if (config.scheme === \"http\" || config.scheme === \"https\") {\n        return _createHttpClient(config);\n    }\n    else {\n        throw new LibsqlError('The client that uses Web standard APIs supports only \"libsql:\", \"wss:\", \"ws:\", \"https:\" and \"http:\" URLs, ' +\n            `got ${JSON.stringify(config.scheme + \":\")}. For more information, please read ${supportedUrlLink}`, \"URL_SCHEME_NOT_SUPPORTED\");\n    }\n}\n", "/** Error thrown by the client. */\nexport class LibsqlError extends Error {\n    /** Machine-readable error code. */\n    code;\n    /** Raw numeric error code */\n    rawCode;\n    constructor(message, code, rawCode, cause) {\n        if (code !== undefined) {\n            message = `${code}: ${message}`;\n        }\n        super(message, { cause });\n        this.code = code;\n        this.rawCode = rawCode;\n        this.name = \"LibsqlError\";\n    }\n}\n", "import { LibsqlError } from \"./api.js\";\nimport { parseUri } from \"./uri.js\";\nimport { supportedUrlLink } from \"./util.js\";\nconst inMemoryMode = \":memory:\";\nexport function isInMemoryConfig(config) {\n    return (config.scheme === \"file\" &&\n        (config.path === \":memory:\" || config.path.startsWith(\":memory:?\")));\n}\nexport function expandConfig(config, preferHttp) {\n    if (typeof config !== \"object\") {\n        // produce a reasonable error message in the common case where users type\n        // `createClient(\"libsql://...\")` instead of `createClient({url: \"libsql://...\"})`\n        throw new TypeError(`Expected client configuration as object, got ${typeof config}`);\n    }\n    let { url, authToken, tls, intMode, concurrency } = config;\n    // fill simple defaults right here\n    concurrency = Math.max(0, concurrency || 20);\n    intMode ??= \"number\";\n    let connectionQueryParams = []; // recognized query parameters which we sanitize through white list of valid key-value pairs\n    // convert plain :memory: url to URI format to make logic more uniform\n    if (url === inMemoryMode) {\n        url = \"file::memory:\";\n    }\n    // parse url parameters first and override config with update values\n    const uri = parseUri(url);\n    const originalUriScheme = uri.scheme.toLowerCase();\n    const isInMemoryMode = originalUriScheme === \"file\" &&\n        uri.path === inMemoryMode &&\n        uri.authority === undefined;\n    let queryParamsDef;\n    if (isInMemoryMode) {\n        queryParamsDef = {\n            cache: {\n                values: [\"shared\", \"private\"],\n                update: (key, value) => connectionQueryParams.push(`${key}=${value}`),\n            },\n        };\n    }\n    else {\n        queryParamsDef = {\n            tls: {\n                values: [\"0\", \"1\"],\n                update: (_, value) => (tls = value === \"1\"),\n            },\n            authToken: {\n                update: (_, value) => (authToken = value),\n            },\n        };\n    }\n    for (const { key, value } of uri.query?.pairs ?? []) {\n        if (!Object.hasOwn(queryParamsDef, key)) {\n            throw new LibsqlError(`Unsupported URL query parameter ${JSON.stringify(key)}`, \"URL_PARAM_NOT_SUPPORTED\");\n        }\n        const queryParamDef = queryParamsDef[key];\n        if (queryParamDef.values !== undefined &&\n            !queryParamDef.values.includes(value)) {\n            throw new LibsqlError(`Unknown value for the \"${key}\" query argument: ${JSON.stringify(value)}. Supported values are: [${queryParamDef.values.map((x) => '\"' + x + '\"').join(\", \")}]`, \"URL_INVALID\");\n        }\n        if (queryParamDef.update !== undefined) {\n            queryParamDef?.update(key, value);\n        }\n    }\n    // fill complex defaults & validate config\n    const connectionQueryParamsString = connectionQueryParams.length === 0\n        ? \"\"\n        : `?${connectionQueryParams.join(\"&\")}`;\n    const path = uri.path + connectionQueryParamsString;\n    let scheme;\n    if (originalUriScheme === \"libsql\") {\n        if (tls === false) {\n            if (uri.authority?.port === undefined) {\n                throw new LibsqlError('A \"libsql:\" URL with ?tls=0 must specify an explicit port', \"URL_INVALID\");\n            }\n            scheme = preferHttp ? \"http\" : \"ws\";\n        }\n        else {\n            scheme = preferHttp ? \"https\" : \"wss\";\n        }\n    }\n    else {\n        scheme = originalUriScheme;\n    }\n    if (scheme === \"http\" || scheme === \"ws\") {\n        tls ??= false;\n    }\n    else {\n        tls ??= true;\n    }\n    if (scheme !== \"http\" &&\n        scheme !== \"ws\" &&\n        scheme !== \"https\" &&\n        scheme !== \"wss\" &&\n        scheme !== \"file\") {\n        throw new LibsqlError('The client supports only \"libsql:\", \"wss:\", \"ws:\", \"https:\", \"http:\" and \"file:\" URLs, ' +\n            `got ${JSON.stringify(uri.scheme + \":\")}. ` +\n            `For more information, please read ${supportedUrlLink}`, \"URL_SCHEME_NOT_SUPPORTED\");\n    }\n    if (intMode !== \"number\" && intMode !== \"bigint\" && intMode !== \"string\") {\n        throw new TypeError(`Invalid value for intMode, expected \"number\", \"bigint\" or \"string\", got ${JSON.stringify(intMode)}`);\n    }\n    if (uri.fragment !== undefined) {\n        throw new LibsqlError(`URL fragments are not supported: ${JSON.stringify(\"#\" + uri.fragment)}`, \"URL_INVALID\");\n    }\n    if (isInMemoryMode) {\n        return {\n            scheme: \"file\",\n            tls: false,\n            path,\n            intMode,\n            concurrency,\n            syncUrl: config.syncUrl,\n            syncInterval: config.syncInterval,\n            readYourWrites: config.readYourWrites,\n            offline: config.offline,\n            fetch: config.fetch,\n            authToken: undefined,\n            encryptionKey: undefined,\n            authority: undefined,\n        };\n    }\n    return {\n        scheme,\n        tls,\n        authority: uri.authority,\n        path,\n        authToken,\n        intMode,\n        concurrency,\n        encryptionKey: config.encryptionKey,\n        syncUrl: config.syncUrl,\n        syncInterval: config.syncInterval,\n        readYourWrites: config.readYourWrites,\n        offline: config.offline,\n        fetch: config.fetch,\n    };\n}\n", "// URI parser based on RFC 3986\n// We can't use the standard `URL` object, because we want to support relative `file:` URLs like\n// `file:relative/path/database.db`, which are not correct according to RFC 8089, which standardizes the\n// `file` scheme.\nimport { LibsqlError } from \"./api.js\";\nexport function parseUri(text) {\n    const match = URI_RE.exec(text);\n    if (match === null) {\n        throw new LibsqlError(`The URL '${text}' is not in a valid format`, \"URL_INVALID\");\n    }\n    const groups = match.groups;\n    const scheme = groups[\"scheme\"];\n    const authority = groups[\"authority\"] !== undefined\n        ? parseAuthority(groups[\"authority\"])\n        : undefined;\n    const path = percentDecode(groups[\"path\"]);\n    const query = groups[\"query\"] !== undefined ? parseQuery(groups[\"query\"]) : undefined;\n    const fragment = groups[\"fragment\"] !== undefined\n        ? percentDecode(groups[\"fragment\"])\n        : undefined;\n    return { scheme, authority, path, query, fragment };\n}\nconst URI_RE = (() => {\n    const SCHEME = \"(?<scheme>[A-Za-z][A-Za-z.+-]*)\";\n    const AUTHORITY = \"(?<authority>[^/?#]*)\";\n    const PATH = \"(?<path>[^?#]*)\";\n    const QUERY = \"(?<query>[^#]*)\";\n    const FRAGMENT = \"(?<fragment>.*)\";\n    return new RegExp(`^${SCHEME}:(//${AUTHORITY})?${PATH}(\\\\?${QUERY})?(#${FRAGMENT})?$`, \"su\");\n})();\nfunction parseAuthority(text) {\n    const match = AUTHORITY_RE.exec(text);\n    if (match === null) {\n        throw new LibsqlError(\"The authority part of the URL is not in a valid format\", \"URL_INVALID\");\n    }\n    const groups = match.groups;\n    const host = percentDecode(groups[\"host_br\"] ?? groups[\"host\"]);\n    const port = groups[\"port\"] ? parseInt(groups[\"port\"], 10) : undefined;\n    const userinfo = groups[\"username\"] !== undefined\n        ? {\n            username: percentDecode(groups[\"username\"]),\n            password: groups[\"password\"] !== undefined\n                ? percentDecode(groups[\"password\"])\n                : undefined,\n        }\n        : undefined;\n    return { host, port, userinfo };\n}\nconst AUTHORITY_RE = (() => {\n    return new RegExp(`^((?<username>[^:]*)(:(?<password>.*))?@)?((?<host>[^:\\\\[\\\\]]*)|(\\\\[(?<host_br>[^\\\\[\\\\]]*)\\\\]))(:(?<port>[0-9]*))?$`, \"su\");\n})();\n// Query string is parsed as application/x-www-form-urlencoded according to the Web URL standard:\n// https://url.spec.whatwg.org/#urlencoded-parsing\nfunction parseQuery(text) {\n    const sequences = text.split(\"&\");\n    const pairs = [];\n    for (const sequence of sequences) {\n        if (sequence === \"\") {\n            continue;\n        }\n        let key;\n        let value;\n        const splitIdx = sequence.indexOf(\"=\");\n        if (splitIdx < 0) {\n            key = sequence;\n            value = \"\";\n        }\n        else {\n            key = sequence.substring(0, splitIdx);\n            value = sequence.substring(splitIdx + 1);\n        }\n        pairs.push({\n            key: percentDecode(key.replaceAll(\"+\", \" \")),\n            value: percentDecode(value.replaceAll(\"+\", \" \")),\n        });\n    }\n    return { pairs };\n}\nfunction percentDecode(text) {\n    try {\n        return decodeURIComponent(text);\n    }\n    catch (e) {\n        if (e instanceof URIError) {\n            throw new LibsqlError(`URL component has invalid percent encoding: ${e}`, \"URL_INVALID\", undefined, e);\n        }\n        throw e;\n    }\n}\nexport function encodeBaseUrl(scheme, authority, path) {\n    if (authority === undefined) {\n        throw new LibsqlError(`URL with scheme ${JSON.stringify(scheme + \":\")} requires authority (the \"//\" part)`, \"URL_INVALID\");\n    }\n    const schemeText = `${scheme}:`;\n    const hostText = encodeHost(authority.host);\n    const portText = encodePort(authority.port);\n    const userinfoText = encodeUserinfo(authority.userinfo);\n    const authorityText = `//${userinfoText}${hostText}${portText}`;\n    let pathText = path.split(\"/\").map(encodeURIComponent).join(\"/\");\n    if (pathText !== \"\" && !pathText.startsWith(\"/\")) {\n        pathText = \"/\" + pathText;\n    }\n    return new URL(`${schemeText}${authorityText}${pathText}`);\n}\nfunction encodeHost(host) {\n    return host.includes(\":\") ? `[${encodeURI(host)}]` : encodeURI(host);\n}\nfunction encodePort(port) {\n    return port !== undefined ? `:${port}` : \"\";\n}\nfunction encodeUserinfo(userinfo) {\n    if (userinfo === undefined) {\n        return \"\";\n    }\n    const usernameText = encodeURIComponent(userinfo.username);\n    const passwordText = userinfo.password !== undefined\n        ? `:${encodeURIComponent(userinfo.password)}`\n        : \"\";\n    return `${usernameText}${passwordText}@`;\n}\n", "import { Base64 } from \"js-base64\";\nexport const supportedUrlLink = \"https://github.com/libsql/libsql-client-ts#supported-urls\";\nexport function transactionModeToBegin(mode) {\n    if (mode === \"write\") {\n        return \"BEGIN IMMEDIATE\";\n    }\n    else if (mode === \"read\") {\n        return \"BEGIN TRANSACTION READONLY\";\n    }\n    else if (mode === \"deferred\") {\n        return \"BEGIN DEFERRED\";\n    }\n    else {\n        throw RangeError('Unknown transaction mode, supported values are \"write\", \"read\" and \"deferred\"');\n    }\n}\nexport class ResultSetImpl {\n    columns;\n    columnTypes;\n    rows;\n    rowsAffected;\n    lastInsertRowid;\n    constructor(columns, columnTypes, rows, rowsAffected, lastInsertRowid) {\n        this.columns = columns;\n        this.columnTypes = columnTypes;\n        this.rows = rows;\n        this.rowsAffected = rowsAffected;\n        this.lastInsertRowid = lastInsertRowid;\n    }\n    toJSON() {\n        return {\n            columns: this.columns,\n            columnTypes: this.columnTypes,\n            rows: this.rows.map(rowToJson),\n            rowsAffected: this.rowsAffected,\n            lastInsertRowid: this.lastInsertRowid !== undefined\n                ? \"\" + this.lastInsertRowid\n                : null,\n        };\n    }\n}\nfunction rowToJson(row) {\n    return Array.prototype.map.call(row, valueToJson);\n}\nfunction valueToJson(value) {\n    if (typeof value === \"bigint\") {\n        return \"\" + value;\n    }\n    else if (value instanceof ArrayBuffer) {\n        return Base64.fromUint8Array(new Uint8Array(value));\n    }\n    else {\n        return value;\n    }\n}\n", "/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.7';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it) => new Uint8Array(Array.prototype.slice.call(it, 0));\nconst _mkUriSafe = (src) => src\n    .replace(/=/g, '').replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = typeof btoa === 'function' ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 \u00A75\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 \u00A75.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = typeof atob === 'function' ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a).split('').map(c => c.charCodeAt(0)));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { isValid };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };\n", "import * as hrana from \"@libsql/hrana-client\";\nimport { LibsqlError } from \"@libsql/core/api\";\nimport { expandConfig } from \"@libsql/core/config\";\nimport { HranaTransaction, executeHranaBatch, stmtToHrana, resultSetFromHrana, mapHranaError, } from \"./hrana.js\";\nimport { SqlCache } from \"./sql_cache.js\";\nimport { encodeBaseUrl } from \"@libsql/core/uri\";\nimport { supportedUrlLink } from \"@libsql/core/util\";\nimport promiseLimit from \"promise-limit\";\nexport * from \"@libsql/core/api\";\nexport function createClient(config) {\n    return _createClient(expandConfig(config, false));\n}\n/** @private */\nexport function _createClient(config) {\n    if (config.scheme !== \"wss\" && config.scheme !== \"ws\") {\n        throw new LibsqlError('The WebSocket client supports only \"libsql:\", \"wss:\" and \"ws:\" URLs, ' +\n            `got ${JSON.stringify(config.scheme + \":\")}. For more information, please read ${supportedUrlLink}`, \"URL_SCHEME_NOT_SUPPORTED\");\n    }\n    if (config.encryptionKey !== undefined) {\n        throw new LibsqlError(\"Encryption key is not supported by the remote client.\", \"ENCRYPTION_KEY_NOT_SUPPORTED\");\n    }\n    if (config.scheme === \"ws\" && config.tls) {\n        throw new LibsqlError(`A \"ws:\" URL cannot opt into TLS by using ?tls=1`, \"URL_INVALID\");\n    }\n    else if (config.scheme === \"wss\" && !config.tls) {\n        throw new LibsqlError(`A \"wss:\" URL cannot opt out of TLS by using ?tls=0`, \"URL_INVALID\");\n    }\n    const url = encodeBaseUrl(config.scheme, config.authority, config.path);\n    let client;\n    try {\n        client = hrana.openWs(url, config.authToken);\n    }\n    catch (e) {\n        if (e instanceof hrana.WebSocketUnsupportedError) {\n            const suggestedScheme = config.scheme === \"wss\" ? \"https\" : \"http\";\n            const suggestedUrl = encodeBaseUrl(suggestedScheme, config.authority, config.path);\n            throw new LibsqlError(\"This environment does not support WebSockets, please switch to the HTTP client by using \" +\n                `a \"${suggestedScheme}:\" URL (${JSON.stringify(suggestedUrl)}). ` +\n                `For more information, please read ${supportedUrlLink}`, \"WEBSOCKETS_NOT_SUPPORTED\");\n        }\n        throw mapHranaError(e);\n    }\n    return new WsClient(client, url, config.authToken, config.intMode, config.concurrency);\n}\nconst maxConnAgeMillis = 60 * 1000;\nconst sqlCacheCapacity = 100;\nexport class WsClient {\n    #url;\n    #authToken;\n    #intMode;\n    // State of the current connection. The `hrana.WsClient` inside may be closed at any moment due to an\n    // asynchronous error.\n    #connState;\n    // If defined, this is a connection that will be used in the future, once it is ready.\n    #futureConnState;\n    closed;\n    protocol;\n    #isSchemaDatabase;\n    #promiseLimitFunction;\n    /** @private */\n    constructor(client, url, authToken, intMode, concurrency) {\n        this.#url = url;\n        this.#authToken = authToken;\n        this.#intMode = intMode;\n        this.#connState = this.#openConn(client);\n        this.#futureConnState = undefined;\n        this.closed = false;\n        this.protocol = \"ws\";\n        this.#promiseLimitFunction = promiseLimit(concurrency);\n    }\n    async limit(fn) {\n        return this.#promiseLimitFunction(fn);\n    }\n    async execute(stmtOrSql, args) {\n        let stmt;\n        if (typeof stmtOrSql === \"string\") {\n            stmt = {\n                sql: stmtOrSql,\n                args: args || [],\n            };\n        }\n        else {\n            stmt = stmtOrSql;\n        }\n        return this.limit(async () => {\n            const streamState = await this.#openStream();\n            try {\n                const hranaStmt = stmtToHrana(stmt);\n                // Schedule all operations synchronously, so they will be pipelined and executed in a single\n                // network roundtrip.\n                streamState.conn.sqlCache.apply([hranaStmt]);\n                const hranaRowsPromise = streamState.stream.query(hranaStmt);\n                streamState.stream.closeGracefully();\n                const hranaRowsResult = await hranaRowsPromise;\n                return resultSetFromHrana(hranaRowsResult);\n            }\n            catch (e) {\n                throw mapHranaError(e);\n            }\n            finally {\n                this._closeStream(streamState);\n            }\n        });\n    }\n    async batch(stmts, mode = \"deferred\") {\n        return this.limit(async () => {\n            const streamState = await this.#openStream();\n            try {\n                const normalizedStmts = stmts.map((stmt) => {\n                    if (Array.isArray(stmt)) {\n                        return {\n                            sql: stmt[0],\n                            args: stmt[1] || [],\n                        };\n                    }\n                    return stmt;\n                });\n                const hranaStmts = normalizedStmts.map(stmtToHrana);\n                const version = await streamState.conn.client.getVersion();\n                // Schedule all operations synchronously, so they will be pipelined and executed in a single\n                // network roundtrip.\n                streamState.conn.sqlCache.apply(hranaStmts);\n                const batch = streamState.stream.batch(version >= 3);\n                const resultsPromise = executeHranaBatch(mode, version, batch, hranaStmts);\n                const results = await resultsPromise;\n                return results;\n            }\n            catch (e) {\n                throw mapHranaError(e);\n            }\n            finally {\n                this._closeStream(streamState);\n            }\n        });\n    }\n    async migrate(stmts) {\n        return this.limit(async () => {\n            const streamState = await this.#openStream();\n            try {\n                const hranaStmts = stmts.map(stmtToHrana);\n                const version = await streamState.conn.client.getVersion();\n                // Schedule all operations synchronously, so they will be pipelined and executed in a single\n                // network roundtrip.\n                const batch = streamState.stream.batch(version >= 3);\n                const resultsPromise = executeHranaBatch(\"deferred\", version, batch, hranaStmts, true);\n                const results = await resultsPromise;\n                return results;\n            }\n            catch (e) {\n                throw mapHranaError(e);\n            }\n            finally {\n                this._closeStream(streamState);\n            }\n        });\n    }\n    async transaction(mode = \"write\") {\n        return this.limit(async () => {\n            const streamState = await this.#openStream();\n            try {\n                const version = await streamState.conn.client.getVersion();\n                // the BEGIN statement will be batched with the first statement on the transaction to save a\n                // network roundtrip\n                return new WsTransaction(this, streamState, mode, version);\n            }\n            catch (e) {\n                this._closeStream(streamState);\n                throw mapHranaError(e);\n            }\n        });\n    }\n    async executeMultiple(sql) {\n        return this.limit(async () => {\n            const streamState = await this.#openStream();\n            try {\n                // Schedule all operations synchronously, so they will be pipelined and executed in a single\n                // network roundtrip.\n                const promise = streamState.stream.sequence(sql);\n                streamState.stream.closeGracefully();\n                await promise;\n            }\n            catch (e) {\n                throw mapHranaError(e);\n            }\n            finally {\n                this._closeStream(streamState);\n            }\n        });\n    }\n    sync() {\n        throw new LibsqlError(\"sync not supported in ws mode\", \"SYNC_NOT_SUPPORTED\");\n    }\n    async #openStream() {\n        if (this.closed) {\n            throw new LibsqlError(\"The client is closed\", \"CLIENT_CLOSED\");\n        }\n        const now = new Date();\n        const ageMillis = now.valueOf() - this.#connState.openTime.valueOf();\n        if (ageMillis > maxConnAgeMillis &&\n            this.#futureConnState === undefined) {\n            // The existing connection is too old, let's open a new one.\n            const futureConnState = this.#openConn();\n            this.#futureConnState = futureConnState;\n            // However, if we used `futureConnState` immediately, we would introduce additional latency,\n            // because we would have to wait for the WebSocket handshake to complete, even though we may a\n            // have perfectly good existing connection in `this.#connState`!\n            //\n            // So we wait until the `hrana.Client.getVersion()` operation completes (which happens when the\n            // WebSocket hanshake completes), and only then we replace `this.#connState` with\n            // `futureConnState`, which is stored in `this.#futureConnState` in the meantime.\n            futureConnState.client.getVersion().then((_version) => {\n                if (this.#connState !== futureConnState) {\n                    // We need to close `this.#connState` before we replace it. However, it is possible\n                    // that `this.#connState` has already been replaced: see the code below.\n                    if (this.#connState.streamStates.size === 0) {\n                        this.#connState.client.close();\n                    }\n                    else {\n                        // If there are existing streams on the connection, we must not close it, because\n                        // these streams would be broken. The last stream to be closed will also close the\n                        // connection in `_closeStream()`.\n                    }\n                }\n                this.#connState = futureConnState;\n                this.#futureConnState = undefined;\n            }, (_e) => {\n                // If the new connection could not be established, let's just ignore the error and keep\n                // using the existing connection.\n                this.#futureConnState = undefined;\n            });\n        }\n        if (this.#connState.client.closed) {\n            // An error happened on this connection and it has been closed. Let's try to seamlessly reconnect.\n            try {\n                if (this.#futureConnState !== undefined) {\n                    // We are already in the process of opening a new connection, so let's just use it\n                    // immediately.\n                    this.#connState = this.#futureConnState;\n                }\n                else {\n                    this.#connState = this.#openConn();\n                }\n            }\n            catch (e) {\n                throw mapHranaError(e);\n            }\n        }\n        const connState = this.#connState;\n        try {\n            // Now we wait for the WebSocket handshake to complete (if it hasn't completed yet). Note that\n            // this does not increase latency, because any messages that we would send on the WebSocket before\n            // the handshake would be queued until the handshake is completed anyway.\n            if (connState.useSqlCache === undefined) {\n                connState.useSqlCache =\n                    (await connState.client.getVersion()) >= 2;\n                if (connState.useSqlCache) {\n                    connState.sqlCache.capacity = sqlCacheCapacity;\n                }\n            }\n            const stream = connState.client.openStream();\n            stream.intMode = this.#intMode;\n            const streamState = { conn: connState, stream };\n            connState.streamStates.add(streamState);\n            return streamState;\n        }\n        catch (e) {\n            throw mapHranaError(e);\n        }\n    }\n    #openConn(client) {\n        try {\n            client ??= hrana.openWs(this.#url, this.#authToken);\n            return {\n                client,\n                useSqlCache: undefined,\n                sqlCache: new SqlCache(client, 0),\n                openTime: new Date(),\n                streamStates: new Set(),\n            };\n        }\n        catch (e) {\n            throw mapHranaError(e);\n        }\n    }\n    _closeStream(streamState) {\n        streamState.stream.close();\n        const connState = streamState.conn;\n        connState.streamStates.delete(streamState);\n        if (connState.streamStates.size === 0 &&\n            connState !== this.#connState) {\n            // We are not using this connection anymore and this is the last stream that was using it, so we\n            // must close it now.\n            connState.client.close();\n        }\n    }\n    close() {\n        this.#connState.client.close();\n        this.closed = true;\n    }\n}\nexport class WsTransaction extends HranaTransaction {\n    #client;\n    #streamState;\n    /** @private */\n    constructor(client, state, mode, version) {\n        super(mode, version);\n        this.#client = client;\n        this.#streamState = state;\n    }\n    /** @private */\n    _getStream() {\n        return this.#streamState.stream;\n    }\n    /** @private */\n    _getSqlCache() {\n        return this.#streamState.conn.sqlCache;\n    }\n    close() {\n        this.#client._closeStream(this.#streamState);\n    }\n    get closed() {\n        return this.#streamState.stream.closed;\n    }\n}\n", "import { WebSocket } from \"@libsql/isomorphic-ws\";\nimport { subprotocolsV2, subprotocolsV3 } from \"./ws/client.js\";\nimport { WebSocketUnsupportedError } from \"./errors.js\";\nimport { HttpClient } from \"./http/client.js\";\nimport { WsClient } from \"./ws/client.js\";\nexport { WebSocket } from \"@libsql/isomorphic-ws\";\nexport { fetch, Request, Headers } from \"@libsql/isomorphic-fetch\";\nexport { Client } from \"./client.js\";\nexport * from \"./errors.js\";\nexport { Batch, BatchStep, BatchCond } from \"./batch.js\";\nexport { parseLibsqlUrl } from \"./libsql_url.js\";\nexport { Sql } from \"./sql.js\";\nexport { Stmt } from \"./stmt.js\";\nexport { Stream } from \"./stream.js\";\nexport { HttpClient } from \"./http/client.js\";\nexport { HttpStream } from \"./http/stream.js\";\nexport { WsClient } from \"./ws/client.js\";\nexport { WsStream } from \"./ws/stream.js\";\n/** Open a Hrana client over WebSocket connected to the given `url`. */\nexport function openWs(url, jwt, protocolVersion = 2) {\n    if (typeof WebSocket === \"undefined\") {\n        throw new WebSocketUnsupportedError(\"WebSockets are not supported in this environment\");\n    }\n    var subprotocols = undefined;\n    if (protocolVersion == 3) {\n        subprotocols = Array.from(subprotocolsV3.keys());\n    }\n    else {\n        subprotocols = Array.from(subprotocolsV2.keys());\n    }\n    const socket = new WebSocket(url, subprotocols);\n    return new WsClient(socket, jwt);\n}\n/** Open a Hrana client over HTTP connected to the given `url`.\n *\n * If the `customFetch` argument is passed and not `undefined`, it is used in place of the `fetch` function\n * from `@libsql/isomorphic-fetch`. This function is always called with a `Request` object from\n * `@libsql/isomorphic-fetch`.\n */\nexport function openHttp(url, jwt, customFetch, protocolVersion = 2) {\n    return new HttpClient(url instanceof URL ? url : new URL(url), jwt, customFetch, protocolVersion);\n}\n", "let _WebSocket;\nif (typeof WebSocket !== \"undefined\") {\n    _WebSocket = WebSocket;\n} else if (typeof global !== \"undefined\") {\n    _WebSocket = global.WebSocket;\n} else if (typeof window !== \"undefined\") {\n    _WebSocket = window.WebSocket;\n} else if (typeof self !== \"undefined\") {\n    _WebSocket = self.WebSocket;\n}\nexport { _WebSocket as WebSocket };\n", "import { Client } from \"../client.js\";\nimport { readJsonObject, writeJsonObject, readProtobufMessage, writeProtobufMessage, } from \"../encoding/index.js\";\nimport { ClientError, ProtoError, ClosedError, WebSocketError, ProtocolVersionError, InternalError, } from \"../errors.js\";\nimport { IdAlloc } from \"../id_alloc.js\";\nimport { errorFromProto } from \"../result.js\";\nimport { Sql } from \"../sql.js\";\nimport { impossible } from \"../util.js\";\nimport { WsStream } from \"./stream.js\";\nimport { ClientMsg as json_ClientMsg } from \"./json_encode.js\";\nimport { ClientMsg as protobuf_ClientMsg } from \"./protobuf_encode.js\";\nimport { ServerMsg as json_ServerMsg } from \"./json_decode.js\";\nimport { ServerMsg as protobuf_ServerMsg } from \"./protobuf_decode.js\";\nexport const subprotocolsV2 = new Map([\n    [\"hrana2\", { version: 2, encoding: \"json\" }],\n    [\"hrana1\", { version: 1, encoding: \"json\" }],\n]);\nexport const subprotocolsV3 = new Map([\n    [\"hrana3-protobuf\", { version: 3, encoding: \"protobuf\" }],\n    [\"hrana3\", { version: 3, encoding: \"json\" }],\n    [\"hrana2\", { version: 2, encoding: \"json\" }],\n    [\"hrana1\", { version: 1, encoding: \"json\" }],\n]);\n/** A client for the Hrana protocol over a WebSocket. */\nexport class WsClient extends Client {\n    #socket;\n    // List of callbacks that we queue until the socket transitions from the CONNECTING to the OPEN state.\n    #openCallbacks;\n    // Have we already transitioned from CONNECTING to OPEN and fired the callbacks in #openCallbacks?\n    #opened;\n    // Stores the error that caused us to close the client (and the socket). If we are not closed, this is\n    // `undefined`.\n    #closed;\n    // Have we received a response to our \"hello\" from the server?\n    #recvdHello;\n    // Subprotocol negotiated with the server. It is only available after the socket transitions to the OPEN\n    // state.\n    #subprotocol;\n    // Has the `getVersion()` function been called? This is only used to validate that the API is used\n    // correctly.\n    #getVersionCalled;\n    // A map from request id to the responses that we expect to receive from the server.\n    #responseMap;\n    // An allocator of request ids.\n    #requestIdAlloc;\n    // An allocator of stream ids.\n    /** @private */\n    _streamIdAlloc;\n    // An allocator of cursor ids.\n    /** @private */\n    _cursorIdAlloc;\n    // An allocator of SQL text ids.\n    #sqlIdAlloc;\n    /** @private */\n    constructor(socket, jwt) {\n        super();\n        this.#socket = socket;\n        this.#openCallbacks = [];\n        this.#opened = false;\n        this.#closed = undefined;\n        this.#recvdHello = false;\n        this.#subprotocol = undefined;\n        this.#getVersionCalled = false;\n        this.#responseMap = new Map();\n        this.#requestIdAlloc = new IdAlloc();\n        this._streamIdAlloc = new IdAlloc();\n        this._cursorIdAlloc = new IdAlloc();\n        this.#sqlIdAlloc = new IdAlloc();\n        this.#socket.binaryType = \"arraybuffer\";\n        this.#socket.addEventListener(\"open\", () => this.#onSocketOpen());\n        this.#socket.addEventListener(\"close\", (event) => this.#onSocketClose(event));\n        this.#socket.addEventListener(\"error\", (event) => this.#onSocketError(event));\n        this.#socket.addEventListener(\"message\", (event) => this.#onSocketMessage(event));\n        this.#send({ type: \"hello\", jwt });\n    }\n    // Send (or enqueue to send) a message to the server.\n    #send(msg) {\n        if (this.#closed !== undefined) {\n            throw new InternalError(\"Trying to send a message on a closed client\");\n        }\n        if (this.#opened) {\n            this.#sendToSocket(msg);\n        }\n        else {\n            const openCallback = () => this.#sendToSocket(msg);\n            const errorCallback = () => undefined;\n            this.#openCallbacks.push({ openCallback, errorCallback });\n        }\n    }\n    // The socket transitioned from CONNECTING to OPEN\n    #onSocketOpen() {\n        const protocol = this.#socket.protocol;\n        if (protocol === undefined) {\n            this.#setClosed(new ClientError(\"The `WebSocket.protocol` property is undefined. This most likely means that the WebSocket \" +\n                \"implementation provided by the environment is broken. If you are using Miniflare 2, \" +\n                \"please update to Miniflare 3, which fixes this problem.\"));\n            return;\n        }\n        else if (protocol === \"\") {\n            this.#subprotocol = { version: 1, encoding: \"json\" };\n        }\n        else {\n            this.#subprotocol = subprotocolsV3.get(protocol);\n            if (this.#subprotocol === undefined) {\n                this.#setClosed(new ProtoError(`Unrecognized WebSocket subprotocol: ${JSON.stringify(protocol)}`));\n                return;\n            }\n        }\n        for (const callbacks of this.#openCallbacks) {\n            callbacks.openCallback();\n        }\n        this.#openCallbacks.length = 0;\n        this.#opened = true;\n    }\n    #sendToSocket(msg) {\n        const encoding = this.#subprotocol.encoding;\n        if (encoding === \"json\") {\n            const jsonMsg = writeJsonObject(msg, json_ClientMsg);\n            this.#socket.send(jsonMsg);\n        }\n        else if (encoding === \"protobuf\") {\n            const protobufMsg = writeProtobufMessage(msg, protobuf_ClientMsg);\n            this.#socket.send(protobufMsg);\n        }\n        else {\n            throw impossible(encoding, \"Impossible encoding\");\n        }\n    }\n    /** Get the protocol version negotiated with the server, possibly waiting until the socket is open. */\n    getVersion() {\n        return new Promise((versionCallback, errorCallback) => {\n            this.#getVersionCalled = true;\n            if (this.#closed !== undefined) {\n                errorCallback(this.#closed);\n            }\n            else if (!this.#opened) {\n                const openCallback = () => versionCallback(this.#subprotocol.version);\n                this.#openCallbacks.push({ openCallback, errorCallback });\n            }\n            else {\n                versionCallback(this.#subprotocol.version);\n            }\n        });\n    }\n    // Make sure that the negotiated version is at least `minVersion`.\n    /** @private */\n    _ensureVersion(minVersion, feature) {\n        if (this.#subprotocol === undefined || !this.#getVersionCalled) {\n            throw new ProtocolVersionError(`${feature} is supported only on protocol version ${minVersion} and higher, ` +\n                \"but the version supported by the WebSocket server is not yet known. \" +\n                \"Use Client.getVersion() to wait until the version is available.\");\n        }\n        else if (this.#subprotocol.version < minVersion) {\n            throw new ProtocolVersionError(`${feature} is supported on protocol version ${minVersion} and higher, ` +\n                `but the WebSocket server only supports version ${this.#subprotocol.version}`);\n        }\n    }\n    // Send a request to the server and invoke a callback when we get the response.\n    /** @private */\n    _sendRequest(request, callbacks) {\n        if (this.#closed !== undefined) {\n            callbacks.errorCallback(new ClosedError(\"Client is closed\", this.#closed));\n            return;\n        }\n        const requestId = this.#requestIdAlloc.alloc();\n        this.#responseMap.set(requestId, { ...callbacks, type: request.type });\n        this.#send({ type: \"request\", requestId, request });\n    }\n    // The socket encountered an error.\n    #onSocketError(event) {\n        const eventMessage = event.message;\n        const message = eventMessage ?? \"WebSocket was closed due to an error\";\n        this.#setClosed(new WebSocketError(message));\n    }\n    // The socket was closed.\n    #onSocketClose(event) {\n        let message = `WebSocket was closed with code ${event.code}`;\n        if (event.reason) {\n            message += `: ${event.reason}`;\n        }\n        this.#setClosed(new WebSocketError(message));\n    }\n    // Close the client with the given error.\n    #setClosed(error) {\n        if (this.#closed !== undefined) {\n            return;\n        }\n        this.#closed = error;\n        for (const callbacks of this.#openCallbacks) {\n            callbacks.errorCallback(error);\n        }\n        this.#openCallbacks.length = 0;\n        for (const [requestId, responseState] of this.#responseMap.entries()) {\n            responseState.errorCallback(error);\n            this.#requestIdAlloc.free(requestId);\n        }\n        this.#responseMap.clear();\n        this.#socket.close();\n    }\n    // We received a message from the socket.\n    #onSocketMessage(event) {\n        if (this.#closed !== undefined) {\n            return;\n        }\n        try {\n            let msg;\n            const encoding = this.#subprotocol.encoding;\n            if (encoding === \"json\") {\n                if (typeof event.data !== \"string\") {\n                    this.#socket.close(3003, \"Only text messages are accepted with JSON encoding\");\n                    this.#setClosed(new ProtoError(\"Received non-text message from server with JSON encoding\"));\n                    return;\n                }\n                msg = readJsonObject(JSON.parse(event.data), json_ServerMsg);\n            }\n            else if (encoding === \"protobuf\") {\n                if (!(event.data instanceof ArrayBuffer)) {\n                    this.#socket.close(3003, \"Only binary messages are accepted with Protobuf encoding\");\n                    this.#setClosed(new ProtoError(\"Received non-binary message from server with Protobuf encoding\"));\n                    return;\n                }\n                msg = readProtobufMessage(new Uint8Array(event.data), protobuf_ServerMsg);\n            }\n            else {\n                throw impossible(encoding, \"Impossible encoding\");\n            }\n            this.#handleMsg(msg);\n        }\n        catch (e) {\n            this.#socket.close(3007, \"Could not handle message\");\n            this.#setClosed(e);\n        }\n    }\n    // Handle a message from the server.\n    #handleMsg(msg) {\n        if (msg.type === \"none\") {\n            throw new ProtoError(\"Received an unrecognized ServerMsg\");\n        }\n        else if (msg.type === \"hello_ok\" || msg.type === \"hello_error\") {\n            if (this.#recvdHello) {\n                throw new ProtoError(\"Received a duplicated hello response\");\n            }\n            this.#recvdHello = true;\n            if (msg.type === \"hello_error\") {\n                throw errorFromProto(msg.error);\n            }\n            return;\n        }\n        else if (!this.#recvdHello) {\n            throw new ProtoError(\"Received a non-hello message before a hello response\");\n        }\n        if (msg.type === \"response_ok\") {\n            const requestId = msg.requestId;\n            const responseState = this.#responseMap.get(requestId);\n            this.#responseMap.delete(requestId);\n            if (responseState === undefined) {\n                throw new ProtoError(\"Received unexpected OK response\");\n            }\n            this.#requestIdAlloc.free(requestId);\n            try {\n                if (responseState.type !== msg.response.type) {\n                    console.dir({ responseState, msg });\n                    throw new ProtoError(\"Received unexpected type of response\");\n                }\n                responseState.responseCallback(msg.response);\n            }\n            catch (e) {\n                responseState.errorCallback(e);\n                throw e;\n            }\n        }\n        else if (msg.type === \"response_error\") {\n            const requestId = msg.requestId;\n            const responseState = this.#responseMap.get(requestId);\n            this.#responseMap.delete(requestId);\n            if (responseState === undefined) {\n                throw new ProtoError(\"Received unexpected error response\");\n            }\n            this.#requestIdAlloc.free(requestId);\n            responseState.errorCallback(errorFromProto(msg.error));\n        }\n        else {\n            throw impossible(msg, \"Impossible ServerMsg type\");\n        }\n    }\n    /** Open a {@link WsStream}, a stream for executing SQL statements. */\n    openStream() {\n        return WsStream.open(this);\n    }\n    /** Cache a SQL text on the server. This requires protocol version 2 or higher. */\n    storeSql(sql) {\n        this._ensureVersion(2, \"storeSql()\");\n        const sqlId = this.#sqlIdAlloc.alloc();\n        const sqlObj = new Sql(this, sqlId);\n        const responseCallback = () => undefined;\n        const errorCallback = (e) => sqlObj._setClosed(e);\n        const request = { type: \"store_sql\", sqlId, sql };\n        this._sendRequest(request, { responseCallback, errorCallback });\n        return sqlObj;\n    }\n    /** @private */\n    _closeSql(sqlId) {\n        if (this.#closed !== undefined) {\n            return;\n        }\n        const responseCallback = () => this.#sqlIdAlloc.free(sqlId);\n        const errorCallback = (e) => this.#setClosed(e);\n        const request = { type: \"close_sql\", sqlId };\n        this._sendRequest(request, { responseCallback, errorCallback });\n    }\n    /** Close the client and the WebSocket. */\n    close() {\n        this.#setClosed(new ClientError(\"Client was manually closed\"));\n    }\n    /** True if the client is closed. */\n    get closed() {\n        return this.#closed !== undefined;\n    }\n}\n", "/** A client for the Hrana protocol (a \"database connection pool\"). */\nexport class Client {\n    /** @private */\n    constructor() {\n        this.intMode = \"number\";\n    }\n    /** Representation of integers returned from the database. See {@link IntMode}.\n     *\n     * This value is inherited by {@link Stream} objects created with {@link openStream}, but you can\n     * override the integer mode for every stream by setting {@link Stream.intMode} on the stream.\n     */\n    intMode;\n}\n", "export { readJsonObject } from \"./json/decode.js\";\nexport { writeJsonObject } from \"./json/encode.js\";\nexport { readProtobufMessage } from \"./protobuf/decode.js\";\nexport { writeProtobufMessage } from \"./protobuf/encode.js\";\n", "import { ProtoError } from \"../../errors.js\";\nexport function string(value) {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    throw typeError(value, \"string\");\n}\nexport function stringOpt(value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    else if (typeof value === \"string\") {\n        return value;\n    }\n    throw typeError(value, \"string or null\");\n}\nexport function number(value) {\n    if (typeof value === \"number\") {\n        return value;\n    }\n    throw typeError(value, \"number\");\n}\nexport function boolean(value) {\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    throw typeError(value, \"boolean\");\n}\nexport function array(value) {\n    if (Array.isArray(value)) {\n        return value;\n    }\n    throw typeError(value, \"array\");\n}\nexport function object(value) {\n    if (value !== null && typeof value === \"object\" && !Array.isArray(value)) {\n        return value;\n    }\n    throw typeError(value, \"object\");\n}\nexport function arrayObjectsMap(value, fun) {\n    return array(value).map((elemValue) => fun(object(elemValue)));\n}\nfunction typeError(value, expected) {\n    if (value === undefined) {\n        return new ProtoError(`Expected ${expected}, but the property was missing`);\n    }\n    let received = typeof value;\n    if (value === null) {\n        received = \"null\";\n    }\n    else if (Array.isArray(value)) {\n        received = \"array\";\n    }\n    return new ProtoError(`Expected ${expected}, received ${received}`);\n}\nexport function readJsonObject(value, fun) {\n    return fun(object(value));\n}\n", "/** Generic error produced by the Hrana client. */\nexport class ClientError extends Error {\n    /** @private */\n    constructor(message) {\n        super(message);\n        this.name = \"ClientError\";\n    }\n}\n/** Error thrown when the server violates the protocol. */\nexport class ProtoError extends ClientError {\n    /** @private */\n    constructor(message) {\n        super(message);\n        this.name = \"ProtoError\";\n    }\n}\n/** Error thrown when the server returns an error response. */\nexport class ResponseError extends ClientError {\n    code;\n    /** @internal */\n    proto;\n    /** @private */\n    constructor(message, protoError) {\n        super(message);\n        this.name = \"ResponseError\";\n        this.code = protoError.code;\n        this.proto = protoError;\n        this.stack = undefined;\n    }\n}\n/** Error thrown when the client or stream is closed. */\nexport class ClosedError extends ClientError {\n    /** @private */\n    constructor(message, cause) {\n        if (cause !== undefined) {\n            super(`${message}: ${cause}`);\n            this.cause = cause;\n        }\n        else {\n            super(message);\n        }\n        this.name = \"ClosedError\";\n    }\n}\n/** Error thrown when the environment does not seem to support WebSockets. */\nexport class WebSocketUnsupportedError extends ClientError {\n    /** @private */\n    constructor(message) {\n        super(message);\n        this.name = \"WebSocketUnsupportedError\";\n    }\n}\n/** Error thrown when we encounter a WebSocket error. */\nexport class WebSocketError extends ClientError {\n    /** @private */\n    constructor(message) {\n        super(message);\n        this.name = \"WebSocketError\";\n    }\n}\n/** Error thrown when the HTTP server returns an error response. */\nexport class HttpServerError extends ClientError {\n    status;\n    /** @private */\n    constructor(message, status) {\n        super(message);\n        this.status = status;\n        this.name = \"HttpServerError\";\n    }\n}\n/** Error thrown when a libsql URL is not valid. */\nexport class LibsqlUrlParseError extends ClientError {\n    /** @private */\n    constructor(message) {\n        super(message);\n        this.name = \"LibsqlUrlParseError\";\n    }\n}\n/** Error thrown when the protocol version is too low to support a feature. */\nexport class ProtocolVersionError extends ClientError {\n    /** @private */\n    constructor(message) {\n        super(message);\n        this.name = \"ProtocolVersionError\";\n    }\n}\n/** Error thrown when an internal client error happens. */\nexport class InternalError extends ClientError {\n    /** @private */\n    constructor(message) {\n        super(message);\n        this.name = \"InternalError\";\n    }\n}\n/** Error thrown when the API is misused. */\nexport class MisuseError extends ClientError {\n    /** @private */\n    constructor(message) {\n        super(message);\n        this.name = \"MisuseError\";\n    }\n}\n", "export class ObjectWriter {\n    #output;\n    #isFirst;\n    constructor(output) {\n        this.#output = output;\n        this.#isFirst = false;\n    }\n    begin() {\n        this.#output.push('{');\n        this.#isFirst = true;\n    }\n    end() {\n        this.#output.push('}');\n        this.#isFirst = false;\n    }\n    #key(name) {\n        if (this.#isFirst) {\n            this.#output.push('\"');\n            this.#isFirst = false;\n        }\n        else {\n            this.#output.push(',\"');\n        }\n        this.#output.push(name);\n        this.#output.push('\":');\n    }\n    string(name, value) {\n        this.#key(name);\n        this.#output.push(JSON.stringify(value));\n    }\n    stringRaw(name, value) {\n        this.#key(name);\n        this.#output.push('\"');\n        this.#output.push(value);\n        this.#output.push('\"');\n    }\n    number(name, value) {\n        this.#key(name);\n        this.#output.push(\"\" + value);\n    }\n    boolean(name, value) {\n        this.#key(name);\n        this.#output.push(value ? \"true\" : \"false\");\n    }\n    object(name, value, valueFun) {\n        this.#key(name);\n        this.begin();\n        valueFun(this, value);\n        this.end();\n    }\n    arrayObjects(name, values, valueFun) {\n        this.#key(name);\n        this.#output.push('[');\n        for (let i = 0; i < values.length; ++i) {\n            if (i !== 0) {\n                this.#output.push(',');\n            }\n            this.begin();\n            valueFun(this, values[i]);\n            this.end();\n        }\n        this.#output.push(']');\n    }\n}\nexport function writeJsonObject(value, fun) {\n    const output = [];\n    const writer = new ObjectWriter(output);\n    writer.begin();\n    fun(writer, value);\n    writer.end();\n    return output.join(\"\");\n}\n", "import { ProtoError } from \"../../errors.js\";\nimport { VARINT, FIXED_64, LENGTH_DELIMITED, FIXED_32 } from \"./util.js\";\nclass MessageReader {\n    #array;\n    #view;\n    #pos;\n    constructor(array) {\n        this.#array = array;\n        this.#view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n        this.#pos = 0;\n    }\n    varint() {\n        let value = 0;\n        for (let shift = 0;; shift += 7) {\n            const byte = this.#array[this.#pos++];\n            value |= (byte & 0x7f) << shift;\n            if (!(byte & 0x80)) {\n                break;\n            }\n        }\n        return value;\n    }\n    varintBig() {\n        let value = 0n;\n        for (let shift = 0n;; shift += 7n) {\n            const byte = this.#array[this.#pos++];\n            value |= BigInt(byte & 0x7f) << shift;\n            if (!(byte & 0x80)) {\n                break;\n            }\n        }\n        return value;\n    }\n    bytes(length) {\n        const array = new Uint8Array(this.#array.buffer, this.#array.byteOffset + this.#pos, length);\n        this.#pos += length;\n        return array;\n    }\n    double() {\n        const value = this.#view.getFloat64(this.#pos, true);\n        this.#pos += 8;\n        return value;\n    }\n    skipVarint() {\n        for (;;) {\n            const byte = this.#array[this.#pos++];\n            if (!(byte & 0x80)) {\n                break;\n            }\n        }\n    }\n    skip(count) {\n        this.#pos += count;\n    }\n    eof() {\n        return this.#pos >= this.#array.byteLength;\n    }\n}\nexport class FieldReader {\n    #reader;\n    #wireType;\n    constructor(reader) {\n        this.#reader = reader;\n        this.#wireType = -1;\n    }\n    setup(wireType) {\n        this.#wireType = wireType;\n    }\n    #expect(expectedWireType) {\n        if (this.#wireType !== expectedWireType) {\n            throw new ProtoError(`Expected wire type ${expectedWireType}, got ${this.#wireType}`);\n        }\n        this.#wireType = -1;\n    }\n    bytes() {\n        this.#expect(LENGTH_DELIMITED);\n        const length = this.#reader.varint();\n        return this.#reader.bytes(length);\n    }\n    string() {\n        return new TextDecoder().decode(this.bytes());\n    }\n    message(def) {\n        return readProtobufMessage(this.bytes(), def);\n    }\n    int32() {\n        this.#expect(VARINT);\n        return this.#reader.varint();\n    }\n    uint32() {\n        return this.int32();\n    }\n    bool() {\n        return this.int32() !== 0;\n    }\n    uint64() {\n        this.#expect(VARINT);\n        return this.#reader.varintBig();\n    }\n    sint64() {\n        const value = this.uint64();\n        return (value >> 1n) ^ (-(value & 1n));\n    }\n    double() {\n        this.#expect(FIXED_64);\n        return this.#reader.double();\n    }\n    maybeSkip() {\n        if (this.#wireType < 0) {\n            return;\n        }\n        else if (this.#wireType === VARINT) {\n            this.#reader.skipVarint();\n        }\n        else if (this.#wireType === FIXED_64) {\n            this.#reader.skip(8);\n        }\n        else if (this.#wireType === LENGTH_DELIMITED) {\n            const length = this.#reader.varint();\n            this.#reader.skip(length);\n        }\n        else if (this.#wireType === FIXED_32) {\n            this.#reader.skip(4);\n        }\n        else {\n            throw new ProtoError(`Unexpected wire type ${this.#wireType}`);\n        }\n        this.#wireType = -1;\n    }\n}\nexport function readProtobufMessage(data, def) {\n    const msgReader = new MessageReader(data);\n    const fieldReader = new FieldReader(msgReader);\n    let value = def.default();\n    while (!msgReader.eof()) {\n        const key = msgReader.varint();\n        const tag = key >> 3;\n        const wireType = key & 0x7;\n        fieldReader.setup(wireType);\n        const tagFun = def[tag];\n        if (tagFun !== undefined) {\n            const returnedValue = tagFun(fieldReader, value);\n            if (returnedValue !== undefined) {\n                value = returnedValue;\n            }\n        }\n        fieldReader.maybeSkip();\n    }\n    return value;\n}\n", "export const VARINT = 0;\nexport const FIXED_64 = 1;\nexport const LENGTH_DELIMITED = 2;\nexport const GROUP_START = 3;\nexport const GROUP_END = 4;\nexport const FIXED_32 = 5;\n", "import { VARINT, FIXED_64, LENGTH_DELIMITED } from \"./util.js\";\nexport class MessageWriter {\n    #buf;\n    #array;\n    #view;\n    #pos;\n    constructor() {\n        this.#buf = new ArrayBuffer(256);\n        this.#array = new Uint8Array(this.#buf);\n        this.#view = new DataView(this.#buf);\n        this.#pos = 0;\n    }\n    #ensure(extra) {\n        if (this.#pos + extra <= this.#buf.byteLength) {\n            return;\n        }\n        let newCap = this.#buf.byteLength;\n        while (newCap < this.#pos + extra) {\n            newCap *= 2;\n        }\n        const newBuf = new ArrayBuffer(newCap);\n        const newArray = new Uint8Array(newBuf);\n        const newView = new DataView(newBuf);\n        newArray.set(new Uint8Array(this.#buf, 0, this.#pos));\n        this.#buf = newBuf;\n        this.#array = newArray;\n        this.#view = newView;\n    }\n    #varint(value) {\n        this.#ensure(5);\n        value = 0 | value;\n        do {\n            let byte = value & 0x7f;\n            value >>>= 7;\n            byte |= (value ? 0x80 : 0);\n            this.#array[this.#pos++] = byte;\n        } while (value);\n    }\n    #varintBig(value) {\n        this.#ensure(10);\n        value = value & 0xffffffffffffffffn;\n        do {\n            let byte = Number(value & 0x7fn);\n            value >>= 7n;\n            byte |= (value ? 0x80 : 0);\n            this.#array[this.#pos++] = byte;\n        } while (value);\n    }\n    #tag(tag, wireType) {\n        this.#varint((tag << 3) | wireType);\n    }\n    bytes(tag, value) {\n        this.#tag(tag, LENGTH_DELIMITED);\n        this.#varint(value.byteLength);\n        this.#ensure(value.byteLength);\n        this.#array.set(value, this.#pos);\n        this.#pos += value.byteLength;\n    }\n    string(tag, value) {\n        this.bytes(tag, new TextEncoder().encode(value));\n    }\n    message(tag, value, fun) {\n        const writer = new MessageWriter();\n        fun(writer, value);\n        this.bytes(tag, writer.data());\n    }\n    int32(tag, value) {\n        this.#tag(tag, VARINT);\n        this.#varint(value);\n    }\n    uint32(tag, value) {\n        this.int32(tag, value);\n    }\n    bool(tag, value) {\n        this.int32(tag, value ? 1 : 0);\n    }\n    sint64(tag, value) {\n        this.#tag(tag, VARINT);\n        this.#varintBig((value << 1n) ^ (value >> 63n));\n    }\n    double(tag, value) {\n        this.#tag(tag, FIXED_64);\n        this.#ensure(8);\n        this.#view.setFloat64(this.#pos, value, true);\n        this.#pos += 8;\n    }\n    data() {\n        return new Uint8Array(this.#buf, 0, this.#pos);\n    }\n}\nexport function writeProtobufMessage(value, fun) {\n    const w = new MessageWriter();\n    fun(w, value);\n    return w.data();\n}\n", "import { InternalError } from \"./errors.js\";\n// An allocator of non-negative integer ids.\n//\n// This clever data structure has these \"ideal\" properties:\n// - It consumes memory proportional to the number of used ids (which is optimal).\n// - All operations are O(1) time.\n// - The allocated ids are small (with a slight modification, we could always provide the smallest possible\n// id).\nexport class IdAlloc {\n    // Set of all allocated ids\n    #usedIds;\n    // Set of all free ids lower than `#usedIds.size`\n    #freeIds;\n    constructor() {\n        this.#usedIds = new Set();\n        this.#freeIds = new Set();\n    }\n    // Returns an id that was free, and marks it as used.\n    alloc() {\n        // this \"loop\" is just a way to pick an arbitrary element from the `#freeIds` set\n        for (const freeId of this.#freeIds) {\n            this.#freeIds.delete(freeId);\n            this.#usedIds.add(freeId);\n            // maintain the invariant of `#freeIds`\n            if (!this.#usedIds.has(this.#usedIds.size - 1)) {\n                this.#freeIds.add(this.#usedIds.size - 1);\n            }\n            return freeId;\n        }\n        // the `#freeIds` set is empty, so there are no free ids lower than `#usedIds.size`\n        // this means that `#usedIds` is a set that contains all numbers from 0 to `#usedIds.size - 1`,\n        // so `#usedIds.size` is free\n        const freeId = this.#usedIds.size;\n        this.#usedIds.add(freeId);\n        return freeId;\n    }\n    free(id) {\n        if (!this.#usedIds.delete(id)) {\n            throw new InternalError(\"Freeing an id that is not allocated\");\n        }\n        // maintain the invariant of `#freeIds`\n        this.#freeIds.delete(this.#usedIds.size);\n        if (id < this.#usedIds.size) {\n            this.#freeIds.add(id);\n        }\n    }\n}\n", "import { ResponseError } from \"./errors.js\";\nimport { valueFromProto } from \"./value.js\";\nexport function stmtResultFromProto(result) {\n    return {\n        affectedRowCount: result.affectedRowCount,\n        lastInsertRowid: result.lastInsertRowid,\n        columnNames: result.cols.map(col => col.name),\n        columnDecltypes: result.cols.map(col => col.decltype),\n    };\n}\nexport function rowsResultFromProto(result, intMode) {\n    const stmtResult = stmtResultFromProto(result);\n    const rows = result.rows.map(row => rowFromProto(stmtResult.columnNames, row, intMode));\n    return { ...stmtResult, rows };\n}\nexport function rowResultFromProto(result, intMode) {\n    const stmtResult = stmtResultFromProto(result);\n    let row;\n    if (result.rows.length > 0) {\n        row = rowFromProto(stmtResult.columnNames, result.rows[0], intMode);\n    }\n    return { ...stmtResult, row };\n}\nexport function valueResultFromProto(result, intMode) {\n    const stmtResult = stmtResultFromProto(result);\n    let value;\n    if (result.rows.length > 0 && stmtResult.columnNames.length > 0) {\n        value = valueFromProto(result.rows[0][0], intMode);\n    }\n    return { ...stmtResult, value };\n}\nfunction rowFromProto(colNames, values, intMode) {\n    const row = {};\n    // make sure that the \"length\" property is not enumerable\n    Object.defineProperty(row, \"length\", { value: values.length });\n    for (let i = 0; i < values.length; ++i) {\n        const value = valueFromProto(values[i], intMode);\n        Object.defineProperty(row, i, { value });\n        const colName = colNames[i];\n        if (colName !== undefined && !Object.hasOwn(row, colName)) {\n            Object.defineProperty(row, colName, { value, enumerable: true, configurable: true, writable: true });\n        }\n    }\n    return row;\n}\nexport function errorFromProto(error) {\n    return new ResponseError(error.message, error);\n}\n", "import { ProtoError, MisuseError } from \"./errors.js\";\nimport { impossible } from \"./util.js\";\nexport function valueToProto(value) {\n    if (value === null) {\n        return null;\n    }\n    else if (typeof value === \"string\") {\n        return value;\n    }\n    else if (typeof value === \"number\") {\n        if (!Number.isFinite(value)) {\n            throw new RangeError(\"Only finite numbers (not Infinity or NaN) can be passed as arguments\");\n        }\n        return value;\n    }\n    else if (typeof value === \"bigint\") {\n        if (value < minInteger || value > maxInteger) {\n            throw new RangeError(\"This bigint value is too large to be represented as a 64-bit integer and passed as argument\");\n        }\n        return value;\n    }\n    else if (typeof value === \"boolean\") {\n        return value ? 1n : 0n;\n    }\n    else if (value instanceof ArrayBuffer) {\n        return new Uint8Array(value);\n    }\n    else if (value instanceof Uint8Array) {\n        return value;\n    }\n    else if (value instanceof Date) {\n        return +value.valueOf();\n    }\n    else if (typeof value === \"object\") {\n        return \"\" + value.toString();\n    }\n    else {\n        throw new TypeError(\"Unsupported type of value\");\n    }\n}\nconst minInteger = -9223372036854775808n;\nconst maxInteger = 9223372036854775807n;\nexport function valueFromProto(value, intMode) {\n    if (value === null) {\n        return null;\n    }\n    else if (typeof value === \"number\") {\n        return value;\n    }\n    else if (typeof value === \"string\") {\n        return value;\n    }\n    else if (typeof value === \"bigint\") {\n        if (intMode === \"number\") {\n            const num = Number(value);\n            if (!Number.isSafeInteger(num)) {\n                throw new RangeError(\"Received integer which is too large to be safely represented as a JavaScript number\");\n            }\n            return num;\n        }\n        else if (intMode === \"bigint\") {\n            return value;\n        }\n        else if (intMode === \"string\") {\n            return \"\" + value;\n        }\n        else {\n            throw new MisuseError(\"Invalid value for IntMode\");\n        }\n    }\n    else if (value instanceof Uint8Array) {\n        // TODO: we need to copy data from `Uint8Array` to return an `ArrayBuffer`. Perhaps we should add a\n        // `blobMode` parameter, similar to `intMode`, which would allow the user to choose between receiving\n        // `ArrayBuffer` (default, convenient) and `Uint8Array` (zero copy)?\n        return value.slice().buffer;\n    }\n    else if (value === undefined) {\n        throw new ProtoError(\"Received unrecognized type of Value\");\n    }\n    else {\n        throw impossible(value, \"Impossible type of Value\");\n    }\n}\n", "import { InternalError } from \"./errors.js\";\nexport function impossible(value, message) {\n    throw new InternalError(message);\n}\n", "import { ClientError, ClosedError, MisuseError } from \"./errors.js\";\n/** Text of an SQL statement cached on the server. */\nexport class Sql {\n    #owner;\n    #sqlId;\n    #closed;\n    /** @private */\n    constructor(owner, sqlId) {\n        this.#owner = owner;\n        this.#sqlId = sqlId;\n        this.#closed = undefined;\n    }\n    /** @private */\n    _getSqlId(owner) {\n        if (this.#owner !== owner) {\n            throw new MisuseError(\"Attempted to use SQL text opened with other object\");\n        }\n        else if (this.#closed !== undefined) {\n            throw new ClosedError(\"SQL text is closed\", this.#closed);\n        }\n        return this.#sqlId;\n    }\n    /** Remove the SQL text from the server, releasing resouces. */\n    close() {\n        this._setClosed(new ClientError(\"SQL text was manually closed\"));\n    }\n    /** @private */\n    _setClosed(error) {\n        if (this.#closed === undefined) {\n            this.#closed = error;\n            this.#owner._closeSql(this.#sqlId);\n        }\n    }\n    /** True if the SQL text is closed (removed from the server). */\n    get closed() {\n        return this.#closed !== undefined;\n    }\n}\nexport function sqlToProto(owner, sql) {\n    if (sql instanceof Sql) {\n        return { sqlId: sql._getSqlId(owner) };\n    }\n    else {\n        return { sql: \"\" + sql };\n    }\n}\n", "import { ClientError, ClosedError, InternalError } from \"../errors.js\";\nimport { Queue } from \"../queue.js\";\nimport { Stream } from \"../stream.js\";\nimport { WsCursor } from \"./cursor.js\";\nexport class WsStream extends Stream {\n    #client;\n    #streamId;\n    #queue;\n    #cursor;\n    #closing;\n    #closed;\n    /** @private */\n    static open(client) {\n        const streamId = client._streamIdAlloc.alloc();\n        const stream = new WsStream(client, streamId);\n        const responseCallback = () => undefined;\n        const errorCallback = (e) => stream.#setClosed(e);\n        const request = { type: \"open_stream\", streamId };\n        client._sendRequest(request, { responseCallback, errorCallback });\n        return stream;\n    }\n    /** @private */\n    constructor(client, streamId) {\n        super(client.intMode);\n        this.#client = client;\n        this.#streamId = streamId;\n        this.#queue = new Queue();\n        this.#cursor = undefined;\n        this.#closing = false;\n        this.#closed = undefined;\n    }\n    /** Get the {@link WsClient} object that this stream belongs to. */\n    client() {\n        return this.#client;\n    }\n    /** @private */\n    _sqlOwner() {\n        return this.#client;\n    }\n    /** @private */\n    _execute(stmt) {\n        return this.#sendStreamRequest({\n            type: \"execute\",\n            streamId: this.#streamId,\n            stmt,\n        }).then((response) => {\n            return response.result;\n        });\n    }\n    /** @private */\n    _batch(batch) {\n        return this.#sendStreamRequest({\n            type: \"batch\",\n            streamId: this.#streamId,\n            batch,\n        }).then((response) => {\n            return response.result;\n        });\n    }\n    /** @private */\n    _describe(protoSql) {\n        this.#client._ensureVersion(2, \"describe()\");\n        return this.#sendStreamRequest({\n            type: \"describe\",\n            streamId: this.#streamId,\n            sql: protoSql.sql,\n            sqlId: protoSql.sqlId,\n        }).then((response) => {\n            return response.result;\n        });\n    }\n    /** @private */\n    _sequence(protoSql) {\n        this.#client._ensureVersion(2, \"sequence()\");\n        return this.#sendStreamRequest({\n            type: \"sequence\",\n            streamId: this.#streamId,\n            sql: protoSql.sql,\n            sqlId: protoSql.sqlId,\n        }).then((_response) => {\n            return undefined;\n        });\n    }\n    /** Check whether the SQL connection underlying this stream is in autocommit state (i.e., outside of an\n     * explicit transaction). This requires protocol version 3 or higher.\n     */\n    getAutocommit() {\n        this.#client._ensureVersion(3, \"getAutocommit()\");\n        return this.#sendStreamRequest({\n            type: \"get_autocommit\",\n            streamId: this.#streamId,\n        }).then((response) => {\n            return response.isAutocommit;\n        });\n    }\n    #sendStreamRequest(request) {\n        return new Promise((responseCallback, errorCallback) => {\n            this.#pushToQueue({ type: \"request\", request, responseCallback, errorCallback });\n        });\n    }\n    /** @private */\n    _openCursor(batch) {\n        this.#client._ensureVersion(3, \"cursor\");\n        return new Promise((cursorCallback, errorCallback) => {\n            this.#pushToQueue({ type: \"cursor\", batch, cursorCallback, errorCallback });\n        });\n    }\n    /** @private */\n    _sendCursorRequest(cursor, request) {\n        if (cursor !== this.#cursor) {\n            throw new InternalError(\"Cursor not associated with the stream attempted to execute a request\");\n        }\n        return new Promise((responseCallback, errorCallback) => {\n            if (this.#closed !== undefined) {\n                errorCallback(new ClosedError(\"Stream is closed\", this.#closed));\n            }\n            else {\n                this.#client._sendRequest(request, { responseCallback, errorCallback });\n            }\n        });\n    }\n    /** @private */\n    _cursorClosed(cursor) {\n        if (cursor !== this.#cursor) {\n            throw new InternalError(\"Cursor was closed, but it was not associated with the stream\");\n        }\n        this.#cursor = undefined;\n        this.#flushQueue();\n    }\n    #pushToQueue(entry) {\n        if (this.#closed !== undefined) {\n            entry.errorCallback(new ClosedError(\"Stream is closed\", this.#closed));\n        }\n        else if (this.#closing) {\n            entry.errorCallback(new ClosedError(\"Stream is closing\", undefined));\n        }\n        else {\n            this.#queue.push(entry);\n            this.#flushQueue();\n        }\n    }\n    #flushQueue() {\n        for (;;) {\n            const entry = this.#queue.first();\n            if (entry === undefined && this.#cursor === undefined && this.#closing) {\n                this.#setClosed(new ClientError(\"Stream was gracefully closed\"));\n                break;\n            }\n            else if (entry?.type === \"request\" && this.#cursor === undefined) {\n                const { request, responseCallback, errorCallback } = entry;\n                this.#queue.shift();\n                this.#client._sendRequest(request, { responseCallback, errorCallback });\n            }\n            else if (entry?.type === \"cursor\" && this.#cursor === undefined) {\n                const { batch, cursorCallback } = entry;\n                this.#queue.shift();\n                const cursorId = this.#client._cursorIdAlloc.alloc();\n                const cursor = new WsCursor(this.#client, this, cursorId);\n                const request = {\n                    type: \"open_cursor\",\n                    streamId: this.#streamId,\n                    cursorId,\n                    batch,\n                };\n                const responseCallback = () => undefined;\n                const errorCallback = (e) => cursor._setClosed(e);\n                this.#client._sendRequest(request, { responseCallback, errorCallback });\n                this.#cursor = cursor;\n                cursorCallback(cursor);\n            }\n            else {\n                break;\n            }\n        }\n    }\n    #setClosed(error) {\n        if (this.#closed !== undefined) {\n            return;\n        }\n        this.#closed = error;\n        if (this.#cursor !== undefined) {\n            this.#cursor._setClosed(error);\n        }\n        for (;;) {\n            const entry = this.#queue.shift();\n            if (entry !== undefined) {\n                entry.errorCallback(error);\n            }\n            else {\n                break;\n            }\n        }\n        const request = { type: \"close_stream\", streamId: this.#streamId };\n        const responseCallback = () => this.#client._streamIdAlloc.free(this.#streamId);\n        const errorCallback = () => undefined;\n        this.#client._sendRequest(request, { responseCallback, errorCallback });\n    }\n    /** Immediately close the stream. */\n    close() {\n        this.#setClosed(new ClientError(\"Stream was manually closed\"));\n    }\n    /** Gracefully close the stream. */\n    closeGracefully() {\n        this.#closing = true;\n        this.#flushQueue();\n    }\n    /** True if the stream is closed or closing. */\n    get closed() {\n        return this.#closed !== undefined || this.#closing;\n    }\n}\n", "export class Queue {\n    #pushStack;\n    #shiftStack;\n    constructor() {\n        this.#pushStack = [];\n        this.#shiftStack = [];\n    }\n    get length() {\n        return this.#pushStack.length + this.#shiftStack.length;\n    }\n    push(elem) {\n        this.#pushStack.push(elem);\n    }\n    shift() {\n        if (this.#shiftStack.length === 0 && this.#pushStack.length > 0) {\n            this.#shiftStack = this.#pushStack.reverse();\n            this.#pushStack = [];\n        }\n        return this.#shiftStack.pop();\n    }\n    first() {\n        return this.#shiftStack.length !== 0\n            ? this.#shiftStack[this.#shiftStack.length - 1]\n            : this.#pushStack[0];\n    }\n}\n", "import { Batch } from \"./batch.js\";\nimport { describeResultFromProto } from \"./describe.js\";\nimport { stmtResultFromProto, rowsResultFromProto, rowResultFromProto, valueResultFromProto, } from \"./result.js\";\nimport { sqlToProto } from \"./sql.js\";\nimport { stmtToProto } from \"./stmt.js\";\n/** A stream for executing SQL statements (a \"database connection\"). */\nexport class Stream {\n    /** @private */\n    constructor(intMode) {\n        this.intMode = intMode;\n    }\n    /** Execute a statement and return rows. */\n    query(stmt) {\n        return this.#execute(stmt, true, rowsResultFromProto);\n    }\n    /** Execute a statement and return at most a single row. */\n    queryRow(stmt) {\n        return this.#execute(stmt, true, rowResultFromProto);\n    }\n    /** Execute a statement and return at most a single value. */\n    queryValue(stmt) {\n        return this.#execute(stmt, true, valueResultFromProto);\n    }\n    /** Execute a statement without returning rows. */\n    run(stmt) {\n        return this.#execute(stmt, false, stmtResultFromProto);\n    }\n    #execute(inStmt, wantRows, fromProto) {\n        const stmt = stmtToProto(this._sqlOwner(), inStmt, wantRows);\n        return this._execute(stmt).then((r) => fromProto(r, this.intMode));\n    }\n    /** Return a builder for creating and executing a batch.\n     *\n     * If `useCursor` is true, the batch will be executed using a Hrana cursor, which will stream results from\n     * the server to the client, which consumes less memory on the server. This requires protocol version 3 or\n     * higher.\n     */\n    batch(useCursor = false) {\n        return new Batch(this, useCursor);\n    }\n    /** Parse and analyze a statement. This requires protocol version 2 or higher. */\n    describe(inSql) {\n        const protoSql = sqlToProto(this._sqlOwner(), inSql);\n        return this._describe(protoSql).then(describeResultFromProto);\n    }\n    /** Execute a sequence of statements separated by semicolons. This requires protocol version 2 or higher.\n     * */\n    sequence(inSql) {\n        const protoSql = sqlToProto(this._sqlOwner(), inSql);\n        return this._sequence(protoSql);\n    }\n    /** Representation of integers returned from the database. See {@link IntMode}.\n     *\n     * This value affects the results of all operations on this stream.\n     */\n    intMode;\n}\n", "import { ProtoError, MisuseError } from \"./errors.js\";\nimport { stmtResultFromProto, rowsResultFromProto, rowResultFromProto, valueResultFromProto, errorFromProto, } from \"./result.js\";\nimport { stmtToProto } from \"./stmt.js\";\nimport { impossible } from \"./util.js\";\n/** A builder for creating a batch and executing it on the server. */\nexport class Batch {\n    /** @private */\n    _stream;\n    #useCursor;\n    /** @private */\n    _steps;\n    #executed;\n    /** @private */\n    constructor(stream, useCursor) {\n        this._stream = stream;\n        this.#useCursor = useCursor;\n        this._steps = [];\n        this.#executed = false;\n    }\n    /** Return a builder for adding a step to the batch. */\n    step() {\n        return new BatchStep(this);\n    }\n    /** Execute the batch. */\n    execute() {\n        if (this.#executed) {\n            throw new MisuseError(\"This batch has already been executed\");\n        }\n        this.#executed = true;\n        const batch = {\n            steps: this._steps.map((step) => step.proto),\n        };\n        if (this.#useCursor) {\n            return executeCursor(this._stream, this._steps, batch);\n        }\n        else {\n            return executeRegular(this._stream, this._steps, batch);\n        }\n    }\n}\nfunction executeRegular(stream, steps, batch) {\n    return stream._batch(batch).then((result) => {\n        for (let step = 0; step < steps.length; ++step) {\n            const stepResult = result.stepResults.get(step);\n            const stepError = result.stepErrors.get(step);\n            steps[step].callback(stepResult, stepError);\n        }\n    });\n}\nasync function executeCursor(stream, steps, batch) {\n    const cursor = await stream._openCursor(batch);\n    try {\n        let nextStep = 0;\n        let beginEntry = undefined;\n        let rows = [];\n        for (;;) {\n            const entry = await cursor.next();\n            if (entry === undefined) {\n                break;\n            }\n            if (entry.type === \"step_begin\") {\n                if (entry.step < nextStep || entry.step >= steps.length) {\n                    throw new ProtoError(\"Server produced StepBeginEntry for unexpected step\");\n                }\n                else if (beginEntry !== undefined) {\n                    throw new ProtoError(\"Server produced StepBeginEntry before terminating previous step\");\n                }\n                for (let step = nextStep; step < entry.step; ++step) {\n                    steps[step].callback(undefined, undefined);\n                }\n                nextStep = entry.step + 1;\n                beginEntry = entry;\n                rows = [];\n            }\n            else if (entry.type === \"step_end\") {\n                if (beginEntry === undefined) {\n                    throw new ProtoError(\"Server produced StepEndEntry but no step is active\");\n                }\n                const stmtResult = {\n                    cols: beginEntry.cols,\n                    rows,\n                    affectedRowCount: entry.affectedRowCount,\n                    lastInsertRowid: entry.lastInsertRowid,\n                };\n                steps[beginEntry.step].callback(stmtResult, undefined);\n                beginEntry = undefined;\n                rows = [];\n            }\n            else if (entry.type === \"step_error\") {\n                if (beginEntry === undefined) {\n                    if (entry.step >= steps.length) {\n                        throw new ProtoError(\"Server produced StepErrorEntry for unexpected step\");\n                    }\n                    for (let step = nextStep; step < entry.step; ++step) {\n                        steps[step].callback(undefined, undefined);\n                    }\n                }\n                else {\n                    if (entry.step !== beginEntry.step) {\n                        throw new ProtoError(\"Server produced StepErrorEntry for unexpected step\");\n                    }\n                    beginEntry = undefined;\n                    rows = [];\n                }\n                steps[entry.step].callback(undefined, entry.error);\n                nextStep = entry.step + 1;\n            }\n            else if (entry.type === \"row\") {\n                if (beginEntry === undefined) {\n                    throw new ProtoError(\"Server produced RowEntry but no step is active\");\n                }\n                rows.push(entry.row);\n            }\n            else if (entry.type === \"error\") {\n                throw errorFromProto(entry.error);\n            }\n            else if (entry.type === \"none\") {\n                throw new ProtoError(\"Server produced unrecognized CursorEntry\");\n            }\n            else {\n                throw impossible(entry, \"Impossible CursorEntry\");\n            }\n        }\n        if (beginEntry !== undefined) {\n            throw new ProtoError(\"Server closed Cursor before terminating active step\");\n        }\n        for (let step = nextStep; step < steps.length; ++step) {\n            steps[step].callback(undefined, undefined);\n        }\n    }\n    finally {\n        cursor.close();\n    }\n}\n/** A builder for adding a step to the batch. */\nexport class BatchStep {\n    /** @private */\n    _batch;\n    #conds;\n    /** @private */\n    _index;\n    /** @private */\n    constructor(batch) {\n        this._batch = batch;\n        this.#conds = [];\n        this._index = undefined;\n    }\n    /** Add the condition that needs to be satisfied to execute the statement. If you use this method multiple\n     * times, we join the conditions with a logical AND. */\n    condition(cond) {\n        this.#conds.push(cond._proto);\n        return this;\n    }\n    /** Add a statement that returns rows. */\n    query(stmt) {\n        return this.#add(stmt, true, rowsResultFromProto);\n    }\n    /** Add a statement that returns at most a single row. */\n    queryRow(stmt) {\n        return this.#add(stmt, true, rowResultFromProto);\n    }\n    /** Add a statement that returns at most a single value. */\n    queryValue(stmt) {\n        return this.#add(stmt, true, valueResultFromProto);\n    }\n    /** Add a statement without returning rows. */\n    run(stmt) {\n        return this.#add(stmt, false, stmtResultFromProto);\n    }\n    #add(inStmt, wantRows, fromProto) {\n        if (this._index !== undefined) {\n            throw new MisuseError(\"This BatchStep has already been added to the batch\");\n        }\n        const stmt = stmtToProto(this._batch._stream._sqlOwner(), inStmt, wantRows);\n        let condition;\n        if (this.#conds.length === 0) {\n            condition = undefined;\n        }\n        else if (this.#conds.length === 1) {\n            condition = this.#conds[0];\n        }\n        else {\n            condition = { type: \"and\", conds: this.#conds.slice() };\n        }\n        const proto = { stmt, condition };\n        return new Promise((outputCallback, errorCallback) => {\n            const callback = (stepResult, stepError) => {\n                if (stepResult !== undefined && stepError !== undefined) {\n                    errorCallback(new ProtoError(\"Server returned both result and error\"));\n                }\n                else if (stepError !== undefined) {\n                    errorCallback(errorFromProto(stepError));\n                }\n                else if (stepResult !== undefined) {\n                    outputCallback(fromProto(stepResult, this._batch._stream.intMode));\n                }\n                else {\n                    outputCallback(undefined);\n                }\n            };\n            this._index = this._batch._steps.length;\n            this._batch._steps.push({ proto, callback });\n        });\n    }\n}\nexport class BatchCond {\n    /** @private */\n    _batch;\n    /** @private */\n    _proto;\n    /** @private */\n    constructor(batch, proto) {\n        this._batch = batch;\n        this._proto = proto;\n    }\n    /** Create a condition that evaluates to true when the given step executes successfully.\n     *\n     * If the given step fails error or is skipped because its condition evaluated to false, this\n     * condition evaluates to false.\n     */\n    static ok(step) {\n        return new BatchCond(step._batch, { type: \"ok\", step: stepIndex(step) });\n    }\n    /** Create a condition that evaluates to true when the given step fails.\n     *\n     * If the given step succeeds or is skipped because its condition evaluated to false, this condition\n     * evaluates to false.\n     */\n    static error(step) {\n        return new BatchCond(step._batch, { type: \"error\", step: stepIndex(step) });\n    }\n    /** Create a condition that is a logical negation of another condition.\n     */\n    static not(cond) {\n        return new BatchCond(cond._batch, { type: \"not\", cond: cond._proto });\n    }\n    /** Create a condition that is a logical AND of other conditions.\n     */\n    static and(batch, conds) {\n        for (const cond of conds) {\n            checkCondBatch(batch, cond);\n        }\n        return new BatchCond(batch, { type: \"and\", conds: conds.map(e => e._proto) });\n    }\n    /** Create a condition that is a logical OR of other conditions.\n     */\n    static or(batch, conds) {\n        for (const cond of conds) {\n            checkCondBatch(batch, cond);\n        }\n        return new BatchCond(batch, { type: \"or\", conds: conds.map(e => e._proto) });\n    }\n    /** Create a condition that evaluates to true when the SQL connection is in autocommit mode (not inside an\n     * explicit transaction). This requires protocol version 3 or higher.\n     */\n    static isAutocommit(batch) {\n        batch._stream.client()._ensureVersion(3, \"BatchCond.isAutocommit()\");\n        return new BatchCond(batch, { type: \"is_autocommit\" });\n    }\n}\nfunction stepIndex(step) {\n    if (step._index === undefined) {\n        throw new MisuseError(\"Cannot add a condition referencing a step that has not been added to the batch\");\n    }\n    return step._index;\n}\nfunction checkCondBatch(expectedBatch, cond) {\n    if (cond._batch !== expectedBatch) {\n        throw new MisuseError(\"Cannot mix BatchCond objects for different Batch objects\");\n    }\n}\n", "import { sqlToProto } from \"./sql.js\";\nimport { valueToProto } from \"./value.js\";\n/** A statement that can be evaluated by the database. Besides the SQL text, it also contains the positional\n * and named arguments. */\nexport class Stmt {\n    /** The SQL statement text. */\n    sql;\n    /** @private */\n    _args;\n    /** @private */\n    _namedArgs;\n    /** Initialize the statement with given SQL text. */\n    constructor(sql) {\n        this.sql = sql;\n        this._args = [];\n        this._namedArgs = new Map();\n    }\n    /** Binds positional parameters from the given `values`. All previous positional bindings are cleared. */\n    bindIndexes(values) {\n        this._args.length = 0;\n        for (const value of values) {\n            this._args.push(valueToProto(value));\n        }\n        return this;\n    }\n    /** Binds a parameter by a 1-based index. */\n    bindIndex(index, value) {\n        if (index !== (index | 0) || index <= 0) {\n            throw new RangeError(\"Index of a positional argument must be positive integer\");\n        }\n        while (this._args.length < index) {\n            this._args.push(null);\n        }\n        this._args[index - 1] = valueToProto(value);\n        return this;\n    }\n    /** Binds a parameter by name. */\n    bindName(name, value) {\n        this._namedArgs.set(name, valueToProto(value));\n        return this;\n    }\n    /** Clears all bindings. */\n    unbindAll() {\n        this._args.length = 0;\n        this._namedArgs.clear();\n        return this;\n    }\n}\nexport function stmtToProto(sqlOwner, stmt, wantRows) {\n    let inSql;\n    let args = [];\n    let namedArgs = [];\n    if (stmt instanceof Stmt) {\n        inSql = stmt.sql;\n        args = stmt._args;\n        for (const [name, value] of stmt._namedArgs.entries()) {\n            namedArgs.push({ name, value });\n        }\n    }\n    else if (Array.isArray(stmt)) {\n        inSql = stmt[0];\n        if (Array.isArray(stmt[1])) {\n            args = stmt[1].map((arg) => valueToProto(arg));\n        }\n        else {\n            namedArgs = Object.entries(stmt[1]).map(([name, value]) => {\n                return { name, value: valueToProto(value) };\n            });\n        }\n    }\n    else {\n        inSql = stmt;\n    }\n    const { sql, sqlId } = sqlToProto(sqlOwner, inSql);\n    return { sql, sqlId, args, namedArgs, wantRows };\n}\n", "export function describeResultFromProto(result) {\n    return {\n        paramNames: result.params.map((p) => p.name),\n        columns: result.cols,\n        isExplain: result.isExplain,\n        isReadonly: result.isReadonly,\n    };\n}\n", "import { ClientError, ClosedError } from \"../errors.js\";\nimport { Cursor } from \"../cursor.js\";\nimport { Queue } from \"../queue.js\";\nconst fetchChunkSize = 1000;\nconst fetchQueueSize = 10;\nexport class WsCursor extends Cursor {\n    #client;\n    #stream;\n    #cursorId;\n    #entryQueue;\n    #fetchQueue;\n    #closed;\n    #done;\n    /** @private */\n    constructor(client, stream, cursorId) {\n        super();\n        this.#client = client;\n        this.#stream = stream;\n        this.#cursorId = cursorId;\n        this.#entryQueue = new Queue();\n        this.#fetchQueue = new Queue();\n        this.#closed = undefined;\n        this.#done = false;\n    }\n    /** Fetch the next entry from the cursor. */\n    async next() {\n        for (;;) {\n            if (this.#closed !== undefined) {\n                throw new ClosedError(\"Cursor is closed\", this.#closed);\n            }\n            while (!this.#done && this.#fetchQueue.length < fetchQueueSize) {\n                this.#fetchQueue.push(this.#fetch());\n            }\n            const entry = this.#entryQueue.shift();\n            if (this.#done || entry !== undefined) {\n                return entry;\n            }\n            // we assume that `Cursor.next()` is never called concurrently\n            await this.#fetchQueue.shift().then((response) => {\n                if (response === undefined) {\n                    return;\n                }\n                for (const entry of response.entries) {\n                    this.#entryQueue.push(entry);\n                }\n                this.#done ||= response.done;\n            });\n        }\n    }\n    #fetch() {\n        return this.#stream._sendCursorRequest(this, {\n            type: \"fetch_cursor\",\n            cursorId: this.#cursorId,\n            maxCount: fetchChunkSize,\n        }).then((resp) => resp, (error) => {\n            this._setClosed(error);\n            return undefined;\n        });\n    }\n    /** @private */\n    _setClosed(error) {\n        if (this.#closed !== undefined) {\n            return;\n        }\n        this.#closed = error;\n        this.#stream._sendCursorRequest(this, {\n            type: \"close_cursor\",\n            cursorId: this.#cursorId,\n        }).catch(() => undefined);\n        this.#stream._cursorClosed(this);\n    }\n    /** Close the cursor. */\n    close() {\n        this._setClosed(new ClientError(\"Cursor was manually closed\"));\n    }\n    /** True if the cursor is closed. */\n    get closed() {\n        return this.#closed !== undefined;\n    }\n}\n", "export class Cursor {\n}\n", "import { Stmt, Batch } from \"../shared/json_encode.js\";\nimport { impossible } from \"../util.js\";\nexport function ClientMsg(w, msg) {\n    w.stringRaw(\"type\", msg.type);\n    if (msg.type === \"hello\") {\n        if (msg.jwt !== undefined) {\n            w.string(\"jwt\", msg.jwt);\n        }\n    }\n    else if (msg.type === \"request\") {\n        w.number(\"request_id\", msg.requestId);\n        w.object(\"request\", msg.request, Request);\n    }\n    else {\n        throw impossible(msg, \"Impossible type of ClientMsg\");\n    }\n}\nfunction Request(w, msg) {\n    w.stringRaw(\"type\", msg.type);\n    if (msg.type === \"open_stream\") {\n        w.number(\"stream_id\", msg.streamId);\n    }\n    else if (msg.type === \"close_stream\") {\n        w.number(\"stream_id\", msg.streamId);\n    }\n    else if (msg.type === \"execute\") {\n        w.number(\"stream_id\", msg.streamId);\n        w.object(\"stmt\", msg.stmt, Stmt);\n    }\n    else if (msg.type === \"batch\") {\n        w.number(\"stream_id\", msg.streamId);\n        w.object(\"batch\", msg.batch, Batch);\n    }\n    else if (msg.type === \"open_cursor\") {\n        w.number(\"stream_id\", msg.streamId);\n        w.number(\"cursor_id\", msg.cursorId);\n        w.object(\"batch\", msg.batch, Batch);\n    }\n    else if (msg.type === \"close_cursor\") {\n        w.number(\"cursor_id\", msg.cursorId);\n    }\n    else if (msg.type === \"fetch_cursor\") {\n        w.number(\"cursor_id\", msg.cursorId);\n        w.number(\"max_count\", msg.maxCount);\n    }\n    else if (msg.type === \"sequence\") {\n        w.number(\"stream_id\", msg.streamId);\n        if (msg.sql !== undefined) {\n            w.string(\"sql\", msg.sql);\n        }\n        if (msg.sqlId !== undefined) {\n            w.number(\"sql_id\", msg.sqlId);\n        }\n    }\n    else if (msg.type === \"describe\") {\n        w.number(\"stream_id\", msg.streamId);\n        if (msg.sql !== undefined) {\n            w.string(\"sql\", msg.sql);\n        }\n        if (msg.sqlId !== undefined) {\n            w.number(\"sql_id\", msg.sqlId);\n        }\n    }\n    else if (msg.type === \"store_sql\") {\n        w.number(\"sql_id\", msg.sqlId);\n        w.string(\"sql\", msg.sql);\n    }\n    else if (msg.type === \"close_sql\") {\n        w.number(\"sql_id\", msg.sqlId);\n    }\n    else if (msg.type === \"get_autocommit\") {\n        w.number(\"stream_id\", msg.streamId);\n    }\n    else {\n        throw impossible(msg, \"Impossible type of Request\");\n    }\n}\n", "import { Base64 } from \"js-base64\";\nimport { impossible } from \"../util.js\";\nexport function Stmt(w, msg) {\n    if (msg.sql !== undefined) {\n        w.string(\"sql\", msg.sql);\n    }\n    if (msg.sqlId !== undefined) {\n        w.number(\"sql_id\", msg.sqlId);\n    }\n    w.arrayObjects(\"args\", msg.args, Value);\n    w.arrayObjects(\"named_args\", msg.namedArgs, NamedArg);\n    w.boolean(\"want_rows\", msg.wantRows);\n}\nfunction NamedArg(w, msg) {\n    w.string(\"name\", msg.name);\n    w.object(\"value\", msg.value, Value);\n}\nexport function Batch(w, msg) {\n    w.arrayObjects(\"steps\", msg.steps, BatchStep);\n}\nfunction BatchStep(w, msg) {\n    if (msg.condition !== undefined) {\n        w.object(\"condition\", msg.condition, BatchCond);\n    }\n    w.object(\"stmt\", msg.stmt, Stmt);\n}\nfunction BatchCond(w, msg) {\n    w.stringRaw(\"type\", msg.type);\n    if (msg.type === \"ok\" || msg.type === \"error\") {\n        w.number(\"step\", msg.step);\n    }\n    else if (msg.type === \"not\") {\n        w.object(\"cond\", msg.cond, BatchCond);\n    }\n    else if (msg.type === \"and\" || msg.type === \"or\") {\n        w.arrayObjects(\"conds\", msg.conds, BatchCond);\n    }\n    else if (msg.type === \"is_autocommit\") {\n        // do nothing\n    }\n    else {\n        throw impossible(msg, \"Impossible type of BatchCond\");\n    }\n}\nfunction Value(w, msg) {\n    if (msg === null) {\n        w.stringRaw(\"type\", \"null\");\n    }\n    else if (typeof msg === \"bigint\") {\n        w.stringRaw(\"type\", \"integer\");\n        w.stringRaw(\"value\", \"\" + msg);\n    }\n    else if (typeof msg === \"number\") {\n        w.stringRaw(\"type\", \"float\");\n        w.number(\"value\", msg);\n    }\n    else if (typeof msg === \"string\") {\n        w.stringRaw(\"type\", \"text\");\n        w.string(\"value\", msg);\n    }\n    else if (msg instanceof Uint8Array) {\n        w.stringRaw(\"type\", \"blob\");\n        w.stringRaw(\"base64\", Base64.fromUint8Array(msg));\n    }\n    else if (msg === undefined) {\n        // do nothing\n    }\n    else {\n        throw impossible(msg, \"Impossible type of Value\");\n    }\n}\n", "import { Stmt, Batch } from \"../shared/protobuf_encode.js\";\nimport { impossible } from \"../util.js\";\nexport function ClientMsg(w, msg) {\n    if (msg.type === \"hello\") {\n        w.message(1, msg, HelloMsg);\n    }\n    else if (msg.type === \"request\") {\n        w.message(2, msg, RequestMsg);\n    }\n    else {\n        throw impossible(msg, \"Impossible type of ClientMsg\");\n    }\n}\nfunction HelloMsg(w, msg) {\n    if (msg.jwt !== undefined) {\n        w.string(1, msg.jwt);\n    }\n}\nfunction RequestMsg(w, msg) {\n    w.int32(1, msg.requestId);\n    const request = msg.request;\n    if (request.type === \"open_stream\") {\n        w.message(2, request, OpenStreamReq);\n    }\n    else if (request.type === \"close_stream\") {\n        w.message(3, request, CloseStreamReq);\n    }\n    else if (request.type === \"execute\") {\n        w.message(4, request, ExecuteReq);\n    }\n    else if (request.type === \"batch\") {\n        w.message(5, request, BatchReq);\n    }\n    else if (request.type === \"open_cursor\") {\n        w.message(6, request, OpenCursorReq);\n    }\n    else if (request.type === \"close_cursor\") {\n        w.message(7, request, CloseCursorReq);\n    }\n    else if (request.type === \"fetch_cursor\") {\n        w.message(8, request, FetchCursorReq);\n    }\n    else if (request.type === \"sequence\") {\n        w.message(9, request, SequenceReq);\n    }\n    else if (request.type === \"describe\") {\n        w.message(10, request, DescribeReq);\n    }\n    else if (request.type === \"store_sql\") {\n        w.message(11, request, StoreSqlReq);\n    }\n    else if (request.type === \"close_sql\") {\n        w.message(12, request, CloseSqlReq);\n    }\n    else if (request.type === \"get_autocommit\") {\n        w.message(13, request, GetAutocommitReq);\n    }\n    else {\n        throw impossible(request, \"Impossible type of Request\");\n    }\n}\nfunction OpenStreamReq(w, msg) {\n    w.int32(1, msg.streamId);\n}\nfunction CloseStreamReq(w, msg) {\n    w.int32(1, msg.streamId);\n}\nfunction ExecuteReq(w, msg) {\n    w.int32(1, msg.streamId);\n    w.message(2, msg.stmt, Stmt);\n}\nfunction BatchReq(w, msg) {\n    w.int32(1, msg.streamId);\n    w.message(2, msg.batch, Batch);\n}\nfunction OpenCursorReq(w, msg) {\n    w.int32(1, msg.streamId);\n    w.int32(2, msg.cursorId);\n    w.message(3, msg.batch, Batch);\n}\nfunction CloseCursorReq(w, msg) {\n    w.int32(1, msg.cursorId);\n}\nfunction FetchCursorReq(w, msg) {\n    w.int32(1, msg.cursorId);\n    w.uint32(2, msg.maxCount);\n}\nfunction SequenceReq(w, msg) {\n    w.int32(1, msg.streamId);\n    if (msg.sql !== undefined) {\n        w.string(2, msg.sql);\n    }\n    if (msg.sqlId !== undefined) {\n        w.int32(3, msg.sqlId);\n    }\n}\nfunction DescribeReq(w, msg) {\n    w.int32(1, msg.streamId);\n    if (msg.sql !== undefined) {\n        w.string(2, msg.sql);\n    }\n    if (msg.sqlId !== undefined) {\n        w.int32(3, msg.sqlId);\n    }\n}\nfunction StoreSqlReq(w, msg) {\n    w.int32(1, msg.sqlId);\n    w.string(2, msg.sql);\n}\nfunction CloseSqlReq(w, msg) {\n    w.int32(1, msg.sqlId);\n}\nfunction GetAutocommitReq(w, msg) {\n    w.int32(1, msg.streamId);\n}\n", "import { impossible } from \"../util.js\";\nexport function Stmt(w, msg) {\n    if (msg.sql !== undefined) {\n        w.string(1, msg.sql);\n    }\n    if (msg.sqlId !== undefined) {\n        w.int32(2, msg.sqlId);\n    }\n    for (const arg of msg.args) {\n        w.message(3, arg, Value);\n    }\n    for (const arg of msg.namedArgs) {\n        w.message(4, arg, NamedArg);\n    }\n    w.bool(5, msg.wantRows);\n}\nfunction NamedArg(w, msg) {\n    w.string(1, msg.name);\n    w.message(2, msg.value, Value);\n}\nexport function Batch(w, msg) {\n    for (const step of msg.steps) {\n        w.message(1, step, BatchStep);\n    }\n}\nfunction BatchStep(w, msg) {\n    if (msg.condition !== undefined) {\n        w.message(1, msg.condition, BatchCond);\n    }\n    w.message(2, msg.stmt, Stmt);\n}\nfunction BatchCond(w, msg) {\n    if (msg.type === \"ok\") {\n        w.uint32(1, msg.step);\n    }\n    else if (msg.type === \"error\") {\n        w.uint32(2, msg.step);\n    }\n    else if (msg.type === \"not\") {\n        w.message(3, msg.cond, BatchCond);\n    }\n    else if (msg.type === \"and\") {\n        w.message(4, msg.conds, BatchCondList);\n    }\n    else if (msg.type === \"or\") {\n        w.message(5, msg.conds, BatchCondList);\n    }\n    else if (msg.type === \"is_autocommit\") {\n        w.message(6, undefined, Empty);\n    }\n    else {\n        throw impossible(msg, \"Impossible type of BatchCond\");\n    }\n}\nfunction BatchCondList(w, msg) {\n    for (const cond of msg) {\n        w.message(1, cond, BatchCond);\n    }\n}\nfunction Value(w, msg) {\n    if (msg === null) {\n        w.message(1, undefined, Empty);\n    }\n    else if (typeof msg === \"bigint\") {\n        w.sint64(2, msg);\n    }\n    else if (typeof msg === \"number\") {\n        w.double(3, msg);\n    }\n    else if (typeof msg === \"string\") {\n        w.string(4, msg);\n    }\n    else if (msg instanceof Uint8Array) {\n        w.bytes(5, msg);\n    }\n    else if (msg === undefined) {\n        // do nothing\n    }\n    else {\n        throw impossible(msg, \"Impossible type of Value\");\n    }\n}\nfunction Empty(_w, _msg) {\n    // do nothing\n}\n", "import { ProtoError } from \"../errors.js\";\nimport * as d from \"../encoding/json/decode.js\";\nimport { Error, StmtResult, BatchResult, CursorEntry, DescribeResult } from \"../shared/json_decode.js\";\nexport function ServerMsg(obj) {\n    const type = d.string(obj[\"type\"]);\n    if (type === \"hello_ok\") {\n        return { type: \"hello_ok\" };\n    }\n    else if (type === \"hello_error\") {\n        const error = Error(d.object(obj[\"error\"]));\n        return { type: \"hello_error\", error };\n    }\n    else if (type === \"response_ok\") {\n        const requestId = d.number(obj[\"request_id\"]);\n        const response = Response(d.object(obj[\"response\"]));\n        return { type: \"response_ok\", requestId, response };\n    }\n    else if (type === \"response_error\") {\n        const requestId = d.number(obj[\"request_id\"]);\n        const error = Error(d.object(obj[\"error\"]));\n        return { type: \"response_error\", requestId, error };\n    }\n    else {\n        throw new ProtoError(\"Unexpected type of ServerMsg\");\n    }\n}\nfunction Response(obj) {\n    const type = d.string(obj[\"type\"]);\n    if (type === \"open_stream\") {\n        return { type: \"open_stream\" };\n    }\n    else if (type === \"close_stream\") {\n        return { type: \"close_stream\" };\n    }\n    else if (type === \"execute\") {\n        const result = StmtResult(d.object(obj[\"result\"]));\n        return { type: \"execute\", result };\n    }\n    else if (type === \"batch\") {\n        const result = BatchResult(d.object(obj[\"result\"]));\n        return { type: \"batch\", result };\n    }\n    else if (type === \"open_cursor\") {\n        return { type: \"open_cursor\" };\n    }\n    else if (type === \"close_cursor\") {\n        return { type: \"close_cursor\" };\n    }\n    else if (type === \"fetch_cursor\") {\n        const entries = d.arrayObjectsMap(obj[\"entries\"], CursorEntry);\n        const done = d.boolean(obj[\"done\"]);\n        return { type: \"fetch_cursor\", entries, done };\n    }\n    else if (type === \"sequence\") {\n        return { type: \"sequence\" };\n    }\n    else if (type === \"describe\") {\n        const result = DescribeResult(d.object(obj[\"result\"]));\n        return { type: \"describe\", result };\n    }\n    else if (type === \"store_sql\") {\n        return { type: \"store_sql\" };\n    }\n    else if (type === \"close_sql\") {\n        return { type: \"close_sql\" };\n    }\n    else if (type === \"get_autocommit\") {\n        const isAutocommit = d.boolean(obj[\"is_autocommit\"]);\n        return { type: \"get_autocommit\", isAutocommit };\n    }\n    else {\n        throw new ProtoError(\"Unexpected type of Response\");\n    }\n}\n", "import { Base64 } from \"js-base64\";\nimport { ProtoError } from \"../errors.js\";\nimport * as d from \"../encoding/json/decode.js\";\nexport function Error(obj) {\n    const message = d.string(obj[\"message\"]);\n    const code = d.stringOpt(obj[\"code\"]);\n    return { message, code };\n}\nexport function StmtResult(obj) {\n    const cols = d.arrayObjectsMap(obj[\"cols\"], Col);\n    const rows = d.array(obj[\"rows\"]).map((rowObj) => d.arrayObjectsMap(rowObj, Value));\n    const affectedRowCount = d.number(obj[\"affected_row_count\"]);\n    const lastInsertRowidStr = d.stringOpt(obj[\"last_insert_rowid\"]);\n    const lastInsertRowid = lastInsertRowidStr !== undefined\n        ? BigInt(lastInsertRowidStr) : undefined;\n    return { cols, rows, affectedRowCount, lastInsertRowid };\n}\nfunction Col(obj) {\n    const name = d.stringOpt(obj[\"name\"]);\n    const decltype = d.stringOpt(obj[\"decltype\"]);\n    return { name, decltype };\n}\nexport function BatchResult(obj) {\n    const stepResults = new Map();\n    d.array(obj[\"step_results\"]).forEach((value, i) => {\n        if (value !== null) {\n            stepResults.set(i, StmtResult(d.object(value)));\n        }\n    });\n    const stepErrors = new Map();\n    d.array(obj[\"step_errors\"]).forEach((value, i) => {\n        if (value !== null) {\n            stepErrors.set(i, Error(d.object(value)));\n        }\n    });\n    return { stepResults, stepErrors };\n}\nexport function CursorEntry(obj) {\n    const type = d.string(obj[\"type\"]);\n    if (type === \"step_begin\") {\n        const step = d.number(obj[\"step\"]);\n        const cols = d.arrayObjectsMap(obj[\"cols\"], Col);\n        return { type: \"step_begin\", step, cols };\n    }\n    else if (type === \"step_end\") {\n        const affectedRowCount = d.number(obj[\"affected_row_count\"]);\n        const lastInsertRowidStr = d.stringOpt(obj[\"last_insert_rowid\"]);\n        const lastInsertRowid = lastInsertRowidStr !== undefined\n            ? BigInt(lastInsertRowidStr) : undefined;\n        return { type: \"step_end\", affectedRowCount, lastInsertRowid };\n    }\n    else if (type === \"step_error\") {\n        const step = d.number(obj[\"step\"]);\n        const error = Error(d.object(obj[\"error\"]));\n        return { type: \"step_error\", step, error };\n    }\n    else if (type === \"row\") {\n        const row = d.arrayObjectsMap(obj[\"row\"], Value);\n        return { type: \"row\", row };\n    }\n    else if (type === \"error\") {\n        const error = Error(d.object(obj[\"error\"]));\n        return { type: \"error\", error };\n    }\n    else {\n        throw new ProtoError(\"Unexpected type of CursorEntry\");\n    }\n}\nexport function DescribeResult(obj) {\n    const params = d.arrayObjectsMap(obj[\"params\"], DescribeParam);\n    const cols = d.arrayObjectsMap(obj[\"cols\"], DescribeCol);\n    const isExplain = d.boolean(obj[\"is_explain\"]);\n    const isReadonly = d.boolean(obj[\"is_readonly\"]);\n    return { params, cols, isExplain, isReadonly };\n}\nfunction DescribeParam(obj) {\n    const name = d.stringOpt(obj[\"name\"]);\n    return { name };\n}\nfunction DescribeCol(obj) {\n    const name = d.string(obj[\"name\"]);\n    const decltype = d.stringOpt(obj[\"decltype\"]);\n    return { name, decltype };\n}\nexport function Value(obj) {\n    const type = d.string(obj[\"type\"]);\n    if (type === \"null\") {\n        return null;\n    }\n    else if (type === \"integer\") {\n        const value = d.string(obj[\"value\"]);\n        return BigInt(value);\n    }\n    else if (type === \"float\") {\n        return d.number(obj[\"value\"]);\n    }\n    else if (type === \"text\") {\n        return d.string(obj[\"value\"]);\n    }\n    else if (type === \"blob\") {\n        return Base64.toUint8Array(d.string(obj[\"base64\"]));\n    }\n    else {\n        throw new ProtoError(\"Unexpected type of Value\");\n    }\n}\n", "import { Error, StmtResult, BatchResult, CursorEntry, DescribeResult } from \"../shared/protobuf_decode.js\";\nexport const ServerMsg = {\n    default() { return { type: \"none\" }; },\n    1(r) { return { type: \"hello_ok\" }; },\n    2(r) { return r.message(HelloErrorMsg); },\n    3(r) { return r.message(ResponseOkMsg); },\n    4(r) { return r.message(ResponseErrorMsg); },\n};\nconst HelloErrorMsg = {\n    default() { return { type: \"hello_error\", error: Error.default() }; },\n    1(r, msg) { msg.error = r.message(Error); },\n};\nconst ResponseErrorMsg = {\n    default() { return { type: \"response_error\", requestId: 0, error: Error.default() }; },\n    1(r, msg) { msg.requestId = r.int32(); },\n    2(r, msg) { msg.error = r.message(Error); },\n};\nconst ResponseOkMsg = {\n    default() {\n        return {\n            type: \"response_ok\",\n            requestId: 0,\n            response: { type: \"none\" },\n        };\n    },\n    1(r, msg) { msg.requestId = r.int32(); },\n    2(r, msg) { msg.response = { type: \"open_stream\" }; },\n    3(r, msg) { msg.response = { type: \"close_stream\" }; },\n    4(r, msg) { msg.response = r.message(ExecuteResp); },\n    5(r, msg) { msg.response = r.message(BatchResp); },\n    6(r, msg) { msg.response = { type: \"open_cursor\" }; },\n    7(r, msg) { msg.response = { type: \"close_cursor\" }; },\n    8(r, msg) { msg.response = r.message(FetchCursorResp); },\n    9(r, msg) { msg.response = { type: \"sequence\" }; },\n    10(r, msg) { msg.response = r.message(DescribeResp); },\n    11(r, msg) { msg.response = { type: \"store_sql\" }; },\n    12(r, msg) { msg.response = { type: \"close_sql\" }; },\n    13(r, msg) { msg.response = r.message(GetAutocommitResp); },\n};\nconst ExecuteResp = {\n    default() { return { type: \"execute\", result: StmtResult.default() }; },\n    1(r, msg) { msg.result = r.message(StmtResult); },\n};\nconst BatchResp = {\n    default() { return { type: \"batch\", result: BatchResult.default() }; },\n    1(r, msg) { msg.result = r.message(BatchResult); },\n};\nconst FetchCursorResp = {\n    default() { return { type: \"fetch_cursor\", entries: [], done: false }; },\n    1(r, msg) { msg.entries.push(r.message(CursorEntry)); },\n    2(r, msg) { msg.done = r.bool(); },\n};\nconst DescribeResp = {\n    default() { return { type: \"describe\", result: DescribeResult.default() }; },\n    1(r, msg) { msg.result = r.message(DescribeResult); },\n};\nconst GetAutocommitResp = {\n    default() { return { type: \"get_autocommit\", isAutocommit: false }; },\n    1(r, msg) { msg.isAutocommit = r.bool(); },\n};\n", "export const Error = {\n    default() { return { message: \"\", code: undefined }; },\n    1(r, msg) { msg.message = r.string(); },\n    2(r, msg) { msg.code = r.string(); },\n};\nexport const StmtResult = {\n    default() {\n        return {\n            cols: [],\n            rows: [],\n            affectedRowCount: 0,\n            lastInsertRowid: undefined,\n        };\n    },\n    1(r, msg) { msg.cols.push(r.message(Col)); },\n    2(r, msg) { msg.rows.push(r.message(Row)); },\n    3(r, msg) { msg.affectedRowCount = Number(r.uint64()); },\n    4(r, msg) { msg.lastInsertRowid = r.sint64(); },\n};\nconst Col = {\n    default() { return { name: undefined, decltype: undefined }; },\n    1(r, msg) { msg.name = r.string(); },\n    2(r, msg) { msg.decltype = r.string(); },\n};\nconst Row = {\n    default() { return []; },\n    1(r, msg) { msg.push(r.message(Value)); },\n};\nexport const BatchResult = {\n    default() { return { stepResults: new Map(), stepErrors: new Map() }; },\n    1(r, msg) {\n        const [key, value] = r.message(BatchResultStepResult);\n        msg.stepResults.set(key, value);\n    },\n    2(r, msg) {\n        const [key, value] = r.message(BatchResultStepError);\n        msg.stepErrors.set(key, value);\n    },\n};\nconst BatchResultStepResult = {\n    default() { return [0, StmtResult.default()]; },\n    1(r, msg) { msg[0] = r.uint32(); },\n    2(r, msg) { msg[1] = r.message(StmtResult); },\n};\nconst BatchResultStepError = {\n    default() { return [0, Error.default()]; },\n    1(r, msg) { msg[0] = r.uint32(); },\n    2(r, msg) { msg[1] = r.message(Error); },\n};\nexport const CursorEntry = {\n    default() { return { type: \"none\" }; },\n    1(r) { return r.message(StepBeginEntry); },\n    2(r) { return r.message(StepEndEntry); },\n    3(r) { return r.message(StepErrorEntry); },\n    4(r) { return { type: \"row\", row: r.message(Row) }; },\n    5(r) { return { type: \"error\", error: r.message(Error) }; },\n};\nconst StepBeginEntry = {\n    default() { return { type: \"step_begin\", step: 0, cols: [] }; },\n    1(r, msg) { msg.step = r.uint32(); },\n    2(r, msg) { msg.cols.push(r.message(Col)); },\n};\nconst StepEndEntry = {\n    default() {\n        return {\n            type: \"step_end\",\n            affectedRowCount: 0,\n            lastInsertRowid: undefined,\n        };\n    },\n    1(r, msg) { msg.affectedRowCount = r.uint32(); },\n    2(r, msg) { msg.lastInsertRowid = r.uint64(); },\n};\nconst StepErrorEntry = {\n    default() {\n        return {\n            type: \"step_error\",\n            step: 0,\n            error: Error.default(),\n        };\n    },\n    1(r, msg) { msg.step = r.uint32(); },\n    2(r, msg) { msg.error = r.message(Error); },\n};\nexport const DescribeResult = {\n    default() {\n        return {\n            params: [],\n            cols: [],\n            isExplain: false,\n            isReadonly: false,\n        };\n    },\n    1(r, msg) { msg.params.push(r.message(DescribeParam)); },\n    2(r, msg) { msg.cols.push(r.message(DescribeCol)); },\n    3(r, msg) { msg.isExplain = r.bool(); },\n    4(r, msg) { msg.isReadonly = r.bool(); },\n};\nconst DescribeParam = {\n    default() { return { name: undefined }; },\n    1(r, msg) { msg.name = r.string(); },\n};\nconst DescribeCol = {\n    default() { return { name: \"\", decltype: undefined }; },\n    1(r, msg) { msg.name = r.string(); },\n    2(r, msg) { msg.decltype = r.string(); },\n};\nconst Value = {\n    default() { return undefined; },\n    1(r) { return null; },\n    2(r) { return r.sint64(); },\n    3(r) { return r.double(); },\n    4(r) { return r.string(); },\n    5(r) { return r.bytes(); },\n};\n", "import { fetch, Request } from \"@libsql/isomorphic-fetch\";\nimport { Client } from \"../client.js\";\nimport { ClientError, ClosedError, ProtocolVersionError } from \"../errors.js\";\nimport { HttpStream } from \"./stream.js\";\nexport const checkEndpoints = [\n    {\n        versionPath: \"v3-protobuf\",\n        pipelinePath: \"v3-protobuf/pipeline\",\n        cursorPath: \"v3-protobuf/cursor\",\n        version: 3,\n        encoding: \"protobuf\",\n    },\n    /*\n    {\n        versionPath: \"v3\",\n        pipelinePath: \"v3/pipeline\",\n        cursorPath: \"v3/cursor\",\n        version: 3,\n        encoding: \"json\",\n    },\n    */\n];\nconst fallbackEndpoint = {\n    versionPath: \"v2\",\n    pipelinePath: \"v2/pipeline\",\n    cursorPath: undefined,\n    version: 2,\n    encoding: \"json\",\n};\n/** A client for the Hrana protocol over HTTP. */\nexport class HttpClient extends Client {\n    #url;\n    #jwt;\n    #fetch;\n    #closed;\n    #streams;\n    /** @private */\n    _endpointPromise;\n    /** @private */\n    _endpoint;\n    /** @private */\n    constructor(url, jwt, customFetch, protocolVersion = 2) {\n        super();\n        this.#url = url;\n        this.#jwt = jwt;\n        this.#fetch = customFetch ?? fetch;\n        this.#closed = undefined;\n        this.#streams = new Set();\n        if (protocolVersion == 3) {\n            this._endpointPromise = findEndpoint(this.#fetch, this.#url);\n            this._endpointPromise.then((endpoint) => this._endpoint = endpoint, (error) => this.#setClosed(error));\n        }\n        else {\n            this._endpointPromise = Promise.resolve(fallbackEndpoint);\n            this._endpointPromise.then((endpoint) => this._endpoint = endpoint, (error) => this.#setClosed(error));\n        }\n    }\n    /** Get the protocol version supported by the server. */\n    async getVersion() {\n        if (this._endpoint !== undefined) {\n            return this._endpoint.version;\n        }\n        return (await this._endpointPromise).version;\n    }\n    // Make sure that the negotiated version is at least `minVersion`.\n    /** @private */\n    _ensureVersion(minVersion, feature) {\n        if (minVersion <= fallbackEndpoint.version) {\n            return;\n        }\n        else if (this._endpoint === undefined) {\n            throw new ProtocolVersionError(`${feature} is supported only on protocol version ${minVersion} and higher, ` +\n                \"but the version supported by the HTTP server is not yet known. \" +\n                \"Use Client.getVersion() to wait until the version is available.\");\n        }\n        else if (this._endpoint.version < minVersion) {\n            throw new ProtocolVersionError(`${feature} is supported only on protocol version ${minVersion} and higher, ` +\n                `but the HTTP server only supports version ${this._endpoint.version}.`);\n        }\n    }\n    /** Open a {@link HttpStream}, a stream for executing SQL statements. */\n    openStream() {\n        if (this.#closed !== undefined) {\n            throw new ClosedError(\"Client is closed\", this.#closed);\n        }\n        const stream = new HttpStream(this, this.#url, this.#jwt, this.#fetch);\n        this.#streams.add(stream);\n        return stream;\n    }\n    /** @private */\n    _streamClosed(stream) {\n        this.#streams.delete(stream);\n    }\n    /** Close the client and all its streams. */\n    close() {\n        this.#setClosed(new ClientError(\"Client was manually closed\"));\n    }\n    /** True if the client is closed. */\n    get closed() {\n        return this.#closed !== undefined;\n    }\n    #setClosed(error) {\n        if (this.#closed !== undefined) {\n            return;\n        }\n        this.#closed = error;\n        for (const stream of Array.from(this.#streams)) {\n            stream._setClosed(new ClosedError(\"Client was closed\", error));\n        }\n    }\n}\nasync function findEndpoint(customFetch, clientUrl) {\n    const fetch = customFetch;\n    for (const endpoint of checkEndpoints) {\n        const url = new URL(endpoint.versionPath, clientUrl);\n        const request = new Request(url.toString(), { method: \"GET\" });\n        const response = await fetch(request);\n        await response.arrayBuffer();\n        if (response.ok) {\n            return endpoint;\n        }\n    }\n    return fallbackEndpoint;\n}\n", "const _fetch = fetch;\nconst _Request = Request;\nconst _Headers = Headers;\nexport {\n    _fetch as fetch,\n    _Request as Request,\n    _Headers as Headers,\n};\n", "import { Request, Headers } from \"@libsql/isomorphic-fetch\";\nimport { ClientError, HttpServerError, ProtocolVersionError, ProtoError, ClosedError, InternalError, } from \"../errors.js\";\nimport { readJsonObject, writeJsonObject, readProtobufMessage, writeProtobufMessage, } from \"../encoding/index.js\";\nimport { IdAlloc } from \"../id_alloc.js\";\nimport { Queue } from \"../queue.js\";\nimport { queueMicrotask } from \"../queue_microtask.js\";\nimport { errorFromProto } from \"../result.js\";\nimport { Sql } from \"../sql.js\";\nimport { Stream } from \"../stream.js\";\nimport { impossible } from \"../util.js\";\nimport { HttpCursor } from \"./cursor.js\";\nimport { PipelineReqBody as json_PipelineReqBody } from \"./json_encode.js\";\nimport { PipelineReqBody as protobuf_PipelineReqBody } from \"./protobuf_encode.js\";\nimport { CursorReqBody as json_CursorReqBody } from \"./json_encode.js\";\nimport { CursorReqBody as protobuf_CursorReqBody } from \"./protobuf_encode.js\";\nimport { PipelineRespBody as json_PipelineRespBody } from \"./json_decode.js\";\nimport { PipelineRespBody as protobuf_PipelineRespBody } from \"./protobuf_decode.js\";\nexport class HttpStream extends Stream {\n    #client;\n    #baseUrl;\n    #jwt;\n    #fetch;\n    #baton;\n    #queue;\n    #flushing;\n    #cursor;\n    #closing;\n    #closeQueued;\n    #closed;\n    #sqlIdAlloc;\n    /** @private */\n    constructor(client, baseUrl, jwt, customFetch) {\n        super(client.intMode);\n        this.#client = client;\n        this.#baseUrl = baseUrl.toString();\n        this.#jwt = jwt;\n        this.#fetch = customFetch;\n        this.#baton = undefined;\n        this.#queue = new Queue();\n        this.#flushing = false;\n        this.#closing = false;\n        this.#closeQueued = false;\n        this.#closed = undefined;\n        this.#sqlIdAlloc = new IdAlloc();\n    }\n    /** Get the {@link HttpClient} object that this stream belongs to. */\n    client() {\n        return this.#client;\n    }\n    /** @private */\n    _sqlOwner() {\n        return this;\n    }\n    /** Cache a SQL text on the server. */\n    storeSql(sql) {\n        const sqlId = this.#sqlIdAlloc.alloc();\n        this.#sendStreamRequest({ type: \"store_sql\", sqlId, sql }).then(() => undefined, (error) => this._setClosed(error));\n        return new Sql(this, sqlId);\n    }\n    /** @private */\n    _closeSql(sqlId) {\n        if (this.#closed !== undefined) {\n            return;\n        }\n        this.#sendStreamRequest({ type: \"close_sql\", sqlId }).then(() => this.#sqlIdAlloc.free(sqlId), (error) => this._setClosed(error));\n    }\n    /** @private */\n    _execute(stmt) {\n        return this.#sendStreamRequest({ type: \"execute\", stmt }).then((response) => {\n            return response.result;\n        });\n    }\n    /** @private */\n    _batch(batch) {\n        return this.#sendStreamRequest({ type: \"batch\", batch }).then((response) => {\n            return response.result;\n        });\n    }\n    /** @private */\n    _describe(protoSql) {\n        return this.#sendStreamRequest({\n            type: \"describe\",\n            sql: protoSql.sql,\n            sqlId: protoSql.sqlId\n        }).then((response) => {\n            return response.result;\n        });\n    }\n    /** @private */\n    _sequence(protoSql) {\n        return this.#sendStreamRequest({\n            type: \"sequence\",\n            sql: protoSql.sql,\n            sqlId: protoSql.sqlId,\n        }).then((_response) => {\n            return undefined;\n        });\n    }\n    /** Check whether the SQL connection underlying this stream is in autocommit state (i.e., outside of an\n     * explicit transaction). This requires protocol version 3 or higher.\n     */\n    getAutocommit() {\n        this.#client._ensureVersion(3, \"getAutocommit()\");\n        return this.#sendStreamRequest({\n            type: \"get_autocommit\",\n        }).then((response) => {\n            return response.isAutocommit;\n        });\n    }\n    #sendStreamRequest(request) {\n        return new Promise((responseCallback, errorCallback) => {\n            this.#pushToQueue({ type: \"pipeline\", request, responseCallback, errorCallback });\n        });\n    }\n    /** @private */\n    _openCursor(batch) {\n        return new Promise((cursorCallback, errorCallback) => {\n            this.#pushToQueue({ type: \"cursor\", batch, cursorCallback, errorCallback });\n        });\n    }\n    /** @private */\n    _cursorClosed(cursor) {\n        if (cursor !== this.#cursor) {\n            throw new InternalError(\"Cursor was closed, but it was not associated with the stream\");\n        }\n        this.#cursor = undefined;\n        queueMicrotask(() => this.#flushQueue());\n    }\n    /** Immediately close the stream. */\n    close() {\n        this._setClosed(new ClientError(\"Stream was manually closed\"));\n    }\n    /** Gracefully close the stream. */\n    closeGracefully() {\n        this.#closing = true;\n        queueMicrotask(() => this.#flushQueue());\n    }\n    /** True if the stream is closed. */\n    get closed() {\n        return this.#closed !== undefined || this.#closing;\n    }\n    /** @private */\n    _setClosed(error) {\n        if (this.#closed !== undefined) {\n            return;\n        }\n        this.#closed = error;\n        if (this.#cursor !== undefined) {\n            this.#cursor._setClosed(error);\n        }\n        this.#client._streamClosed(this);\n        for (;;) {\n            const entry = this.#queue.shift();\n            if (entry !== undefined) {\n                entry.errorCallback(error);\n            }\n            else {\n                break;\n            }\n        }\n        if ((this.#baton !== undefined || this.#flushing) && !this.#closeQueued) {\n            this.#queue.push({\n                type: \"pipeline\",\n                request: { type: \"close\" },\n                responseCallback: () => undefined,\n                errorCallback: () => undefined,\n            });\n            this.#closeQueued = true;\n            queueMicrotask(() => this.#flushQueue());\n        }\n    }\n    #pushToQueue(entry) {\n        if (this.#closed !== undefined) {\n            throw new ClosedError(\"Stream is closed\", this.#closed);\n        }\n        else if (this.#closing) {\n            throw new ClosedError(\"Stream is closing\", undefined);\n        }\n        else {\n            this.#queue.push(entry);\n            queueMicrotask(() => this.#flushQueue());\n        }\n    }\n    #flushQueue() {\n        if (this.#flushing || this.#cursor !== undefined) {\n            return;\n        }\n        if (this.#closing && this.#queue.length === 0) {\n            this._setClosed(new ClientError(\"Stream was gracefully closed\"));\n            return;\n        }\n        const endpoint = this.#client._endpoint;\n        if (endpoint === undefined) {\n            this.#client._endpointPromise.then(() => this.#flushQueue(), (error) => this._setClosed(error));\n            return;\n        }\n        const firstEntry = this.#queue.shift();\n        if (firstEntry === undefined) {\n            return;\n        }\n        else if (firstEntry.type === \"pipeline\") {\n            const pipeline = [firstEntry];\n            for (;;) {\n                const entry = this.#queue.first();\n                if (entry !== undefined && entry.type === \"pipeline\") {\n                    pipeline.push(entry);\n                    this.#queue.shift();\n                }\n                else if (entry === undefined && this.#closing && !this.#closeQueued) {\n                    pipeline.push({\n                        type: \"pipeline\",\n                        request: { type: \"close\" },\n                        responseCallback: () => undefined,\n                        errorCallback: () => undefined,\n                    });\n                    this.#closeQueued = true;\n                    break;\n                }\n                else {\n                    break;\n                }\n            }\n            this.#flushPipeline(endpoint, pipeline);\n        }\n        else if (firstEntry.type === \"cursor\") {\n            this.#flushCursor(endpoint, firstEntry);\n        }\n        else {\n            throw impossible(firstEntry, \"Impossible type of QueueEntry\");\n        }\n    }\n    #flushPipeline(endpoint, pipeline) {\n        this.#flush(() => this.#createPipelineRequest(pipeline, endpoint), (resp) => decodePipelineResponse(resp, endpoint.encoding), (respBody) => respBody.baton, (respBody) => respBody.baseUrl, (respBody) => handlePipelineResponse(pipeline, respBody), (error) => pipeline.forEach((entry) => entry.errorCallback(error)));\n    }\n    #flushCursor(endpoint, entry) {\n        const cursor = new HttpCursor(this, endpoint.encoding);\n        this.#cursor = cursor;\n        this.#flush(() => this.#createCursorRequest(entry, endpoint), (resp) => cursor.open(resp), (respBody) => respBody.baton, (respBody) => respBody.baseUrl, (_respBody) => entry.cursorCallback(cursor), (error) => entry.errorCallback(error));\n    }\n    #flush(createRequest, decodeResponse, getBaton, getBaseUrl, handleResponse, handleError) {\n        let promise;\n        try {\n            const request = createRequest();\n            const fetch = this.#fetch;\n            promise = fetch(request);\n        }\n        catch (error) {\n            promise = Promise.reject(error);\n        }\n        this.#flushing = true;\n        promise.then((resp) => {\n            if (!resp.ok) {\n                return errorFromResponse(resp).then((error) => {\n                    throw error;\n                });\n            }\n            return decodeResponse(resp);\n        }).then((r) => {\n            this.#baton = getBaton(r);\n            this.#baseUrl = getBaseUrl(r) ?? this.#baseUrl;\n            handleResponse(r);\n        }).catch((error) => {\n            this._setClosed(error);\n            handleError(error);\n        }).finally(() => {\n            this.#flushing = false;\n            this.#flushQueue();\n        });\n    }\n    #createPipelineRequest(pipeline, endpoint) {\n        return this.#createRequest(new URL(endpoint.pipelinePath, this.#baseUrl), {\n            baton: this.#baton,\n            requests: pipeline.map((entry) => entry.request),\n        }, endpoint.encoding, json_PipelineReqBody, protobuf_PipelineReqBody);\n    }\n    #createCursorRequest(entry, endpoint) {\n        if (endpoint.cursorPath === undefined) {\n            throw new ProtocolVersionError(\"Cursors are supported only on protocol version 3 and higher, \" +\n                `but the HTTP server only supports version ${endpoint.version}.`);\n        }\n        return this.#createRequest(new URL(endpoint.cursorPath, this.#baseUrl), {\n            baton: this.#baton,\n            batch: entry.batch,\n        }, endpoint.encoding, json_CursorReqBody, protobuf_CursorReqBody);\n    }\n    #createRequest(url, reqBody, encoding, jsonFun, protobufFun) {\n        let bodyData;\n        let contentType;\n        if (encoding === \"json\") {\n            bodyData = writeJsonObject(reqBody, jsonFun);\n            contentType = \"application/json\";\n        }\n        else if (encoding === \"protobuf\") {\n            bodyData = writeProtobufMessage(reqBody, protobufFun);\n            contentType = \"application/x-protobuf\";\n        }\n        else {\n            throw impossible(encoding, \"Impossible encoding\");\n        }\n        const headers = new Headers();\n        headers.set(\"content-type\", contentType);\n        if (this.#jwt !== undefined) {\n            headers.set(\"authorization\", `Bearer ${this.#jwt}`);\n        }\n        return new Request(url.toString(), { method: \"POST\", headers, body: bodyData });\n    }\n}\nfunction handlePipelineResponse(pipeline, respBody) {\n    if (respBody.results.length !== pipeline.length) {\n        throw new ProtoError(\"Server returned unexpected number of pipeline results\");\n    }\n    for (let i = 0; i < pipeline.length; ++i) {\n        const result = respBody.results[i];\n        const entry = pipeline[i];\n        if (result.type === \"ok\") {\n            if (result.response.type !== entry.request.type) {\n                throw new ProtoError(\"Received unexpected type of response\");\n            }\n            entry.responseCallback(result.response);\n        }\n        else if (result.type === \"error\") {\n            entry.errorCallback(errorFromProto(result.error));\n        }\n        else if (result.type === \"none\") {\n            throw new ProtoError(\"Received unrecognized type of StreamResult\");\n        }\n        else {\n            throw impossible(result, \"Received impossible type of StreamResult\");\n        }\n    }\n}\nasync function decodePipelineResponse(resp, encoding) {\n    if (encoding === \"json\") {\n        const respJson = await resp.json();\n        return readJsonObject(respJson, json_PipelineRespBody);\n    }\n    if (encoding === \"protobuf\") {\n        const respData = await resp.arrayBuffer();\n        return readProtobufMessage(new Uint8Array(respData), protobuf_PipelineRespBody);\n    }\n    await resp.body?.cancel();\n    throw impossible(encoding, \"Impossible encoding\");\n}\nasync function errorFromResponse(resp) {\n    const respType = resp.headers.get(\"content-type\") ?? \"text/plain\";\n    let message = `Server returned HTTP status ${resp.status}`;\n    if (respType === \"application/json\") {\n        const respBody = await resp.json();\n        if (\"message\" in respBody) {\n            return errorFromProto(respBody);\n        }\n        return new HttpServerError(message, resp.status);\n    }\n    if (respType === \"text/plain\") {\n        const respBody = (await resp.text()).trim();\n        if (respBody !== \"\") {\n            message += `: ${respBody}`;\n        }\n        return new HttpServerError(message, resp.status);\n    }\n    await resp.body?.cancel();\n    return new HttpServerError(message, resp.status);\n}\n", "// queueMicrotask() ponyfill\n// https://github.com/libsql/libsql-client-ts/issues/47\nlet _queueMicrotask;\nif (typeof queueMicrotask !== \"undefined\") {\n    _queueMicrotask = queueMicrotask;\n}\nelse {\n    const resolved = Promise.resolve();\n    _queueMicrotask = (callback) => {\n        resolved.then(callback);\n    };\n}\nexport { _queueMicrotask as queueMicrotask };\n", "import { ByteQueue } from \"../byte_queue.js\";\nimport { Cursor } from \"../cursor.js\";\nimport * as jsond from \"../encoding/json/decode.js\";\nimport * as protobufd from \"../encoding/protobuf/decode.js\";\nimport { ClientError, ClosedError, ProtoError, InternalError } from \"../errors.js\";\nimport { impossible } from \"../util.js\";\nimport { CursorRespBody as json_CursorRespBody } from \"./json_decode.js\";\nimport { CursorRespBody as protobuf_CursorRespBody } from \"./protobuf_decode.js\";\nimport { CursorEntry as json_CursorEntry } from \"../shared/json_decode.js\";\nimport { CursorEntry as protobuf_CursorEntry } from \"../shared/protobuf_decode.js\";\nexport class HttpCursor extends Cursor {\n    #stream;\n    #encoding;\n    #reader;\n    #queue;\n    #closed;\n    #done;\n    /** @private */\n    constructor(stream, encoding) {\n        super();\n        this.#stream = stream;\n        this.#encoding = encoding;\n        this.#reader = undefined;\n        this.#queue = new ByteQueue(16 * 1024);\n        this.#closed = undefined;\n        this.#done = false;\n    }\n    async open(response) {\n        if (response.body === null) {\n            throw new ProtoError(\"No response body for cursor request\");\n        }\n        this.#reader = response.body.getReader();\n        const respBody = await this.#nextItem(json_CursorRespBody, protobuf_CursorRespBody);\n        if (respBody === undefined) {\n            throw new ProtoError(\"Empty response to cursor request\");\n        }\n        return respBody;\n    }\n    /** Fetch the next entry from the cursor. */\n    next() {\n        return this.#nextItem(json_CursorEntry, protobuf_CursorEntry);\n    }\n    /** Close the cursor. */\n    close() {\n        this._setClosed(new ClientError(\"Cursor was manually closed\"));\n    }\n    /** @private */\n    _setClosed(error) {\n        if (this.#closed !== undefined) {\n            return;\n        }\n        this.#closed = error;\n        this.#stream._cursorClosed(this);\n        if (this.#reader !== undefined) {\n            this.#reader.cancel();\n        }\n    }\n    /** True if the cursor is closed. */\n    get closed() {\n        return this.#closed !== undefined;\n    }\n    async #nextItem(jsonFun, protobufDef) {\n        for (;;) {\n            if (this.#done) {\n                return undefined;\n            }\n            else if (this.#closed !== undefined) {\n                throw new ClosedError(\"Cursor is closed\", this.#closed);\n            }\n            if (this.#encoding === \"json\") {\n                const jsonData = this.#parseItemJson();\n                if (jsonData !== undefined) {\n                    const jsonText = new TextDecoder().decode(jsonData);\n                    const jsonValue = JSON.parse(jsonText);\n                    return jsond.readJsonObject(jsonValue, jsonFun);\n                }\n            }\n            else if (this.#encoding === \"protobuf\") {\n                const protobufData = this.#parseItemProtobuf();\n                if (protobufData !== undefined) {\n                    return protobufd.readProtobufMessage(protobufData, protobufDef);\n                }\n            }\n            else {\n                throw impossible(this.#encoding, \"Impossible encoding\");\n            }\n            if (this.#reader === undefined) {\n                throw new InternalError(\"Attempted to read from HTTP cursor before it was opened\");\n            }\n            const { value, done } = await this.#reader.read();\n            if (done && this.#queue.length === 0) {\n                this.#done = true;\n            }\n            else if (done) {\n                throw new ProtoError(\"Unexpected end of cursor stream\");\n            }\n            else {\n                this.#queue.push(value);\n            }\n        }\n    }\n    #parseItemJson() {\n        const data = this.#queue.data();\n        const newlineByte = 10;\n        const newlinePos = data.indexOf(newlineByte);\n        if (newlinePos < 0) {\n            return undefined;\n        }\n        const jsonData = data.slice(0, newlinePos);\n        this.#queue.shift(newlinePos + 1);\n        return jsonData;\n    }\n    #parseItemProtobuf() {\n        const data = this.#queue.data();\n        let varintValue = 0;\n        let varintLength = 0;\n        for (;;) {\n            if (varintLength >= data.byteLength) {\n                return undefined;\n            }\n            const byte = data[varintLength];\n            varintValue |= (byte & 0x7f) << (7 * varintLength);\n            varintLength += 1;\n            if (!(byte & 0x80)) {\n                break;\n            }\n        }\n        if (data.byteLength < varintLength + varintValue) {\n            return undefined;\n        }\n        const protobufData = data.slice(varintLength, varintLength + varintValue);\n        this.#queue.shift(varintLength + varintValue);\n        return protobufData;\n    }\n}\n", "export class ByteQueue {\n    #array;\n    #shiftPos;\n    #pushPos;\n    constructor(initialCap) {\n        this.#array = new Uint8Array(new ArrayBuffer(initialCap));\n        this.#shiftPos = 0;\n        this.#pushPos = 0;\n    }\n    get length() {\n        return this.#pushPos - this.#shiftPos;\n    }\n    data() {\n        return this.#array.slice(this.#shiftPos, this.#pushPos);\n    }\n    push(chunk) {\n        this.#ensurePush(chunk.byteLength);\n        this.#array.set(chunk, this.#pushPos);\n        this.#pushPos += chunk.byteLength;\n    }\n    #ensurePush(pushLength) {\n        if (this.#pushPos + pushLength <= this.#array.byteLength) {\n            return;\n        }\n        const filledLength = this.#pushPos - this.#shiftPos;\n        if (filledLength + pushLength <= this.#array.byteLength &&\n            2 * this.#pushPos >= this.#array.byteLength) {\n            this.#array.copyWithin(0, this.#shiftPos, this.#pushPos);\n        }\n        else {\n            let newCap = this.#array.byteLength;\n            do {\n                newCap *= 2;\n            } while (filledLength + pushLength > newCap);\n            const newArray = new Uint8Array(new ArrayBuffer(newCap));\n            newArray.set(this.#array.slice(this.#shiftPos, this.#pushPos), 0);\n            this.#array = newArray;\n        }\n        this.#pushPos = filledLength;\n        this.#shiftPos = 0;\n    }\n    shift(length) {\n        this.#shiftPos += length;\n    }\n}\n", "import { ProtoError } from \"../errors.js\";\nimport * as d from \"../encoding/json/decode.js\";\nimport { Error, StmtResult, BatchResult, DescribeResult } from \"../shared/json_decode.js\";\nexport function PipelineRespBody(obj) {\n    const baton = d.stringOpt(obj[\"baton\"]);\n    const baseUrl = d.stringOpt(obj[\"base_url\"]);\n    const results = d.arrayObjectsMap(obj[\"results\"], StreamResult);\n    return { baton, baseUrl, results };\n}\nfunction StreamResult(obj) {\n    const type = d.string(obj[\"type\"]);\n    if (type === \"ok\") {\n        const response = StreamResponse(d.object(obj[\"response\"]));\n        return { type: \"ok\", response };\n    }\n    else if (type === \"error\") {\n        const error = Error(d.object(obj[\"error\"]));\n        return { type: \"error\", error };\n    }\n    else {\n        throw new ProtoError(\"Unexpected type of StreamResult\");\n    }\n}\nfunction StreamResponse(obj) {\n    const type = d.string(obj[\"type\"]);\n    if (type === \"close\") {\n        return { type: \"close\" };\n    }\n    else if (type === \"execute\") {\n        const result = StmtResult(d.object(obj[\"result\"]));\n        return { type: \"execute\", result };\n    }\n    else if (type === \"batch\") {\n        const result = BatchResult(d.object(obj[\"result\"]));\n        return { type: \"batch\", result };\n    }\n    else if (type === \"sequence\") {\n        return { type: \"sequence\" };\n    }\n    else if (type === \"describe\") {\n        const result = DescribeResult(d.object(obj[\"result\"]));\n        return { type: \"describe\", result };\n    }\n    else if (type === \"store_sql\") {\n        return { type: \"store_sql\" };\n    }\n    else if (type === \"close_sql\") {\n        return { type: \"close_sql\" };\n    }\n    else if (type === \"get_autocommit\") {\n        const isAutocommit = d.boolean(obj[\"is_autocommit\"]);\n        return { type: \"get_autocommit\", isAutocommit };\n    }\n    else {\n        throw new ProtoError(\"Unexpected type of StreamResponse\");\n    }\n}\nexport function CursorRespBody(obj) {\n    const baton = d.stringOpt(obj[\"baton\"]);\n    const baseUrl = d.stringOpt(obj[\"base_url\"]);\n    return { baton, baseUrl };\n}\n", "import { Error, StmtResult, BatchResult, DescribeResult } from \"../shared/protobuf_decode.js\";\nexport const PipelineRespBody = {\n    default() { return { baton: undefined, baseUrl: undefined, results: [] }; },\n    1(r, msg) { msg.baton = r.string(); },\n    2(r, msg) { msg.baseUrl = r.string(); },\n    3(r, msg) { msg.results.push(r.message(StreamResult)); },\n};\nconst StreamResult = {\n    default() { return { type: \"none\" }; },\n    1(r) { return { type: \"ok\", response: r.message(StreamResponse) }; },\n    2(r) { return { type: \"error\", error: r.message(Error) }; },\n};\nconst StreamResponse = {\n    default() { return { type: \"none\" }; },\n    1(r) { return { type: \"close\" }; },\n    2(r) { return r.message(ExecuteStreamResp); },\n    3(r) { return r.message(BatchStreamResp); },\n    4(r) { return { type: \"sequence\" }; },\n    5(r) { return r.message(DescribeStreamResp); },\n    6(r) { return { type: \"store_sql\" }; },\n    7(r) { return { type: \"close_sql\" }; },\n    8(r) { return r.message(GetAutocommitStreamResp); },\n};\nconst ExecuteStreamResp = {\n    default() { return { type: \"execute\", result: StmtResult.default() }; },\n    1(r, msg) { msg.result = r.message(StmtResult); },\n};\nconst BatchStreamResp = {\n    default() { return { type: \"batch\", result: BatchResult.default() }; },\n    1(r, msg) { msg.result = r.message(BatchResult); },\n};\nconst DescribeStreamResp = {\n    default() { return { type: \"describe\", result: DescribeResult.default() }; },\n    1(r, msg) { msg.result = r.message(DescribeResult); },\n};\nconst GetAutocommitStreamResp = {\n    default() { return { type: \"get_autocommit\", isAutocommit: false }; },\n    1(r, msg) { msg.isAutocommit = r.bool(); },\n};\nexport const CursorRespBody = {\n    default() { return { baton: undefined, baseUrl: undefined }; },\n    1(r, msg) { msg.baton = r.string(); },\n    2(r, msg) { msg.baseUrl = r.string(); },\n};\n", "import { Stmt, Batch } from \"../shared/json_encode.js\";\nimport { impossible } from \"../util.js\";\nexport function PipelineReqBody(w, msg) {\n    if (msg.baton !== undefined) {\n        w.string(\"baton\", msg.baton);\n    }\n    w.arrayObjects(\"requests\", msg.requests, StreamRequest);\n}\nfunction StreamRequest(w, msg) {\n    w.stringRaw(\"type\", msg.type);\n    if (msg.type === \"close\") {\n        // do nothing\n    }\n    else if (msg.type === \"execute\") {\n        w.object(\"stmt\", msg.stmt, Stmt);\n    }\n    else if (msg.type === \"batch\") {\n        w.object(\"batch\", msg.batch, Batch);\n    }\n    else if (msg.type === \"sequence\") {\n        if (msg.sql !== undefined) {\n            w.string(\"sql\", msg.sql);\n        }\n        if (msg.sqlId !== undefined) {\n            w.number(\"sql_id\", msg.sqlId);\n        }\n    }\n    else if (msg.type === \"describe\") {\n        if (msg.sql !== undefined) {\n            w.string(\"sql\", msg.sql);\n        }\n        if (msg.sqlId !== undefined) {\n            w.number(\"sql_id\", msg.sqlId);\n        }\n    }\n    else if (msg.type === \"store_sql\") {\n        w.number(\"sql_id\", msg.sqlId);\n        w.string(\"sql\", msg.sql);\n    }\n    else if (msg.type === \"close_sql\") {\n        w.number(\"sql_id\", msg.sqlId);\n    }\n    else if (msg.type === \"get_autocommit\") {\n        // do nothing\n    }\n    else {\n        throw impossible(msg, \"Impossible type of StreamRequest\");\n    }\n}\nexport function CursorReqBody(w, msg) {\n    if (msg.baton !== undefined) {\n        w.string(\"baton\", msg.baton);\n    }\n    w.object(\"batch\", msg.batch, Batch);\n}\n", "import { Stmt, Batch } from \"../shared/protobuf_encode.js\";\nimport { impossible } from \"../util.js\";\nexport function PipelineReqBody(w, msg) {\n    if (msg.baton !== undefined) {\n        w.string(1, msg.baton);\n    }\n    for (const req of msg.requests) {\n        w.message(2, req, StreamRequest);\n    }\n}\nfunction StreamRequest(w, msg) {\n    if (msg.type === \"close\") {\n        w.message(1, msg, CloseStreamReq);\n    }\n    else if (msg.type === \"execute\") {\n        w.message(2, msg, ExecuteStreamReq);\n    }\n    else if (msg.type === \"batch\") {\n        w.message(3, msg, BatchStreamReq);\n    }\n    else if (msg.type === \"sequence\") {\n        w.message(4, msg, SequenceStreamReq);\n    }\n    else if (msg.type === \"describe\") {\n        w.message(5, msg, DescribeStreamReq);\n    }\n    else if (msg.type === \"store_sql\") {\n        w.message(6, msg, StoreSqlStreamReq);\n    }\n    else if (msg.type === \"close_sql\") {\n        w.message(7, msg, CloseSqlStreamReq);\n    }\n    else if (msg.type === \"get_autocommit\") {\n        w.message(8, msg, GetAutocommitStreamReq);\n    }\n    else {\n        throw impossible(msg, \"Impossible type of StreamRequest\");\n    }\n}\nfunction CloseStreamReq(_w, _msg) {\n}\nfunction ExecuteStreamReq(w, msg) {\n    w.message(1, msg.stmt, Stmt);\n}\nfunction BatchStreamReq(w, msg) {\n    w.message(1, msg.batch, Batch);\n}\nfunction SequenceStreamReq(w, msg) {\n    if (msg.sql !== undefined) {\n        w.string(1, msg.sql);\n    }\n    if (msg.sqlId !== undefined) {\n        w.int32(2, msg.sqlId);\n    }\n}\nfunction DescribeStreamReq(w, msg) {\n    if (msg.sql !== undefined) {\n        w.string(1, msg.sql);\n    }\n    if (msg.sqlId !== undefined) {\n        w.int32(2, msg.sqlId);\n    }\n}\nfunction StoreSqlStreamReq(w, msg) {\n    w.int32(1, msg.sqlId);\n    w.string(2, msg.sql);\n}\nfunction CloseSqlStreamReq(w, msg) {\n    w.int32(1, msg.sqlId);\n}\nfunction GetAutocommitStreamReq(_w, _msg) {\n}\nexport function CursorReqBody(w, msg) {\n    if (msg.baton !== undefined) {\n        w.string(1, msg.baton);\n    }\n    w.message(2, msg.batch, Batch);\n}\n", "import { LibsqlUrlParseError } from \"./errors.js\";\n;\n/** Parses a URL compatible with the libsql client (`@libsql/client`). This URL may have the \"libsql:\" scheme\n * and may contain query parameters. */\nexport function parseLibsqlUrl(urlStr) {\n    const url = new URL(urlStr);\n    let authToken = undefined;\n    let tls = undefined;\n    for (const [key, value] of url.searchParams.entries()) {\n        if (key === \"authToken\") {\n            authToken = value;\n        }\n        else if (key === \"tls\") {\n            if (value === \"0\") {\n                tls = false;\n            }\n            else if (value === \"1\") {\n                tls = true;\n            }\n            else {\n                throw new LibsqlUrlParseError(`Unknown value for the \"tls\" query argument: ${JSON.stringify(value)}`);\n            }\n        }\n        else {\n            throw new LibsqlUrlParseError(`Unknown URL query argument ${JSON.stringify(key)}`);\n        }\n    }\n    let hranaWsScheme;\n    let hranaHttpScheme;\n    if ((url.protocol === \"http:\" || url.protocol === \"ws:\") && (tls === true)) {\n        throw new LibsqlUrlParseError(`A ${JSON.stringify(url.protocol)} URL cannot opt into TLS using ?tls=1`);\n    }\n    else if ((url.protocol === \"https:\" || url.protocol === \"wss:\") && (tls === false)) {\n        throw new LibsqlUrlParseError(`A ${JSON.stringify(url.protocol)} URL cannot opt out of TLS using ?tls=0`);\n    }\n    if (url.protocol === \"http:\" || url.protocol === \"https:\") {\n        hranaHttpScheme = url.protocol;\n    }\n    else if (url.protocol === \"ws:\" || url.protocol === \"wss:\") {\n        hranaWsScheme = url.protocol;\n    }\n    else if (url.protocol === \"libsql:\") {\n        if (tls === false) {\n            if (!url.port) {\n                throw new LibsqlUrlParseError(`A \"libsql:\" URL with ?tls=0 must specify an explicit port`);\n            }\n            hranaHttpScheme = \"http:\";\n            hranaWsScheme = \"ws:\";\n        }\n        else {\n            hranaHttpScheme = \"https:\";\n            hranaWsScheme = \"wss:\";\n        }\n    }\n    else {\n        throw new LibsqlUrlParseError(`This client does not support ${JSON.stringify(url.protocol)} URLs. ` +\n            'Please use a \"libsql:\", \"ws:\", \"wss:\", \"http:\" or \"https:\" URL instead.');\n    }\n    if (url.username || url.password) {\n        throw new LibsqlUrlParseError(\"This client does not support HTTP Basic authentication with a username and password. \" +\n            'You can authenticate using a token passed in the \"authToken\" URL query parameter.');\n    }\n    if (url.hash) {\n        throw new LibsqlUrlParseError(\"URL fragments are not supported\");\n    }\n    let hranaPath = url.pathname;\n    if (hranaPath === \"/\") {\n        hranaPath = \"\";\n    }\n    const hranaWsUrl = hranaWsScheme !== undefined\n        ? `${hranaWsScheme}//${url.host}${hranaPath}` : undefined;\n    const hranaHttpUrl = hranaHttpScheme !== undefined\n        ? `${hranaHttpScheme}//${url.host}${hranaPath}` : undefined;\n    return { hranaWsUrl, hranaHttpUrl, authToken };\n}\n", "import * as hrana from \"@libsql/hrana-client\";\nimport { LibsqlError } from \"@libsql/core/api\";\nimport { transactionModeToBegin, ResultSetImpl } from \"@libsql/core/util\";\nexport class HranaTransaction {\n    #mode;\n    #version;\n    // Promise that is resolved when the BEGIN statement completes, or `undefined` if we haven't executed the\n    // BEGIN statement yet.\n    #started;\n    /** @private */\n    constructor(mode, version) {\n        this.#mode = mode;\n        this.#version = version;\n        this.#started = undefined;\n    }\n    execute(stmt) {\n        return this.batch([stmt]).then((results) => results[0]);\n    }\n    async batch(stmts) {\n        const stream = this._getStream();\n        if (stream.closed) {\n            throw new LibsqlError(\"Cannot execute statements because the transaction is closed\", \"TRANSACTION_CLOSED\");\n        }\n        try {\n            const hranaStmts = stmts.map(stmtToHrana);\n            let rowsPromises;\n            if (this.#started === undefined) {\n                // The transaction hasn't started yet, so we need to send the BEGIN statement in a batch with\n                // `hranaStmts`.\n                this._getSqlCache().apply(hranaStmts);\n                const batch = stream.batch(this.#version >= 3);\n                const beginStep = batch.step();\n                const beginPromise = beginStep.run(transactionModeToBegin(this.#mode));\n                // Execute the `hranaStmts` only if the BEGIN succeeded, to make sure that we don't execute it\n                // outside of a transaction.\n                let lastStep = beginStep;\n                rowsPromises = hranaStmts.map((hranaStmt) => {\n                    const stmtStep = batch\n                        .step()\n                        .condition(hrana.BatchCond.ok(lastStep));\n                    if (this.#version >= 3) {\n                        // If the Hrana version supports it, make sure that we are still in a transaction\n                        stmtStep.condition(hrana.BatchCond.not(hrana.BatchCond.isAutocommit(batch)));\n                    }\n                    const rowsPromise = stmtStep.query(hranaStmt);\n                    rowsPromise.catch(() => undefined); // silence Node warning\n                    lastStep = stmtStep;\n                    return rowsPromise;\n                });\n                // `this.#started` is resolved successfully only if the batch and the BEGIN statement inside\n                // of the batch are both successful.\n                this.#started = batch\n                    .execute()\n                    .then(() => beginPromise)\n                    .then(() => undefined);\n                try {\n                    await this.#started;\n                }\n                catch (e) {\n                    // If the BEGIN failed, the transaction is unusable and we must close it. However, if the\n                    // BEGIN suceeds and `hranaStmts` fail, the transaction is _not_ closed.\n                    this.close();\n                    throw e;\n                }\n            }\n            else {\n                if (this.#version < 3) {\n                    // The transaction has started, so we must wait until the BEGIN statement completed to make\n                    // sure that we don't execute `hranaStmts` outside of a transaction.\n                    await this.#started;\n                }\n                else {\n                    // The transaction has started, but we will use `hrana.BatchCond.isAutocommit()` to make\n                    // sure that we don't execute `hranaStmts` outside of a transaction, so we don't have to\n                    // wait for `this.#started`\n                }\n                this._getSqlCache().apply(hranaStmts);\n                const batch = stream.batch(this.#version >= 3);\n                let lastStep = undefined;\n                rowsPromises = hranaStmts.map((hranaStmt) => {\n                    const stmtStep = batch.step();\n                    if (lastStep !== undefined) {\n                        stmtStep.condition(hrana.BatchCond.ok(lastStep));\n                    }\n                    if (this.#version >= 3) {\n                        stmtStep.condition(hrana.BatchCond.not(hrana.BatchCond.isAutocommit(batch)));\n                    }\n                    const rowsPromise = stmtStep.query(hranaStmt);\n                    rowsPromise.catch(() => undefined); // silence Node warning\n                    lastStep = stmtStep;\n                    return rowsPromise;\n                });\n                await batch.execute();\n            }\n            const resultSets = [];\n            for (const rowsPromise of rowsPromises) {\n                const rows = await rowsPromise;\n                if (rows === undefined) {\n                    throw new LibsqlError(\"Statement in a transaction was not executed, \" +\n                        \"probably because the transaction has been rolled back\", \"TRANSACTION_CLOSED\");\n                }\n                resultSets.push(resultSetFromHrana(rows));\n            }\n            return resultSets;\n        }\n        catch (e) {\n            throw mapHranaError(e);\n        }\n    }\n    async executeMultiple(sql) {\n        const stream = this._getStream();\n        if (stream.closed) {\n            throw new LibsqlError(\"Cannot execute statements because the transaction is closed\", \"TRANSACTION_CLOSED\");\n        }\n        try {\n            if (this.#started === undefined) {\n                // If the transaction hasn't started yet, start it now\n                this.#started = stream\n                    .run(transactionModeToBegin(this.#mode))\n                    .then(() => undefined);\n                try {\n                    await this.#started;\n                }\n                catch (e) {\n                    this.close();\n                    throw e;\n                }\n            }\n            else {\n                // Wait until the transaction has started\n                await this.#started;\n            }\n            await stream.sequence(sql);\n        }\n        catch (e) {\n            throw mapHranaError(e);\n        }\n    }\n    async rollback() {\n        try {\n            const stream = this._getStream();\n            if (stream.closed) {\n                return;\n            }\n            if (this.#started !== undefined) {\n                // We don't have to wait for the BEGIN statement to complete. If the BEGIN fails, we will\n                // execute a ROLLBACK outside of an active transaction, which should be harmless.\n            }\n            else {\n                // We did nothing in the transaction, so there is nothing to rollback.\n                return;\n            }\n            // Pipeline the ROLLBACK statement and the stream close.\n            const promise = stream.run(\"ROLLBACK\").catch((e) => {\n                throw mapHranaError(e);\n            });\n            stream.closeGracefully();\n            await promise;\n        }\n        catch (e) {\n            throw mapHranaError(e);\n        }\n        finally {\n            // `this.close()` may close the `hrana.Client`, which aborts all pending stream requests, so we\n            // must call it _after_ we receive the ROLLBACK response.\n            // Also note that the current stream should already be closed, but we need to call `this.close()`\n            // anyway, because it may need to do more cleanup.\n            this.close();\n        }\n    }\n    async commit() {\n        // (this method is analogous to `rollback()`)\n        try {\n            const stream = this._getStream();\n            if (stream.closed) {\n                throw new LibsqlError(\"Cannot commit the transaction because it is already closed\", \"TRANSACTION_CLOSED\");\n            }\n            if (this.#started !== undefined) {\n                // Make sure to execute the COMMIT only if the BEGIN was successful.\n                await this.#started;\n            }\n            else {\n                return;\n            }\n            const promise = stream.run(\"COMMIT\").catch((e) => {\n                throw mapHranaError(e);\n            });\n            stream.closeGracefully();\n            await promise;\n        }\n        catch (e) {\n            throw mapHranaError(e);\n        }\n        finally {\n            this.close();\n        }\n    }\n}\nexport async function executeHranaBatch(mode, version, batch, hranaStmts, disableForeignKeys = false) {\n    if (disableForeignKeys) {\n        batch.step().run(\"PRAGMA foreign_keys=off\");\n    }\n    const beginStep = batch.step();\n    const beginPromise = beginStep.run(transactionModeToBegin(mode));\n    let lastStep = beginStep;\n    const stmtPromises = hranaStmts.map((hranaStmt) => {\n        const stmtStep = batch.step().condition(hrana.BatchCond.ok(lastStep));\n        if (version >= 3) {\n            stmtStep.condition(hrana.BatchCond.not(hrana.BatchCond.isAutocommit(batch)));\n        }\n        const stmtPromise = stmtStep.query(hranaStmt);\n        lastStep = stmtStep;\n        return stmtPromise;\n    });\n    const commitStep = batch.step().condition(hrana.BatchCond.ok(lastStep));\n    if (version >= 3) {\n        commitStep.condition(hrana.BatchCond.not(hrana.BatchCond.isAutocommit(batch)));\n    }\n    const commitPromise = commitStep.run(\"COMMIT\");\n    const rollbackStep = batch\n        .step()\n        .condition(hrana.BatchCond.not(hrana.BatchCond.ok(commitStep)));\n    rollbackStep.run(\"ROLLBACK\").catch((_) => undefined);\n    if (disableForeignKeys) {\n        batch.step().run(\"PRAGMA foreign_keys=on\");\n    }\n    await batch.execute();\n    const resultSets = [];\n    await beginPromise;\n    for (const stmtPromise of stmtPromises) {\n        const hranaRows = await stmtPromise;\n        if (hranaRows === undefined) {\n            throw new LibsqlError(\"Statement in a batch was not executed, probably because the transaction has been rolled back\", \"TRANSACTION_CLOSED\");\n        }\n        resultSets.push(resultSetFromHrana(hranaRows));\n    }\n    await commitPromise;\n    return resultSets;\n}\nexport function stmtToHrana(stmt) {\n    let sql;\n    let args;\n    if (Array.isArray(stmt)) {\n        [sql, args] = stmt;\n    }\n    else if (typeof stmt === \"string\") {\n        sql = stmt;\n    }\n    else {\n        sql = stmt.sql;\n        args = stmt.args;\n    }\n    const hranaStmt = new hrana.Stmt(sql);\n    if (args) {\n        if (Array.isArray(args)) {\n            hranaStmt.bindIndexes(args);\n        }\n        else {\n            for (const [key, value] of Object.entries(args)) {\n                hranaStmt.bindName(key, value);\n            }\n        }\n    }\n    return hranaStmt;\n}\nexport function resultSetFromHrana(hranaRows) {\n    const columns = hranaRows.columnNames.map((c) => c ?? \"\");\n    const columnTypes = hranaRows.columnDecltypes.map((c) => c ?? \"\");\n    const rows = hranaRows.rows;\n    const rowsAffected = hranaRows.affectedRowCount;\n    const lastInsertRowid = hranaRows.lastInsertRowid !== undefined\n        ? hranaRows.lastInsertRowid\n        : undefined;\n    return new ResultSetImpl(columns, columnTypes, rows, rowsAffected, lastInsertRowid);\n}\nexport function mapHranaError(e) {\n    if (e instanceof hrana.ClientError) {\n        const code = mapHranaErrorCode(e);\n        return new LibsqlError(e.message, code, undefined, e);\n    }\n    return e;\n}\nfunction mapHranaErrorCode(e) {\n    if (e instanceof hrana.ResponseError && e.code !== undefined) {\n        return e.code;\n    }\n    else if (e instanceof hrana.ProtoError) {\n        return \"HRANA_PROTO_ERROR\";\n    }\n    else if (e instanceof hrana.ClosedError) {\n        return e.cause instanceof hrana.ClientError\n            ? mapHranaErrorCode(e.cause)\n            : \"HRANA_CLOSED_ERROR\";\n    }\n    else if (e instanceof hrana.WebSocketError) {\n        return \"HRANA_WEBSOCKET_ERROR\";\n    }\n    else if (e instanceof hrana.HttpServerError) {\n        return \"SERVER_ERROR\";\n    }\n    else if (e instanceof hrana.ProtocolVersionError) {\n        return \"PROTOCOL_VERSION_ERROR\";\n    }\n    else if (e instanceof hrana.InternalError) {\n        return \"INTERNAL_ERROR\";\n    }\n    else {\n        return \"UNKNOWN\";\n    }\n}\n", "export class SqlCache {\n    #owner;\n    #sqls;\n    capacity;\n    constructor(owner, capacity) {\n        this.#owner = owner;\n        this.#sqls = new Lru();\n        this.capacity = capacity;\n    }\n    // Replaces SQL strings with cached `hrana.Sql` objects in the statements in `hranaStmts`. After this\n    // function returns, we guarantee that all `hranaStmts` refer to valid (not closed) `hrana.Sql` objects,\n    // but _we may invalidate any other `hrana.Sql` objects_ (by closing them, thus removing them from the\n    // server).\n    //\n    // In practice, this means that after calling this function, you can use the statements only up to the\n    // first `await`, because concurrent code may also use the cache and invalidate those statements.\n    apply(hranaStmts) {\n        if (this.capacity <= 0) {\n            return;\n        }\n        const usedSqlObjs = new Set();\n        for (const hranaStmt of hranaStmts) {\n            if (typeof hranaStmt.sql !== \"string\") {\n                continue;\n            }\n            const sqlText = hranaStmt.sql;\n            // Stored SQL cannot exceed 5kb.\n            // https://github.com/tursodatabase/libsql/blob/e9d637e051685f92b0da43849507b5ef4232fbeb/libsql-server/src/hrana/http/request.rs#L10\n            if (sqlText.length >= 5000) {\n                continue;\n            }\n            let sqlObj = this.#sqls.get(sqlText);\n            if (sqlObj === undefined) {\n                while (this.#sqls.size + 1 > this.capacity) {\n                    const [evictSqlText, evictSqlObj] = this.#sqls.peekLru();\n                    if (usedSqlObjs.has(evictSqlObj)) {\n                        // The SQL object that we are trying to evict is already in use in this batch, so we\n                        // must not evict and close it.\n                        break;\n                    }\n                    evictSqlObj.close();\n                    this.#sqls.delete(evictSqlText);\n                }\n                if (this.#sqls.size + 1 <= this.capacity) {\n                    sqlObj = this.#owner.storeSql(sqlText);\n                    this.#sqls.set(sqlText, sqlObj);\n                }\n            }\n            if (sqlObj !== undefined) {\n                hranaStmt.sql = sqlObj;\n                usedSqlObjs.add(sqlObj);\n            }\n        }\n    }\n}\nclass Lru {\n    // This maps keys to the cache values. The entries are ordered by their last use (entires that were used\n    // most recently are at the end).\n    #cache;\n    constructor() {\n        this.#cache = new Map();\n    }\n    get(key) {\n        const value = this.#cache.get(key);\n        if (value !== undefined) {\n            // move the entry to the back of the Map\n            this.#cache.delete(key);\n            this.#cache.set(key, value);\n        }\n        return value;\n    }\n    set(key, value) {\n        this.#cache.set(key, value);\n    }\n    peekLru() {\n        for (const entry of this.#cache.entries()) {\n            return entry;\n        }\n        return undefined;\n    }\n    delete(key) {\n        this.#cache.delete(key);\n    }\n    get size() {\n        return this.#cache.size;\n    }\n}\n", "import * as hrana from \"@libsql/hrana-client\";\nimport { LibsqlError } from \"@libsql/core/api\";\nimport { expandConfig } from \"@libsql/core/config\";\nimport { HranaTransaction, executeHranaBatch, stmtToHrana, resultSetFromHrana, mapHranaError, } from \"./hrana.js\";\nimport { SqlCache } from \"./sql_cache.js\";\nimport { encodeBaseUrl } from \"@libsql/core/uri\";\nimport { supportedUrlLink } from \"@libsql/core/util\";\nimport promiseLimit from \"promise-limit\";\nexport * from \"@libsql/core/api\";\nexport function createClient(config) {\n    return _createClient(expandConfig(config, true));\n}\n/** @private */\nexport function _createClient(config) {\n    if (config.scheme !== \"https\" && config.scheme !== \"http\") {\n        throw new LibsqlError('The HTTP client supports only \"libsql:\", \"https:\" and \"http:\" URLs, ' +\n            `got ${JSON.stringify(config.scheme + \":\")}. For more information, please read ${supportedUrlLink}`, \"URL_SCHEME_NOT_SUPPORTED\");\n    }\n    if (config.encryptionKey !== undefined) {\n        throw new LibsqlError(\"Encryption key is not supported by the remote client.\", \"ENCRYPTION_KEY_NOT_SUPPORTED\");\n    }\n    if (config.scheme === \"http\" && config.tls) {\n        throw new LibsqlError(`A \"http:\" URL cannot opt into TLS by using ?tls=1`, \"URL_INVALID\");\n    }\n    else if (config.scheme === \"https\" && !config.tls) {\n        throw new LibsqlError(`A \"https:\" URL cannot opt out of TLS by using ?tls=0`, \"URL_INVALID\");\n    }\n    const url = encodeBaseUrl(config.scheme, config.authority, config.path);\n    return new HttpClient(url, config.authToken, config.intMode, config.fetch, config.concurrency);\n}\nconst sqlCacheCapacity = 30;\nexport class HttpClient {\n    #client;\n    protocol;\n    #authToken;\n    #promiseLimitFunction;\n    /** @private */\n    constructor(url, authToken, intMode, customFetch, concurrency) {\n        this.#client = hrana.openHttp(url, authToken, customFetch);\n        this.#client.intMode = intMode;\n        this.protocol = \"http\";\n        this.#authToken = authToken;\n        this.#promiseLimitFunction = promiseLimit(concurrency);\n    }\n    async limit(fn) {\n        return this.#promiseLimitFunction(fn);\n    }\n    async execute(stmtOrSql, args) {\n        let stmt;\n        if (typeof stmtOrSql === \"string\") {\n            stmt = {\n                sql: stmtOrSql,\n                args: args || [],\n            };\n        }\n        else {\n            stmt = stmtOrSql;\n        }\n        return this.limit(async () => {\n            try {\n                const hranaStmt = stmtToHrana(stmt);\n                // Pipeline all operations, so `hrana.HttpClient` can open the stream, execute the statement and\n                // close the stream in a single HTTP request.\n                let rowsPromise;\n                const stream = this.#client.openStream();\n                try {\n                    rowsPromise = stream.query(hranaStmt);\n                }\n                finally {\n                    stream.closeGracefully();\n                }\n                const rowsResult = await rowsPromise;\n                return resultSetFromHrana(rowsResult);\n            }\n            catch (e) {\n                throw mapHranaError(e);\n            }\n        });\n    }\n    async batch(stmts, mode = \"deferred\") {\n        return this.limit(async () => {\n            try {\n                const normalizedStmts = stmts.map((stmt) => {\n                    if (Array.isArray(stmt)) {\n                        return {\n                            sql: stmt[0],\n                            args: stmt[1] || [],\n                        };\n                    }\n                    return stmt;\n                });\n                const hranaStmts = normalizedStmts.map(stmtToHrana);\n                const version = await this.#client.getVersion();\n                // Pipeline all operations, so `hrana.HttpClient` can open the stream, execute the batch and\n                // close the stream in a single HTTP request.\n                let resultsPromise;\n                const stream = this.#client.openStream();\n                try {\n                    // It makes sense to use a SQL cache even for a single batch, because it may contain the same\n                    // statement repeated multiple times.\n                    const sqlCache = new SqlCache(stream, sqlCacheCapacity);\n                    sqlCache.apply(hranaStmts);\n                    // TODO: we do not use a cursor here, because it would cause three roundtrips:\n                    // 1. pipeline request to store SQL texts\n                    // 2. cursor request\n                    // 3. pipeline request to close the stream\n                    const batch = stream.batch(false);\n                    resultsPromise = executeHranaBatch(mode, version, batch, hranaStmts);\n                }\n                finally {\n                    stream.closeGracefully();\n                }\n                const results = await resultsPromise;\n                return results;\n            }\n            catch (e) {\n                throw mapHranaError(e);\n            }\n        });\n    }\n    async migrate(stmts) {\n        return this.limit(async () => {\n            try {\n                const hranaStmts = stmts.map(stmtToHrana);\n                const version = await this.#client.getVersion();\n                // Pipeline all operations, so `hrana.HttpClient` can open the stream, execute the batch and\n                // close the stream in a single HTTP request.\n                let resultsPromise;\n                const stream = this.#client.openStream();\n                try {\n                    const batch = stream.batch(false);\n                    resultsPromise = executeHranaBatch(\"deferred\", version, batch, hranaStmts, true);\n                }\n                finally {\n                    stream.closeGracefully();\n                }\n                const results = await resultsPromise;\n                return results;\n            }\n            catch (e) {\n                throw mapHranaError(e);\n            }\n        });\n    }\n    async transaction(mode = \"write\") {\n        return this.limit(async () => {\n            try {\n                const version = await this.#client.getVersion();\n                return new HttpTransaction(this.#client.openStream(), mode, version);\n            }\n            catch (e) {\n                throw mapHranaError(e);\n            }\n        });\n    }\n    async executeMultiple(sql) {\n        return this.limit(async () => {\n            try {\n                // Pipeline all operations, so `hrana.HttpClient` can open the stream, execute the sequence and\n                // close the stream in a single HTTP request.\n                let promise;\n                const stream = this.#client.openStream();\n                try {\n                    promise = stream.sequence(sql);\n                }\n                finally {\n                    stream.closeGracefully();\n                }\n                await promise;\n            }\n            catch (e) {\n                throw mapHranaError(e);\n            }\n        });\n    }\n    sync() {\n        throw new LibsqlError(\"sync not supported in http mode\", \"SYNC_NOT_SUPPORTED\");\n    }\n    close() {\n        this.#client.close();\n    }\n    get closed() {\n        return this.#client.closed;\n    }\n}\nexport class HttpTransaction extends HranaTransaction {\n    #stream;\n    #sqlCache;\n    /** @private */\n    constructor(stream, mode, version) {\n        super(mode, version);\n        this.#stream = stream;\n        this.#sqlCache = new SqlCache(stream, sqlCacheCapacity);\n    }\n    /** @private */\n    _getStream() {\n        return this.#stream;\n    }\n    /** @private */\n    _getSqlCache() {\n        return this.#sqlCache;\n    }\n    close() {\n        this.#stream.close();\n    }\n    get closed() {\n        return this.#stream.closed;\n    }\n}\n", "import { type Client, type Config, createClient } from '@libsql/client';\nimport { type DrizzleConfig, isConfig } from '~/utils.ts';\nimport { construct as construct, type LibSQLDatabase } from './driver-core.ts';\n\nexport { LibSQLDatabase } from './driver-core.ts';\n\nexport function drizzle<\n\tTSchema extends Record<string, unknown> = Record<string, never>,\n\tTClient extends Client = Client,\n>(\n\t...params: [\n\t\tTClient | string,\n\t] | [\n\t\tTClient | string,\n\t\tDrizzleConfig<TSchema>,\n\t] | [\n\t\t(\n\t\t\t& DrizzleConfig<TSchema>\n\t\t\t& ({\n\t\t\t\tconnection: string | Config;\n\t\t\t} | {\n\t\t\t\tclient: TClient;\n\t\t\t})\n\t\t),\n\t]\n): LibSQLDatabase<TSchema> & {\n\t$client: TClient;\n} {\n\tif (typeof params[0] === 'string') {\n\t\tconst instance = createClient({\n\t\t\turl: params[0],\n\t\t});\n\n\t\treturn construct(instance, params[1]) as any;\n\t}\n\n\tif (isConfig(params[0])) {\n\t\tconst { connection, client, ...drizzleConfig } = params[0] as\n\t\t\t& { connection?: Config; client?: TClient }\n\t\t\t& DrizzleConfig<TSchema>;\n\n\t\tif (client) return construct(client, drizzleConfig) as any;\n\n\t\tconst instance = typeof connection === 'string' ? createClient({ url: connection }) : createClient(connection!);\n\n\t\treturn construct(instance, drizzleConfig) as any;\n\t}\n\n\treturn construct(params[0] as TClient, params[1] as DrizzleConfig<TSchema> | undefined) as any;\n}\n\nexport namespace drizzle {\n\texport function mock<TSchema extends Record<string, unknown> = Record<string, never>>(\n\t\tconfig?: DrizzleConfig<TSchema>,\n\t): LibSQLDatabase<TSchema> & {\n\t\t$client: '$client is not available on drizzle.mock()';\n\t} {\n\t\treturn construct({} as any, config) as any;\n\t}\n}\n", "import type { Client, ResultSet } from '@libsql/client';\nimport type { BatchItem, BatchResponse } from '~/batch.ts';\nimport { entityKind } from '~/entity.ts';\nimport { DefaultLogger } from '~/logger.ts';\nimport {\n\tcreateTableRelationsHelpers,\n\textractTablesRelationalConfig,\n\ttype ExtractTablesWithRelations,\n\ttype RelationalSchemaConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport { BaseSQLiteDatabase } from '~/sqlite-core/db.ts';\nimport { SQLiteAsyncDialect } from '~/sqlite-core/dialect.ts';\nimport type { DrizzleConfig } from '~/utils.ts';\nimport { LibSQLSession } from './session.ts';\n\nexport class LibSQLDatabase<\n\tTSchema extends Record<string, unknown> = Record<string, never>,\n> extends BaseSQLiteDatabase<'async', ResultSet, TSchema> {\n\tstatic override readonly [entityKind]: string = 'LibSQLDatabase';\n\n\t/** @internal */\n\tdeclare readonly session: LibSQLSession<TSchema, ExtractTablesWithRelations<TSchema>>;\n\n\tasync batch<U extends BatchItem<'sqlite'>, T extends Readonly<[U, ...U[]]>>(\n\t\tbatch: T,\n\t): Promise<BatchResponse<T>> {\n\t\treturn this.session.batch(batch) as Promise<BatchResponse<T>>;\n\t}\n}\n\n/** @internal */\nexport function construct<\n\tTSchema extends Record<string, unknown> = Record<string, never>,\n>(client: Client, config: DrizzleConfig<TSchema> = {}): LibSQLDatabase<TSchema> & {\n\t$client: Client;\n} {\n\tconst dialect = new SQLiteAsyncDialect({ casing: config.casing });\n\tlet logger;\n\tif (config.logger === true) {\n\t\tlogger = new DefaultLogger();\n\t} else if (config.logger !== false) {\n\t\tlogger = config.logger;\n\t}\n\n\tlet schema: RelationalSchemaConfig<TablesRelationalConfig> | undefined;\n\tif (config.schema) {\n\t\tconst tablesConfig = extractTablesRelationalConfig(\n\t\t\tconfig.schema,\n\t\t\tcreateTableRelationsHelpers,\n\t\t);\n\t\tschema = {\n\t\t\tfullSchema: config.schema,\n\t\t\tschema: tablesConfig.tables,\n\t\t\ttableNamesMap: tablesConfig.tableNamesMap,\n\t\t};\n\t}\n\n\tconst session = new LibSQLSession(client, dialect, schema, { logger }, undefined);\n\tconst db = new LibSQLDatabase('async', dialect, session, schema) as LibSQLDatabase<TSchema>;\n\t(<any> db).$client = client;\n\n\treturn db as any;\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { ExtractTablesWithRelations, RelationalSchemaConfig, TablesRelationalConfig } from '~/relations.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport { type ColumnsSelection, type SQL, sql, type SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect, SQLiteSyncDialect } from '~/sqlite-core/dialect.ts';\nimport {\n\tQueryBuilder,\n\tSQLiteDeleteBase,\n\tSQLiteInsertBuilder,\n\tSQLiteSelectBuilder,\n\tSQLiteUpdateBuilder,\n} from '~/sqlite-core/query-builders/index.ts';\nimport type {\n\tDBResult,\n\tResult,\n\tSQLiteSession,\n\tSQLiteTransaction,\n\tSQLiteTransactionConfig,\n} from '~/sqlite-core/session.ts';\nimport type { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport type { DrizzleTypeError } from '~/utils.ts';\nimport { SQLiteCountBuilder } from './query-builders/count.ts';\nimport { RelationalQueryBuilder } from './query-builders/query.ts';\nimport { SQLiteRaw } from './query-builders/raw.ts';\nimport type { SelectedFields } from './query-builders/select.types.ts';\nimport type { WithBuilder } from './subquery.ts';\nimport type { SQLiteViewBase } from './view-base.ts';\n\nexport class BaseSQLiteDatabase<\n\tTResultKind extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown> = Record<string, never>,\n\tTSchema extends TablesRelationalConfig = ExtractTablesWithRelations<TFullSchema>,\n> {\n\tstatic readonly [entityKind]: string = 'BaseSQLiteDatabase';\n\n\tdeclare readonly _: {\n\t\treadonly schema: TSchema | undefined;\n\t\treadonly fullSchema: TFullSchema;\n\t\treadonly tableNamesMap: Record<string, string>;\n\t};\n\n\tquery: TFullSchema extends Record<string, never>\n\t\t? DrizzleTypeError<'Seems like the schema generic is missing - did you forget to add it to your DB type?'>\n\t\t: {\n\t\t\t[K in keyof TSchema]: RelationalQueryBuilder<TResultKind, TFullSchema, TSchema, TSchema[K]>;\n\t\t};\n\n\tconstructor(\n\t\tprivate resultKind: TResultKind,\n\t\t/** @internal */\n\t\treadonly dialect: { sync: SQLiteSyncDialect; async: SQLiteAsyncDialect }[TResultKind],\n\t\t/** @internal */\n\t\treadonly session: SQLiteSession<TResultKind, TRunResult, TFullSchema, TSchema>,\n\t\tschema: RelationalSchemaConfig<TSchema> | undefined,\n\t) {\n\t\tthis._ = schema\n\t\t\t? {\n\t\t\t\tschema: schema.schema,\n\t\t\t\tfullSchema: schema.fullSchema as TFullSchema,\n\t\t\t\ttableNamesMap: schema.tableNamesMap,\n\t\t\t}\n\t\t\t: {\n\t\t\t\tschema: undefined,\n\t\t\t\tfullSchema: {} as TFullSchema,\n\t\t\t\ttableNamesMap: {},\n\t\t\t};\n\t\tthis.query = {} as typeof this['query'];\n\t\tconst query = this.query as {\n\t\t\t[K in keyof TSchema]: RelationalQueryBuilder<TResultKind, TFullSchema, TSchema, TSchema[K]>;\n\t\t};\n\t\tif (this._.schema) {\n\t\t\tfor (const [tableName, columns] of Object.entries(this._.schema)) {\n\t\t\t\tquery[tableName as keyof TSchema] = new RelationalQueryBuilder(\n\t\t\t\t\tresultKind,\n\t\t\t\t\tschema!.fullSchema,\n\t\t\t\t\tthis._.schema,\n\t\t\t\t\tthis._.tableNamesMap,\n\t\t\t\t\tschema!.fullSchema[tableName] as SQLiteTable,\n\t\t\t\t\tcolumns,\n\t\t\t\t\tdialect,\n\t\t\t\t\tsession as SQLiteSession<any, any, any, any> as any,\n\t\t\t\t) as typeof query[keyof TSchema];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates a subquery that defines a temporary named result set as a CTE.\n\t *\n\t * It is useful for breaking down complex queries into simpler parts and for reusing the result set in subsequent parts of the query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t *\n\t * @param alias The alias for the subquery.\n\t *\n\t * Failure to provide an alias will result in a DrizzleTypeError, preventing the subquery from being referenced in other queries.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Create a subquery with alias 'sq' and use it in the select query\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t *\n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t *\n\t * To select arbitrary SQL values as fields in a CTE and reference them in other CTEs or in the main query, you need to add aliases to them:\n\t *\n\t * ```ts\n\t * // Select an arbitrary SQL value as a field in a CTE and reference it in the main query\n\t * const sq = db.$with('sq').as(db.select({\n\t *   name: sql<string>`upper(${users.name})`.as('name'),\n\t * })\n\t * .from(users));\n\t *\n\t * const result = await db.with(sq).select({ name: sq.name }).from(sq);\n\t * ```\n\t */\n\t$with: WithBuilder = (alias: string, selection?: ColumnsSelection) => {\n\t\tconst self = this;\n\t\tconst as = (\n\t\t\tqb:\n\t\t\t\t| TypedQueryBuilder<ColumnsSelection | undefined>\n\t\t\t\t| SQL\n\t\t\t\t| ((qb: QueryBuilder) => TypedQueryBuilder<ColumnsSelection | undefined> | SQL),\n\t\t) => {\n\t\t\tif (typeof qb === 'function') {\n\t\t\t\tqb = qb(new QueryBuilder(self.dialect));\n\t\t\t}\n\n\t\t\treturn new Proxy(\n\t\t\t\tnew WithSubquery(\n\t\t\t\t\tqb.getSQL(),\n\t\t\t\t\tselection ?? ('getSelectedFields' in qb ? qb.getSelectedFields() ?? {} : {}) as SelectedFields,\n\t\t\t\t\talias,\n\t\t\t\t\ttrue,\n\t\t\t\t),\n\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t);\n\t\t};\n\t\treturn { as };\n\t};\n\n\t$count(\n\t\tsource: SQLiteTable | SQLiteViewBase | SQL | SQLWrapper,\n\t\tfilters?: SQL<unknown>,\n\t) {\n\t\treturn new SQLiteCountBuilder({ source, filters, session: this.session });\n\t}\n\n\t/**\n\t * Incorporates a previously defined CTE (using `$with`) into the main query.\n\t *\n\t * This method allows the main query to reference a temporary named result set.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t *\n\t * @param queries The CTEs to incorporate into the main query.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Define a subquery 'sq' as a CTE using $with\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t *\n\t * // Incorporate the CTE 'sq' into the main query and select from it\n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t */\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\t/**\n\t\t * Creates a select query.\n\t\t *\n\t\t * Calling this method with no arguments will select all columns from the table. Pass a selection object to specify the columns you want to select.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select}\n\t\t *\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Select all columns and all rows from the 'cars' table\n\t\t * const allCars: Car[] = await db.select().from(cars);\n\t\t *\n\t\t * // Select specific columns and all rows from the 'cars' table\n\t\t * const carsIdsAndBrands: { id: number; brand: string }[] = await db.select({\n\t\t *   id: cars.id,\n\t\t *   brand: cars.brand\n\t\t * })\n\t\t *   .from(cars);\n\t\t * ```\n\t\t *\n\t\t * Like in SQL, you can use arbitrary expressions as selection fields, not just table columns:\n\t\t *\n\t\t * ```ts\n\t\t * // Select specific columns along with expression and all rows from the 'cars' table\n\t\t * const carsIdsAndLowerNames: { id: number; lowerBrand: string }[] = await db.select({\n\t\t *   id: cars.id,\n\t\t *   lowerBrand: sql<string>`lower(${cars.brand})`,\n\t\t * })\n\t\t *   .from(cars);\n\t\t * ```\n\t\t */\n\t\tfunction select(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\t\tfunction select(\n\t\t\tfields?: SelectedFields,\n\t\t): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Adds `distinct` expression to the select query.\n\t\t *\n\t\t * Calling this method will return only unique values. When multiple columns are selected, it returns rows with unique combinations of values in these columns.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t\t *\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Select all unique rows from the 'cars' table\n\t\t * await db.selectDistinct()\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.id, cars.brand, cars.color);\n\t\t *\n\t\t * // Select all unique brands from the 'cars' table\n\t\t * await db.selectDistinct({ brand: cars.brand })\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.brand);\n\t\t * ```\n\t\t */\n\t\tfunction selectDistinct(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\t\tfunction selectDistinct(\n\t\t\tfields?: SelectedFields,\n\t\t): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Creates an update query.\n\t\t *\n\t\t * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n\t\t *\n\t\t * Use `.set()` method to specify which values to update.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t\t *\n\t\t * @param table The table to update.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Update all rows in the 'cars' table\n\t\t * await db.update(cars).set({ color: 'red' });\n\t\t *\n\t\t * // Update rows with filters and conditions\n\t\t * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n\t\t *\n\t\t * // Update with returning clause\n\t\t * const updatedCar: Car[] = await db.update(cars)\n\t\t *   .set({ color: 'red' })\n\t\t *   .where(eq(cars.id, 1))\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction update<TTable extends SQLiteTable>(table: TTable): SQLiteUpdateBuilder<TTable, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteUpdateBuilder(table, self.session, self.dialect, queries);\n\t\t}\n\n\t\t/**\n\t\t * Creates an insert query.\n\t\t *\n\t\t * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/insert}\n\t\t *\n\t\t * @param table The table to insert into.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Insert one row\n\t\t * await db.insert(cars).values({ brand: 'BMW' });\n\t\t *\n\t\t * // Insert multiple rows\n\t\t * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n\t\t *\n\t\t * // Insert with returning clause\n\t\t * const insertedCar: Car[] = await db.insert(cars)\n\t\t *   .values({ brand: 'BMW' })\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction insert<TTable extends SQLiteTable>(into: TTable): SQLiteInsertBuilder<TTable, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteInsertBuilder(into, self.session, self.dialect, queries);\n\t\t}\n\n\t\t/**\n\t\t * Creates a delete query.\n\t\t *\n\t\t * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t\t *\n\t\t * @param table The table to delete from.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Delete all rows in the 'cars' table\n\t\t * await db.delete(cars);\n\t\t *\n\t\t * // Delete rows with filters and conditions\n\t\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t\t *\n\t\t * // Delete with returning clause\n\t\t * const deletedCar: Car[] = await db.delete(cars)\n\t\t *   .where(eq(cars.id, 1))\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction delete_<TTable extends SQLiteTable>(from: TTable): SQLiteDeleteBase<TTable, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteDeleteBase(from, self.session, self.dialect, queries);\n\t\t}\n\n\t\treturn { select, selectDistinct, update, insert, delete: delete_ };\n\t}\n\n\t/**\n\t * Creates a select query.\n\t *\n\t * Calling this method with no arguments will select all columns from the table. Pass a selection object to specify the columns you want to select.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select}\n\t *\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all columns and all rows from the 'cars' table\n\t * const allCars: Car[] = await db.select().from(cars);\n\t *\n\t * // Select specific columns and all rows from the 'cars' table\n\t * const carsIdsAndBrands: { id: number; brand: string }[] = await db.select({\n\t *   id: cars.id,\n\t *   brand: cars.brand\n\t * })\n\t *   .from(cars);\n\t * ```\n\t *\n\t * Like in SQL, you can use arbitrary expressions as selection fields, not just table columns:\n\t *\n\t * ```ts\n\t * // Select specific columns along with expression and all rows from the 'cars' table\n\t * const carsIdsAndLowerNames: { id: number; lowerBrand: string }[] = await db.select({\n\t *   id: cars.id,\n\t *   lowerBrand: sql<string>`lower(${cars.brand})`,\n\t * })\n\t *   .from(cars);\n\t * ```\n\t */\n\tselect(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\tselect(fields?: SelectedFields): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\treturn new SQLiteSelectBuilder({ fields: fields ?? undefined, session: this.session, dialect: this.dialect });\n\t}\n\n\t/**\n\t * Adds `distinct` expression to the select query.\n\t *\n\t * Calling this method will return only unique values. When multiple columns are selected, it returns rows with unique combinations of values in these columns.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t *\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all unique rows from the 'cars' table\n\t * await db.selectDistinct()\n\t *   .from(cars)\n\t *   .orderBy(cars.id, cars.brand, cars.color);\n\t *\n\t * // Select all unique brands from the 'cars' table\n\t * await db.selectDistinct({ brand: cars.brand })\n\t *   .from(cars)\n\t *   .orderBy(cars.brand);\n\t * ```\n\t */\n\tselectDistinct(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\tselectDistinct(\n\t\tfields?: SelectedFields,\n\t): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\treturn new SQLiteSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\t/**\n\t * Creates an update query.\n\t *\n\t * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n\t *\n\t * Use `.set()` method to specify which values to update.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t *\n\t * @param table The table to update.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Update all rows in the 'cars' table\n\t * await db.update(cars).set({ color: 'red' });\n\t *\n\t * // Update rows with filters and conditions\n\t * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n\t *\n\t * // Update with returning clause\n\t * const updatedCar: Car[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.id, 1))\n\t *   .returning();\n\t * ```\n\t */\n\tupdate<TTable extends SQLiteTable>(table: TTable): SQLiteUpdateBuilder<TTable, TResultKind, TRunResult> {\n\t\treturn new SQLiteUpdateBuilder(table, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates an insert query.\n\t *\n\t * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert}\n\t *\n\t * @param table The table to insert into.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Insert one row\n\t * await db.insert(cars).values({ brand: 'BMW' });\n\t *\n\t * // Insert multiple rows\n\t * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n\t *\n\t * // Insert with returning clause\n\t * const insertedCar: Car[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning();\n\t * ```\n\t */\n\tinsert<TTable extends SQLiteTable>(into: TTable): SQLiteInsertBuilder<TTable, TResultKind, TRunResult> {\n\t\treturn new SQLiteInsertBuilder(into, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates a delete query.\n\t *\n\t * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t *\n\t * @param table The table to delete from.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Delete all rows in the 'cars' table\n\t * await db.delete(cars);\n\t *\n\t * // Delete rows with filters and conditions\n\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t *\n\t * // Delete with returning clause\n\t * const deletedCar: Car[] = await db.delete(cars)\n\t *   .where(eq(cars.id, 1))\n\t *   .returning();\n\t * ```\n\t */\n\tdelete<TTable extends SQLiteTable>(from: TTable): SQLiteDeleteBase<TTable, TResultKind, TRunResult> {\n\t\treturn new SQLiteDeleteBase(from, this.session, this.dialect);\n\t}\n\n\trun(query: SQLWrapper | string): DBResult<TResultKind, TRunResult> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.run(sequel),\n\t\t\t\t() => sequel,\n\t\t\t\t'run',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawRunValueFromBatchResult.bind(this.session),\n\t\t\t) as DBResult<TResultKind, TRunResult>;\n\t\t}\n\t\treturn this.session.run(sequel) as DBResult<TResultKind, TRunResult>;\n\t}\n\n\tall<T = unknown>(query: SQLWrapper | string): DBResult<TResultKind, T[]> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.all(sequel),\n\t\t\t\t() => sequel,\n\t\t\t\t'all',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawAllValueFromBatchResult.bind(this.session),\n\t\t\t) as any;\n\t\t}\n\t\treturn this.session.all(sequel) as DBResult<TResultKind, T[]>;\n\t}\n\n\tget<T = unknown>(query: SQLWrapper | string): DBResult<TResultKind, T> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.get(sequel),\n\t\t\t\t() => sequel,\n\t\t\t\t'get',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawGetValueFromBatchResult.bind(this.session),\n\t\t\t) as DBResult<TResultKind, T>;\n\t\t}\n\t\treturn this.session.get(sequel) as DBResult<TResultKind, T>;\n\t}\n\n\tvalues<T extends unknown[] = unknown[]>(query: SQLWrapper | string): DBResult<TResultKind, T[]> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.values(sequel),\n\t\t\t\t() => sequel,\n\t\t\t\t'values',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawValuesValueFromBatchResult.bind(this.session),\n\t\t\t) as any;\n\t\t}\n\t\treturn this.session.values(sequel) as DBResult<TResultKind, T[]>;\n\t}\n\n\ttransaction<T>(\n\t\ttransaction: (tx: SQLiteTransaction<TResultKind, TRunResult, TFullSchema, TSchema>) => Result<TResultKind, T>,\n\t\tconfig?: SQLiteTransactionConfig,\n\t): Result<TResultKind, T> {\n\t\treturn this.session.transaction(transaction, config);\n\t}\n}\n\nexport type SQLiteWithReplicas<Q> = Q & { $primary: Q };\n\nexport const withReplicas = <\n\tTResultKind extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n\tQ extends BaseSQLiteDatabase<\n\t\tTResultKind,\n\t\tTRunResult,\n\t\tTFullSchema,\n\t\tTSchema extends Record<string, unknown> ? ExtractTablesWithRelations<TFullSchema> : TSchema\n\t>,\n>(\n\tprimary: Q,\n\treplicas: [Q, ...Q[]],\n\tgetReplica: (replicas: Q[]) => Q = () => replicas[Math.floor(Math.random() * replicas.length)]!,\n): SQLiteWithReplicas<Q> => {\n\tconst select: Q['select'] = (...args: []) => getReplica(replicas).select(...args);\n\tconst selectDistinct: Q['selectDistinct'] = (...args: []) => getReplica(replicas).selectDistinct(...args);\n\tconst $count: Q['$count'] = (...args: [any]) => getReplica(replicas).$count(...args);\n\tconst $with: Q['with'] = (...args: []) => getReplica(replicas).with(...args);\n\n\tconst update: Q['update'] = (...args: [any]) => primary.update(...args);\n\tconst insert: Q['insert'] = (...args: [any]) => primary.insert(...args);\n\tconst $delete: Q['delete'] = (...args: [any]) => primary.delete(...args);\n\tconst run: Q['run'] = (...args: [any]) => primary.run(...args);\n\tconst all: Q['all'] = (...args: [any]) => primary.all(...args);\n\tconst get: Q['get'] = (...args: [any]) => primary.get(...args);\n\tconst values: Q['values'] = (...args: [any]) => primary.values(...args);\n\tconst transaction: Q['transaction'] = (...args: [any]) => primary.transaction(...args);\n\n\treturn {\n\t\t...primary,\n\t\tupdate,\n\t\tinsert,\n\t\tdelete: $delete,\n\t\trun,\n\t\tall,\n\t\tget,\n\t\tvalues,\n\t\ttransaction,\n\t\t$primary: primary,\n\t\tselect,\n\t\tselectDistinct,\n\t\t$count,\n\t\twith: $with,\n\t\tget query() {\n\t\t\treturn getReplica(replicas).query;\n\t\t},\n\t};\n};\n", "import { ColumnAliasProxyHandler, TableAliasProxyHandler } from './alias.ts';\nimport { Column } from './column.ts';\nimport { entityKind, is } from './entity.ts';\nimport { SQL, View } from './sql/sql.ts';\nimport { Subquery } from './subquery.ts';\nimport { ViewBaseConfig } from './view-common.ts';\n\nexport class SelectionProxyHandler<T extends Subquery | Record<string, unknown> | View>\n\timplements ProxyHandler<Subquery | Record<string, unknown> | View>\n{\n\tstatic readonly [entityKind]: string = 'SelectionProxyHandler';\n\n\tprivate config: {\n\t\t/**\n\t\t * Table alias for the columns\n\t\t */\n\t\talias?: string;\n\t\t/**\n\t\t * What to do when a field is an instance of `SQL.Aliased` and it's not a selection field (from a subquery)\n\t\t *\n\t\t * `sql` - return the underlying SQL expression\n\t\t *\n\t\t * `alias` - return the field alias\n\t\t */\n\t\tsqlAliasedBehavior: 'sql' | 'alias';\n\t\t/**\n\t\t * What to do when a field is an instance of `SQL` and it doesn't have an alias declared\n\t\t *\n\t\t * `sql` - return the underlying SQL expression\n\t\t *\n\t\t * `error` - return a DrizzleTypeError on type level and throw an error on runtime\n\t\t */\n\t\tsqlBehavior: 'sql' | 'error';\n\n\t\t/**\n\t\t * Whether to replace the original name of the column with the alias\n\t\t * Should be set to `true` for views creation\n\t\t * @default false\n\t\t */\n\t\treplaceOriginalName?: boolean;\n\t};\n\n\tconstructor(config: SelectionProxyHandler<T>['config']) {\n\t\tthis.config = { ...config };\n\t}\n\n\tget(subquery: T, prop: string | symbol): any {\n\t\tif (prop === '_') {\n\t\t\treturn {\n\t\t\t\t...subquery['_' as keyof typeof subquery],\n\t\t\t\tselectedFields: new Proxy(\n\t\t\t\t\t(subquery as Subquery)._.selectedFields,\n\t\t\t\t\tthis as ProxyHandler<Record<string, unknown>>,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\tif (prop === ViewBaseConfig) {\n\t\t\treturn {\n\t\t\t\t...subquery[ViewBaseConfig as keyof typeof subquery],\n\t\t\t\tselectedFields: new Proxy(\n\t\t\t\t\t(subquery as View)[ViewBaseConfig].selectedFields,\n\t\t\t\t\tthis as ProxyHandler<Record<string, unknown>>,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\tif (typeof prop === 'symbol') {\n\t\t\treturn subquery[prop as keyof typeof subquery];\n\t\t}\n\n\t\tconst columns = is(subquery, Subquery)\n\t\t\t? subquery._.selectedFields\n\t\t\t: is(subquery, View)\n\t\t\t? subquery[ViewBaseConfig].selectedFields\n\t\t\t: subquery;\n\t\tconst value: unknown = columns[prop as keyof typeof columns];\n\n\t\tif (is(value, SQL.Aliased)) {\n\t\t\t// Never return the underlying SQL expression for a field previously selected in a subquery\n\t\t\tif (this.config.sqlAliasedBehavior === 'sql' && !value.isSelectionField) {\n\t\t\t\treturn value.sql;\n\t\t\t}\n\n\t\t\tconst newValue = value.clone();\n\t\t\tnewValue.isSelectionField = true;\n\t\t\treturn newValue;\n\t\t}\n\n\t\tif (is(value, SQL)) {\n\t\t\tif (this.config.sqlBehavior === 'sql') {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\tthrow new Error(\n\t\t\t\t`You tried to reference \"${prop}\" field from a subquery, which is a raw SQL field, but it doesn't have an alias declared. Please add an alias to the field using \".as('alias')\" method.`,\n\t\t\t);\n\t\t}\n\n\t\tif (is(value, Column)) {\n\t\t\tif (this.config.alias) {\n\t\t\t\treturn new Proxy(\n\t\t\t\t\tvalue,\n\t\t\t\t\tnew ColumnAliasProxyHandler(\n\t\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\t\tvalue.table,\n\t\t\t\t\t\t\tnew TableAliasProxyHandler(this.config.alias, this.config.replaceOriginalName ?? false),\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\n\t\tif (typeof value !== 'object' || value === null) {\n\t\t\treturn value;\n\t\t}\n\n\t\treturn new Proxy(value, new SelectionProxyHandler(this.config));\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { Placeholder, Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport { type DrizzleTypeError, orderSelectedFields, type ValueOrArray } from '~/utils.ts';\nimport type { SQLiteColumn } from '../columns/common.ts';\nimport type { SelectedFieldsFlat, SelectedFieldsOrdered } from './select.types.ts';\n\nexport type SQLiteDeleteWithout<\n\tT extends AnySQLiteDeleteBase,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T\n\t: Omit<\n\t\tSQLiteDeleteBase<\n\t\t\tT['_']['table'],\n\t\t\tT['_']['resultType'],\n\t\t\tT['_']['runResult'],\n\t\t\tT['_']['returning'],\n\t\t\tTDynamic,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>,\n\t\tT['_']['excludedMethods'] | K\n\t>;\n\nexport type SQLiteDelete<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n> = SQLiteDeleteBase<TTable, TResultType, TRunResult, TReturning, true, never>;\n\nexport interface SQLiteDeleteConfig {\n\twhere?: SQL | undefined;\n\tlimit?: number | Placeholder;\n\torderBy?: (SQLiteColumn | SQL | SQL.Aliased)[];\n\ttable: SQLiteTable;\n\treturning?: SelectedFieldsOrdered;\n\twithList?: Subquery[];\n}\n\nexport type SQLiteDeleteReturningAll<\n\tT extends AnySQLiteDeleteBase,\n\tTDynamic extends boolean,\n> = SQLiteDeleteWithout<\n\tSQLiteDeleteBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tT['_']['dynamic'],\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteDeleteReturning<\n\tT extends AnySQLiteDeleteBase,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFieldsFlat,\n> = SQLiteDeleteWithout<\n\tSQLiteDeleteBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tT['_']['dynamic'],\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteDeleteExecute<T extends AnySQLiteDeleteBase> = T['_']['returning'] extends undefined\n\t? T['_']['runResult']\n\t: T['_']['returning'][];\n\nexport type SQLiteDeletePrepare<T extends AnySQLiteDeleteBase> = SQLitePreparedQuery<{\n\ttype: T['_']['resultType'];\n\trun: T['_']['runResult'];\n\tall: T['_']['returning'] extends undefined ? DrizzleTypeError<'.all() cannot be used without .returning()'>\n\t\t: T['_']['returning'][];\n\tget: T['_']['returning'] extends undefined ? DrizzleTypeError<'.get() cannot be used without .returning()'>\n\t\t: T['_']['returning'] | undefined;\n\tvalues: T['_']['returning'] extends undefined ? DrizzleTypeError<'.values() cannot be used without .returning()'>\n\t\t: any[][];\n\texecute: SQLiteDeleteExecute<T>;\n}>;\n\nexport type SQLiteDeleteDynamic<T extends AnySQLiteDeleteBase> = SQLiteDelete<\n\tT['_']['table'],\n\tT['_']['resultType'],\n\tT['_']['runResult'],\n\tT['_']['returning']\n>;\n\nexport type AnySQLiteDeleteBase = SQLiteDeleteBase<any, any, any, any, any, any>;\n\nexport interface SQLiteDeleteBase<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tQueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>,\n\tSQLWrapper\n{\n\treadonly _: {\n\t\tdialect: 'sqlite';\n\t\treadonly table: TTable;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? TRunResult : TReturning[];\n\t};\n}\n\nexport class SQLiteDeleteBase<\n\tTTable extends SQLiteTable,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>\n\timplements RunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteDelete';\n\n\t/** @internal */\n\tconfig: SQLiteDeleteConfig;\n\n\tconstructor(\n\t\tprivate table: TTable,\n\t\tprivate session: SQLiteSession<any, any, any, any>,\n\t\tprivate dialect: SQLiteDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { table, withList };\n\t}\n\n\t/**\n\t * Adds a `where` clause to the query.\n\t *\n\t * Calling this method will delete only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t *\n\t * @param where the `where` clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be deleted.\n\t *\n\t * ```ts\n\t * // Delete all cars with green color\n\t * db.delete(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * db.delete(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Delete all BMW cars with a green color\n\t * db.delete(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Delete all cars with the green or blue color\n\t * db.delete(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(where: SQL | undefined): SQLiteDeleteWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\torderBy(\n\t\tbuilder: (deleteTable: TTable) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteDeleteWithout<this, TDynamic, 'orderBy'>;\n\torderBy(...columns: (SQLiteColumn | SQL | SQL.Aliased)[]): SQLiteDeleteWithout<this, TDynamic, 'orderBy'>;\n\torderBy(\n\t\t...columns:\n\t\t\t| [(deleteTable: TTable) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteDeleteWithout<this, TDynamic, 'orderBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst orderBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.table[Table.Symbol.Columns],\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as any,\n\t\t\t);\n\n\t\t\tconst orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n\t\t\tthis.config.orderBy = orderByArray;\n\t\t} else {\n\t\t\tconst orderByArray = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\t\t\tthis.config.orderBy = orderByArray;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\tlimit(limit: number | Placeholder): SQLiteDeleteWithout<this, TDynamic, 'limit'> {\n\t\tthis.config.limit = limit;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the deleted rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete#delete-with-return}\n\t *\n\t * @example\n\t * ```ts\n\t * // Delete all cars with the green color and return all fields\n\t * const deletedCars: Car[] = await db.delete(cars)\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning();\n\t *\n\t * // Delete all cars with the green color and return only their id and brand fields\n\t * const deletedCarsIdsAndBrands: { id: number, brand: string }[] = await db.delete(cars)\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning({ id: cars.id, brand: cars.brand });\n\t * ```\n\t */\n\treturning(): SQLiteDeleteReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFieldsFlat>(\n\t\tfields: TSelectedFields,\n\t): SQLiteDeleteReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFieldsFlat = this.table[SQLiteTable.Symbol.Columns],\n\t): SQLiteDeleteReturning<this, TDynamic, any> {\n\t\tthis.config.returning = orderSelectedFields<SQLiteColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildDeleteQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteDeletePrepare<this> {\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t\tthis.config.returning ? 'all' : 'run',\n\t\t\ttrue,\n\t\t) as SQLiteDeletePrepare<this>;\n\t}\n\n\tprepare(): SQLiteDeletePrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\toverride async execute(placeholderValues?: Record<string, unknown>): Promise<SQLiteDeleteExecute<this>> {\n\t\treturn this._prepare().execute(placeholderValues) as SQLiteDeleteExecute<this>;\n\t}\n\n\t$dynamic(): SQLiteDeleteDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n", "import type { BuildColumns, BuildExtraConfigColumns } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport { Table, type TableConfig as TableConfigBase, type UpdateTableConfig } from '~/table.ts';\nimport type { CheckBuilder } from './checks.ts';\nimport { getSQLiteColumnBuilders, type SQLiteColumnBuilders } from './columns/all.ts';\nimport type { SQLiteColumn, SQLiteColumnBuilder, SQLiteColumnBuilderBase } from './columns/common.ts';\nimport type { ForeignKey, ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { IndexBuilder } from './indexes.ts';\nimport type { PrimaryKeyBuilder } from './primary-keys.ts';\nimport type { UniqueConstraintBuilder } from './unique-constraint.ts';\n\nexport type SQLiteTableExtraConfigValue =\n\t| IndexBuilder\n\t| CheckBuilder\n\t| ForeignKeyBuilder\n\t| PrimaryKeyBuilder\n\t| UniqueConstraintBuilder;\n\nexport type SQLiteTableExtraConfig = Record<\n\tstring,\n\tSQLiteTableExtraConfigValue\n>;\n\nexport type TableConfig = TableConfigBase<SQLiteColumn<any>>;\n\n/** @internal */\nexport const InlineForeignKeys = Symbol.for('drizzle:SQLiteInlineForeignKeys');\n\nexport class SQLiteTable<T extends TableConfig = TableConfig> extends Table<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteTable';\n\n\t/** @internal */\n\tstatic override readonly Symbol = Object.assign({}, Table.Symbol, {\n\t\tInlineForeignKeys: InlineForeignKeys as typeof InlineForeignKeys,\n\t});\n\n\t/** @internal */\n\toverride [Table.Symbol.Columns]!: NonNullable<T['columns']>;\n\n\t/** @internal */\n\t[InlineForeignKeys]: ForeignKey[] = [];\n\n\t/** @internal */\n\toverride [Table.Symbol.ExtraConfigBuilder]:\n\t\t| ((self: Record<string, SQLiteColumn>) => SQLiteTableExtraConfig)\n\t\t| undefined = undefined;\n}\n\nexport type AnySQLiteTable<TPartial extends Partial<TableConfig> = {}> = SQLiteTable<\n\tUpdateTableConfig<TableConfig, TPartial>\n>;\n\nexport type SQLiteTableWithColumns<T extends TableConfig> =\n\t& SQLiteTable<T>\n\t& {\n\t\t[Key in keyof T['columns']]: T['columns'][Key];\n\t};\n\nexport interface SQLiteTableFn<TSchema extends string | undefined = undefined> {\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig?: (\n\t\t\tself: BuildColumns<TTableName, TColumnsMap, 'sqlite'>,\n\t\t) => SQLiteTableExtraConfigValue[],\n\t): SQLiteTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>;\n\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: (columnTypes: SQLiteColumnBuilders) => TColumnsMap,\n\t\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfigValue[],\n\t): SQLiteTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>;\n\t/**\n\t * @deprecated The third parameter of sqliteTable is changing and will only accept an array instead of an object\n\t *\n\t * @example\n\t * Deprecated version:\n\t * ```ts\n\t * export const users = sqliteTable(\"users\", {\n\t * \tid: int(),\n\t * }, (t) => ({\n\t * \tidx: index('custom_name').on(t.id)\n\t * }));\n\t * ```\n\t *\n\t * New API:\n\t * ```ts\n\t * export const users = sqliteTable(\"users\", {\n\t * \tid: int(),\n\t * }, (t) => [\n\t * \tindex('custom_name').on(t.id)\n\t * ]);\n\t * ```\n\t */\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfig,\n\t): SQLiteTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>;\n\n\t/**\n\t * @deprecated The third parameter of sqliteTable is changing and will only accept an array instead of an object\n\t *\n\t * @example\n\t * Deprecated version:\n\t * ```ts\n\t * export const users = sqliteTable(\"users\", {\n\t * \tid: int(),\n\t * }, (t) => ({\n\t * \tidx: index('custom_name').on(t.id)\n\t * }));\n\t * ```\n\t *\n\t * New API:\n\t * ```ts\n\t * export const users = sqliteTable(\"users\", {\n\t * \tid: int(),\n\t * }, (t) => [\n\t * \tindex('custom_name').on(t.id)\n\t * ]);\n\t * ```\n\t */\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: (columnTypes: SQLiteColumnBuilders) => TColumnsMap,\n\t\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfig,\n\t): SQLiteTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>;\n}\n\nfunction sqliteTableBase<\n\tTTableName extends string,\n\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\tTSchema extends string | undefined,\n>(\n\tname: TTableName,\n\tcolumns: TColumnsMap | ((columnTypes: SQLiteColumnBuilders) => TColumnsMap),\n\textraConfig:\n\t\t| ((\n\t\t\tself: BuildColumns<TTableName, TColumnsMap, 'sqlite'>,\n\t\t) => SQLiteTableExtraConfig | SQLiteTableExtraConfigValue[])\n\t\t| undefined,\n\tschema?: TSchema,\n\tbaseName = name,\n): SQLiteTableWithColumns<{\n\tname: TTableName;\n\tschema: TSchema;\n\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\tdialect: 'sqlite';\n}> {\n\tconst rawTable = new SQLiteTable<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>(name, schema, baseName);\n\n\tconst parsedColumns: TColumnsMap = typeof columns === 'function' ? columns(getSQLiteColumnBuilders()) : columns;\n\n\tconst builtColumns = Object.fromEntries(\n\t\tObject.entries(parsedColumns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as SQLiteColumnBuilder;\n\t\t\tcolBuilder.setName(name);\n\t\t\tconst column = colBuilder.build(rawTable);\n\t\t\trawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\n\tconst table = Object.assign(rawTable, builtColumns);\n\n\ttable[Table.Symbol.Columns] = builtColumns;\n\ttable[Table.Symbol.ExtraConfigColumns] = builtColumns as unknown as BuildExtraConfigColumns<\n\t\tTTableName,\n\t\tTColumnsMap,\n\t\t'sqlite'\n\t>;\n\n\tif (extraConfig) {\n\t\ttable[SQLiteTable.Symbol.ExtraConfigBuilder] = extraConfig as (\n\t\t\tself: Record<string, SQLiteColumn>,\n\t\t) => SQLiteTableExtraConfig;\n\t}\n\n\treturn table;\n}\n\nexport const sqliteTable: SQLiteTableFn = (name, columns, extraConfig) => {\n\treturn sqliteTableBase(name, columns, extraConfig);\n};\n\nexport function sqliteTableCreator(customizeTableName: (name: string) => string): SQLiteTableFn {\n\treturn (name, columns, extraConfig) => {\n\t\treturn sqliteTableBase(customizeTableName(name) as typeof name, columns, extraConfig, undefined, name);\n\t};\n}\n", "import { blob } from './blob.ts';\nimport { customType } from './custom.ts';\nimport { integer } from './integer.ts';\nimport { numeric } from './numeric.ts';\nimport { real } from './real.ts';\nimport { text } from './text.ts';\n\nexport function getSQLiteColumnBuilders() {\n\treturn {\n\t\tblob,\n\t\tcustomType,\n\t\tinteger,\n\t\tnumeric,\n\t\treal,\n\t\ttext,\n\t};\n}\n\nexport type SQLiteColumnBuilders = ReturnType<typeof getSQLiteColumnBuilders>;\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\ntype BlobMode = 'buffer' | 'json' | 'bigint';\n\nexport type SQLiteBigIntBuilderInitial<TName extends string> = SQLiteBigIntBuilder<{\n\tname: TName;\n\tdataType: 'bigint';\n\tcolumnType: 'SQLiteBigInt';\n\tdata: bigint;\n\tdriverParam: Buffer;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteBigIntBuilder<T extends ColumnBuilderBaseConfig<'bigint', 'SQLiteBigInt'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBigIntBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'bigint', 'SQLiteBigInt');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBigInt<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBigInt<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any>);\n\t}\n}\n\nexport class SQLiteBigInt<T extends ColumnBaseConfig<'bigint', 'SQLiteBigInt'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBigInt';\n\n\tgetSQLType(): string {\n\t\treturn 'blob';\n\t}\n\n\toverride mapFromDriverValue(value: Buffer | Uint8Array | ArrayBuffer): bigint {\n\t\tif (Buffer.isBuffer(value)) {\n\t\t\treturn BigInt(value.toString());\n\t\t}\n\n\t\t// for sqlite durable objects\n\t\t// eslint-disable-next-line no-instanceof/no-instanceof\n\t\tif (value instanceof ArrayBuffer) {\n\t\t\tconst decoder = new TextDecoder();\n\t\t\treturn BigInt(decoder.decode(value));\n\t\t}\n\n\t\treturn BigInt(String.fromCodePoint(...value));\n\t}\n\n\toverride mapToDriverValue(value: bigint): Buffer {\n\t\treturn Buffer.from(value.toString());\n\t}\n}\n\nexport type SQLiteBlobJsonBuilderInitial<TName extends string> = SQLiteBlobJsonBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'SQLiteBlobJson';\n\tdata: unknown;\n\tdriverParam: Buffer;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteBlobJsonBuilder<T extends ColumnBuilderBaseConfig<'json', 'SQLiteBlobJson'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBlobJsonBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'SQLiteBlobJson');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBlobJson<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBlobJson<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteBlobJson<T extends ColumnBaseConfig<'json', 'SQLiteBlobJson'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBlobJson';\n\n\tgetSQLType(): string {\n\t\treturn 'blob';\n\t}\n\n\toverride mapFromDriverValue(value: Buffer | Uint8Array | ArrayBuffer): T['data'] {\n\t\tif (Buffer.isBuffer(value)) {\n\t\t\treturn JSON.parse(value.toString());\n\t\t}\n\n\t\t// for sqlite durable objects\n\t\t// eslint-disable-next-line no-instanceof/no-instanceof\n\t\tif (value instanceof ArrayBuffer) {\n\t\t\tconst decoder = new TextDecoder();\n\t\t\treturn JSON.parse(decoder.decode(value));\n\t\t}\n\n\t\treturn JSON.parse(String.fromCodePoint(...value));\n\t}\n\n\toverride mapToDriverValue(value: T['data']): Buffer {\n\t\treturn Buffer.from(JSON.stringify(value));\n\t}\n}\n\nexport type SQLiteBlobBufferBuilderInitial<TName extends string> = SQLiteBlobBufferBuilder<{\n\tname: TName;\n\tdataType: 'buffer';\n\tcolumnType: 'SQLiteBlobBuffer';\n\tdata: Buffer;\n\tdriverParam: Buffer;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteBlobBufferBuilder<T extends ColumnBuilderBaseConfig<'buffer', 'SQLiteBlobBuffer'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBlobBufferBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'buffer', 'SQLiteBlobBuffer');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBlobBuffer<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBlobBuffer<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any>);\n\t}\n}\n\nexport class SQLiteBlobBuffer<T extends ColumnBaseConfig<'buffer', 'SQLiteBlobBuffer'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBlobBuffer';\n\n\toverride mapFromDriverValue(value: Buffer | Uint8Array | ArrayBuffer): T['data'] {\n\t\tif (Buffer.isBuffer(value)) {\n\t\t\treturn value;\n\t\t}\n\n\t\treturn Buffer.from(value as Uint8Array);\n\t}\n\n\tgetSQLType(): string {\n\t\treturn 'blob';\n\t}\n}\n\nexport interface BlobConfig<TMode extends BlobMode = BlobMode> {\n\tmode: TMode;\n}\n\n/**\n *  It's recommended to use `text('...', { mode: 'json' })` instead of `blob` in JSON mode, because it supports JSON functions:\n * >All JSON functions currently throw an error if any of their arguments are BLOBs because BLOBs are reserved for a future enhancement in which BLOBs will store the binary encoding for JSON.\n *\n * https://www.sqlite.org/json1.html\n */\nexport function blob(): SQLiteBlobJsonBuilderInitial<''>;\nexport function blob<TMode extends BlobMode = BlobMode>(\n\tconfig?: BlobConfig<TMode>,\n): Equal<TMode, 'bigint'> extends true ? SQLiteBigIntBuilderInitial<''>\n\t: Equal<TMode, 'buffer'> extends true ? SQLiteBlobBufferBuilderInitial<''>\n\t: SQLiteBlobJsonBuilderInitial<''>;\nexport function blob<TName extends string, TMode extends BlobMode = BlobMode>(\n\tname: TName,\n\tconfig?: BlobConfig<TMode>,\n): Equal<TMode, 'bigint'> extends true ? SQLiteBigIntBuilderInitial<TName>\n\t: Equal<TMode, 'buffer'> extends true ? SQLiteBlobBufferBuilderInitial<TName>\n\t: SQLiteBlobJsonBuilderInitial<TName>;\nexport function blob(a?: string | BlobConfig, b?: BlobConfig) {\n\tconst { name, config } = getColumnNameAndConfig<BlobConfig | undefined>(a, b);\n\tif (config?.mode === 'json') {\n\t\treturn new SQLiteBlobJsonBuilder(name);\n\t}\n\tif (config?.mode === 'bigint') {\n\t\treturn new SQLiteBigIntBuilder(name);\n\t}\n\treturn new SQLiteBlobBufferBuilder(name);\n}\n", "import type {\n\tColumnBuilderBase,\n\tColumnBuilderBaseConfig,\n\tColumnBuilderExtraConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tHasGenerated,\n\tMakeColumnConfig,\n} from '~/column-builder.ts';\nimport { ColumnBuilder } from '~/column-builder.ts';\nimport { Column } from '~/column.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { ForeignKey, UpdateDeleteAction } from '~/sqlite-core/foreign-keys.ts';\nimport { ForeignKeyBuilder } from '~/sqlite-core/foreign-keys.ts';\nimport type { AnySQLiteTable, SQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Update } from '~/utils.ts';\nimport { uniqueKeyName } from '../unique-constraint.ts';\n\nexport interface ReferenceConfig {\n\tref: () => SQLiteColumn;\n\tactions: {\n\t\tonUpdate?: UpdateDeleteAction;\n\t\tonDelete?: UpdateDeleteAction;\n\t};\n}\n\nexport interface SQLiteColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> extends ColumnBuilderBase<T, TTypeConfig & { dialect: 'sqlite' }> {}\n\nexport interface SQLiteGeneratedColumnConfig {\n\tmode?: 'virtual' | 'stored';\n}\n\nexport abstract class SQLiteColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = object,\n> extends ColumnBuilder<T, TRuntimeConfig, TTypeConfig & { dialect: 'sqlite' }, TExtraConfig>\n\timplements SQLiteColumnBuilderBase<T, TTypeConfig>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteColumnBuilder';\n\n\tprivate foreignKeyConfigs: ReferenceConfig[] = [];\n\n\treferences(\n\t\tref: ReferenceConfig['ref'],\n\t\tactions: ReferenceConfig['actions'] = {},\n\t): this {\n\t\tthis.foreignKeyConfigs.push({ ref, actions });\n\t\treturn this;\n\t}\n\n\tunique(\n\t\tname?: string,\n\t): this {\n\t\tthis.config.isUnique = true;\n\t\tthis.config.uniqueName = name;\n\t\treturn this;\n\t}\n\n\tgeneratedAlwaysAs(as: SQL | T['data'] | (() => SQL), config?: SQLiteGeneratedColumnConfig): HasGenerated<this, {\n\t\ttype: 'always';\n\t}> {\n\t\tthis.config.generated = {\n\t\t\tas,\n\t\t\ttype: 'always',\n\t\t\tmode: config?.mode ?? 'virtual',\n\t\t};\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tbuildForeignKeys(column: SQLiteColumn, table: SQLiteTable): ForeignKey[] {\n\t\treturn this.foreignKeyConfigs.map(({ ref, actions }) => {\n\t\t\treturn ((ref, actions) => {\n\t\t\t\tconst builder = new ForeignKeyBuilder(() => {\n\t\t\t\t\tconst foreignColumn = ref();\n\t\t\t\t\treturn { columns: [column], foreignColumns: [foreignColumn] };\n\t\t\t\t});\n\t\t\t\tif (actions.onUpdate) {\n\t\t\t\t\tbuilder.onUpdate(actions.onUpdate);\n\t\t\t\t}\n\t\t\t\tif (actions.onDelete) {\n\t\t\t\t\tbuilder.onDelete(actions.onDelete);\n\t\t\t\t}\n\t\t\t\treturn builder.build(table);\n\t\t\t})(ref, actions);\n\t\t});\n\t}\n\n\t/** @internal */\n\tabstract build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteColumn<MakeColumnConfig<T, TTableName>>;\n}\n\n// To understand how to use `SQLiteColumn` and `AnySQLiteColumn`, see `Column` and `AnyColumn` documentation.\nexport abstract class SQLiteColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = {},\n\tTTypeConfig extends object = {},\n> extends Column<T, TRuntimeConfig, TTypeConfig & { dialect: 'sqlite' }> {\n\tstatic override readonly [entityKind]: string = 'SQLiteColumn';\n\n\tconstructor(\n\t\toverride readonly table: SQLiteTable,\n\t\tconfig: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tif (!config.uniqueName) {\n\t\t\tconfig.uniqueName = uniqueKeyName(table, [config.name]);\n\t\t}\n\t\tsuper(table, config);\n\t}\n}\n\nexport type AnySQLiteColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = SQLiteColumn<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n", "import { entityKind } from '~/entity.ts';\nimport { TableName } from '~/table.utils.ts';\nimport type { AnySQLiteColumn, SQLiteColumn } from './columns/index.ts';\nimport type { SQLiteTable } from './table.ts';\n\nexport type UpdateDeleteAction = 'cascade' | 'restrict' | 'no action' | 'set null' | 'set default';\n\nexport type Reference = () => {\n\treadonly name?: string;\n\treadonly columns: SQLiteColumn[];\n\treadonly foreignTable: SQLiteTable;\n\treadonly foreignColumns: SQLiteColumn[];\n};\n\nexport class ForeignKeyBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteForeignKeyBuilder';\n\n\tdeclare _: {\n\t\tbrand: 'SQLiteForeignKeyBuilder';\n\t\tforeignTableName: 'TForeignTableName';\n\t};\n\n\t/** @internal */\n\treference: Reference;\n\n\t/** @internal */\n\t_onUpdate: UpdateDeleteAction | undefined;\n\n\t/** @internal */\n\t_onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(\n\t\tconfig: () => {\n\t\t\tname?: string;\n\t\t\tcolumns: SQLiteColumn[];\n\t\t\tforeignColumns: SQLiteColumn[];\n\t\t},\n\t\tactions?: {\n\t\t\tonUpdate?: UpdateDeleteAction;\n\t\t\tonDelete?: UpdateDeleteAction;\n\t\t} | undefined,\n\t) {\n\t\tthis.reference = () => {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn { name, columns, foreignTable: foreignColumns[0]!.table as SQLiteTable, foreignColumns };\n\t\t};\n\t\tif (actions) {\n\t\t\tthis._onUpdate = actions.onUpdate;\n\t\t\tthis._onDelete = actions.onDelete;\n\t\t}\n\t}\n\n\tonUpdate(action: UpdateDeleteAction): this {\n\t\tthis._onUpdate = action;\n\t\treturn this;\n\t}\n\n\tonDelete(action: UpdateDeleteAction): this {\n\t\tthis._onDelete = action;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): ForeignKey {\n\t\treturn new ForeignKey(table, this);\n\t}\n}\n\nexport class ForeignKey {\n\tstatic readonly [entityKind]: string = 'SQLiteForeignKey';\n\n\treadonly reference: Reference;\n\treadonly onUpdate: UpdateDeleteAction | undefined;\n\treadonly onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(readonly table: SQLiteTable, builder: ForeignKeyBuilder) {\n\t\tthis.reference = builder.reference;\n\t\tthis.onUpdate = builder._onUpdate;\n\t\tthis.onDelete = builder._onDelete;\n\t}\n\n\tgetName(): string {\n\t\tconst { name, columns, foreignColumns } = this.reference();\n\t\tconst columnNames = columns.map((column) => column.name);\n\t\tconst foreignColumnNames = foreignColumns.map((column) => column.name);\n\t\tconst chunks = [\n\t\t\tthis.table[TableName],\n\t\t\t...columnNames,\n\t\t\tforeignColumns[0]!.table[TableName],\n\t\t\t...foreignColumnNames,\n\t\t];\n\t\treturn name ?? `${chunks.join('_')}_fk`;\n\t}\n}\n\ntype ColumnsWithTable<\n\tTTableName extends string,\n\tTColumns extends SQLiteColumn[],\n> = { [Key in keyof TColumns]: AnySQLiteColumn<{ tableName: TTableName }> };\n\n/**\n * @deprecated please use `foreignKey({ columns: [], foreignColumns: [] })` syntax without callback\n * @param config\n * @returns\n */\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnySQLiteColumn<{ tableName: TTableName }>, ...AnySQLiteColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: () => {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder;\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnySQLiteColumn<{ tableName: TTableName }>, ...AnySQLiteColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder;\nexport function foreignKey(\n\tconfig: any,\n): ForeignKeyBuilder {\n\tfunction mappedConfig() {\n\t\tif (typeof config === 'function') {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn {\n\t\t\t\tname,\n\t\t\t\tcolumns,\n\t\t\t\tforeignColumns,\n\t\t\t};\n\t\t}\n\t\treturn config;\n\t}\n\n\treturn new ForeignKeyBuilder(mappedConfig);\n}\n", "import { entityKind } from '~/entity.ts';\nimport { TableName } from '~/table.utils.ts';\nimport type { SQLiteColumn } from './columns/common.ts';\nimport type { SQLiteTable } from './table.ts';\n\nexport function uniqueKeyName(table: SQLiteTable, columns: string[]) {\n\treturn `${table[TableName]}_${columns.join('_')}_unique`;\n}\n\nexport function unique(name?: string): UniqueOnConstraintBuilder {\n\treturn new UniqueOnConstraintBuilder(name);\n}\n\nexport class UniqueConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteUniqueConstraintBuilder';\n\n\t/** @internal */\n\tcolumns: SQLiteColumn[];\n\n\tconstructor(\n\t\tcolumns: SQLiteColumn[],\n\t\tprivate name?: string,\n\t) {\n\t\tthis.columns = columns;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): UniqueConstraint {\n\t\treturn new UniqueConstraint(table, this.columns, this.name);\n\t}\n}\n\nexport class UniqueOnConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteUniqueOnConstraintBuilder';\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tname?: string,\n\t) {\n\t\tthis.name = name;\n\t}\n\n\ton(...columns: [SQLiteColumn, ...SQLiteColumn[]]) {\n\t\treturn new UniqueConstraintBuilder(columns, this.name);\n\t}\n}\n\nexport class UniqueConstraint {\n\tstatic readonly [entityKind]: string = 'SQLiteUniqueConstraint';\n\n\treadonly columns: SQLiteColumn[];\n\treadonly name?: string;\n\n\tconstructor(readonly table: SQLiteTable, columns: SQLiteColumn[], name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n\t}\n\n\tgetName() {\n\t\treturn this.name;\n\t}\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type ConvertCustomConfig<TName extends string, T extends Partial<CustomTypeValues>> =\n\t& {\n\t\tname: TName;\n\t\tdataType: 'custom';\n\t\tcolumnType: 'SQLiteCustomColumn';\n\t\tdata: T['data'];\n\t\tdriverParam: T['driverData'];\n\t\tenumValues: undefined;\n\t}\n\t& (T['notNull'] extends true ? { notNull: true } : {})\n\t& (T['default'] extends true ? { hasDefault: true } : {});\n\nexport interface SQLiteCustomColumnInnerConfig {\n\tcustomTypeValues: CustomTypeValues;\n}\n\nexport class SQLiteCustomColumnBuilder<T extends ColumnBuilderBaseConfig<'custom', 'SQLiteCustomColumn'>>\n\textends SQLiteColumnBuilder<\n\t\tT,\n\t\t{\n\t\t\tfieldConfig: CustomTypeValues['config'];\n\t\t\tcustomTypeParams: CustomTypeParams<any>;\n\t\t},\n\t\t{\n\t\t\tsqliteColumnBuilderBrand: 'SQLiteCustomColumnBuilderBrand';\n\t\t}\n\t>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteCustomColumnBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\tfieldConfig: CustomTypeValues['config'],\n\t\tcustomTypeParams: CustomTypeParams<any>,\n\t) {\n\t\tsuper(name, 'custom', 'SQLiteCustomColumn');\n\t\tthis.config.fieldConfig = fieldConfig;\n\t\tthis.config.customTypeParams = customTypeParams;\n\t}\n\n\t/** @internal */\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteCustomColumn<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteCustomColumn<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteCustomColumn<T extends ColumnBaseConfig<'custom', 'SQLiteCustomColumn'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteCustomColumn';\n\n\tprivate sqlName: string;\n\tprivate mapTo?: (value: T['data']) => T['driverParam'];\n\tprivate mapFrom?: (value: T['driverParam']) => T['data'];\n\n\tconstructor(\n\t\ttable: AnySQLiteTable<{ name: T['tableName'] }>,\n\t\tconfig: SQLiteCustomColumnBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.sqlName = config.customTypeParams.dataType(config.fieldConfig);\n\t\tthis.mapTo = config.customTypeParams.toDriver;\n\t\tthis.mapFrom = config.customTypeParams.fromDriver;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn this.sqlName;\n\t}\n\n\toverride mapFromDriverValue(value: T['driverParam']): T['data'] {\n\t\treturn typeof this.mapFrom === 'function' ? this.mapFrom(value) : value as T['data'];\n\t}\n\n\toverride mapToDriverValue(value: T['data']): T['driverParam'] {\n\t\treturn typeof this.mapTo === 'function' ? this.mapTo(value) : value as T['data'];\n\t}\n}\n\nexport type CustomTypeValues = {\n\t/**\n\t * Required type for custom column, that will infer proper type model\n\t *\n\t * Examples:\n\t *\n\t * If you want your column to be `string` type after selecting/or on inserting - use `data: string`. Like `text`, `varchar`\n\t *\n\t * If you want your column to be `number` type after selecting/or on inserting - use `data: number`. Like `integer`\n\t */\n\tdata: unknown;\n\n\t/**\n\t * Type helper, that represents what type database driver is accepting for specific database data type\n\t */\n\tdriverData?: unknown;\n\n\t/**\n\t * What config type should be used for {@link CustomTypeParams} `dataType` generation\n\t */\n\tconfig?: Record<string, any>;\n\n\t/**\n\t * Whether the config argument should be required or not\n\t * @default false\n\t */\n\tconfigRequired?: boolean;\n\n\t/**\n\t * If your custom data type should be notNull by default you can use `notNull: true`\n\t *\n\t * @example\n\t * const customSerial = customType<{ data: number, notNull: true, default: true }>({\n\t * \t  dataType() {\n\t * \t    return 'serial';\n\t *    },\n\t * });\n\t */\n\tnotNull?: boolean;\n\n\t/**\n\t * If your custom data type has default you can use `default: true`\n\t *\n\t * @example\n\t * const customSerial = customType<{ data: number, notNull: true, default: true }>({\n\t * \t  dataType() {\n\t * \t    return 'serial';\n\t *    },\n\t * });\n\t */\n\tdefault?: boolean;\n};\n\nexport interface CustomTypeParams<T extends CustomTypeValues> {\n\t/**\n\t * Database data type string representation, that is used for migrations\n\t * @example\n\t * ```\n\t * `jsonb`, `text`\n\t * ```\n\t *\n\t * If database data type needs additional params you can use them from `config` param\n\t * @example\n\t * ```\n\t * `varchar(256)`, `numeric(2,3)`\n\t * ```\n\t *\n\t * To make `config` be of specific type please use config generic in {@link CustomTypeValues}\n\t *\n\t * @example\n\t * Usage example\n\t * ```\n\t *   dataType() {\n\t *     return 'boolean';\n\t *   },\n\t * ```\n\t * Or\n\t * ```\n\t *   dataType(config) {\n\t * \t   return typeof config.length !== 'undefined' ? `varchar(${config.length})` : `varchar`;\n\t * \t }\n\t * ```\n\t */\n\tdataType: (config: T['config'] | (Equal<T['configRequired'], true> extends true ? never : undefined)) => string;\n\n\t/**\n\t * Optional mapping function, between user input and driver\n\t * @example\n\t * For example, when using jsonb we need to map JS/TS object to string before writing to database\n\t * ```\n\t * toDriver(value: TData): string {\n\t * \t return JSON.stringify(value);\n\t * }\n\t * ```\n\t */\n\ttoDriver?: (value: T['data']) => T['driverData'] | SQL;\n\n\t/**\n\t * Optional mapping function, that is responsible for data mapping from database to JS/TS code\n\t * @example\n\t * For example, when using timestamp we need to map string Date representation to JS Date\n\t * ```\n\t * fromDriver(value: string): Date {\n\t * \treturn new Date(value);\n\t * },\n\t * ```\n\t */\n\tfromDriver?: (value: T['driverData']) => T['data'];\n}\n\n/**\n * Custom sqlite database data type generator\n */\nexport function customType<T extends CustomTypeValues = CustomTypeValues>(\n\tcustomTypeParams: CustomTypeParams<T>,\n): Equal<T['configRequired'], true> extends true ? {\n\t\t<TConfig extends Record<string, any> & T['config']>(\n\t\t\tfieldConfig: TConfig,\n\t\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<'', T>>;\n\t\t<TName extends string>(\n\t\t\tdbName: TName,\n\t\t\tfieldConfig: T['config'],\n\t\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<TName, T>>;\n\t}\n\t: {\n\t\t(): SQLiteCustomColumnBuilder<ConvertCustomConfig<'', T>>;\n\t\t<TConfig extends Record<string, any> & T['config']>(\n\t\t\tfieldConfig?: TConfig,\n\t\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<'', T>>;\n\t\t<TName extends string>(\n\t\t\tdbName: TName,\n\t\t\tfieldConfig?: T['config'],\n\t\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<TName, T>>;\n\t}\n{\n\treturn <TName extends string>(\n\t\ta?: TName | T['config'],\n\t\tb?: T['config'],\n\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<TName, T>> => {\n\t\tconst { name, config } = getColumnNameAndConfig<T['config']>(a, b);\n\t\treturn new SQLiteCustomColumnBuilder(\n\t\t\tname as ConvertCustomConfig<TName, T>['name'],\n\t\t\tconfig,\n\t\t\tcustomTypeParams,\n\t\t);\n\t};\n}\n", "import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tHasDefault,\n\tIsPrimaryKey,\n\tMakeColumnConfig,\n\tNotNull,\n} from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport { sql } from '~/sql/sql.ts';\nimport type { OnConflict } from '~/sqlite-core/utils.ts';\nimport { type Equal, getColumnNameAndConfig, type Or } from '~/utils.ts';\nimport type { AnySQLiteTable } from '../table.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport interface PrimaryKeyConfig {\n\tautoIncrement?: boolean;\n\tonConflict?: OnConflict;\n}\n\nexport abstract class SQLiteBaseIntegerBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends SQLiteColumnBuilder<\n\tT,\n\tTRuntimeConfig & { autoIncrement: boolean },\n\t{},\n\t{ primaryKeyHasDefault: true }\n> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBaseIntegerBuilder';\n\n\tconstructor(name: T['name'], dataType: T['dataType'], columnType: T['columnType']) {\n\t\tsuper(name, dataType, columnType);\n\t\tthis.config.autoIncrement = false;\n\t}\n\n\toverride primaryKey(config?: PrimaryKeyConfig): IsPrimaryKey<HasDefault<NotNull<this>>> {\n\t\tif (config?.autoIncrement) {\n\t\t\tthis.config.autoIncrement = true;\n\t\t}\n\t\tthis.config.hasDefault = true;\n\t\treturn super.primaryKey() as IsPrimaryKey<HasDefault<NotNull<this>>>;\n\t}\n\n\t/** @internal */\n\tabstract override build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBaseInteger<MakeColumnConfig<T, TTableName>>;\n}\n\nexport abstract class SQLiteBaseInteger<\n\tT extends ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends SQLiteColumn<T, TRuntimeConfig & { autoIncrement: boolean }> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBaseInteger';\n\n\treadonly autoIncrement: boolean = this.config.autoIncrement;\n\n\tgetSQLType(): string {\n\t\treturn 'integer';\n\t}\n}\n\nexport type SQLiteIntegerBuilderInitial<TName extends string> = SQLiteIntegerBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'SQLiteInteger';\n\tdata: number;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteIntegerBuilder<T extends ColumnBuilderBaseConfig<'number', 'SQLiteInteger'>>\n\textends SQLiteBaseIntegerBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteIntegerBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'SQLiteInteger');\n\t}\n\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteInteger<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteInteger<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteInteger<T extends ColumnBaseConfig<'number', 'SQLiteInteger'>> extends SQLiteBaseInteger<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteInteger';\n}\n\nexport type SQLiteTimestampBuilderInitial<TName extends string> = SQLiteTimestampBuilder<{\n\tname: TName;\n\tdataType: 'date';\n\tcolumnType: 'SQLiteTimestamp';\n\tdata: Date;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteTimestampBuilder<T extends ColumnBuilderBaseConfig<'date', 'SQLiteTimestamp'>>\n\textends SQLiteBaseIntegerBuilder<T, { mode: 'timestamp' | 'timestamp_ms' }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteTimestampBuilder';\n\n\tconstructor(name: T['name'], mode: 'timestamp' | 'timestamp_ms') {\n\t\tsuper(name, 'date', 'SQLiteTimestamp');\n\t\tthis.config.mode = mode;\n\t}\n\n\t/**\n\t * @deprecated Use `default()` with your own expression instead.\n\t *\n\t * Adds `DEFAULT (cast((julianday('now') - 2440587.5)*86400000 as integer))` to the column, which is the current epoch timestamp in milliseconds.\n\t */\n\tdefaultNow(): HasDefault<this> {\n\t\treturn this.default(sql`(cast((julianday('now') - 2440587.5)*86400000 as integer))`) as any;\n\t}\n\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteTimestamp<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteTimestamp<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteTimestamp<T extends ColumnBaseConfig<'date', 'SQLiteTimestamp'>>\n\textends SQLiteBaseInteger<T, { mode: 'timestamp' | 'timestamp_ms' }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteTimestamp';\n\n\treadonly mode: 'timestamp' | 'timestamp_ms' = this.config.mode;\n\n\toverride mapFromDriverValue(value: number): Date {\n\t\tif (this.config.mode === 'timestamp') {\n\t\t\treturn new Date(value * 1000);\n\t\t}\n\t\treturn new Date(value);\n\t}\n\n\toverride mapToDriverValue(value: Date): number {\n\t\tconst unix = value.getTime();\n\t\tif (this.config.mode === 'timestamp') {\n\t\t\treturn Math.floor(unix / 1000);\n\t\t}\n\t\treturn unix;\n\t}\n}\n\nexport type SQLiteBooleanBuilderInitial<TName extends string> = SQLiteBooleanBuilder<{\n\tname: TName;\n\tdataType: 'boolean';\n\tcolumnType: 'SQLiteBoolean';\n\tdata: boolean;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteBooleanBuilder<T extends ColumnBuilderBaseConfig<'boolean', 'SQLiteBoolean'>>\n\textends SQLiteBaseIntegerBuilder<T, { mode: 'boolean' }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBooleanBuilder';\n\n\tconstructor(name: T['name'], mode: 'boolean') {\n\t\tsuper(name, 'boolean', 'SQLiteBoolean');\n\t\tthis.config.mode = mode;\n\t}\n\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBoolean<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBoolean<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteBoolean<T extends ColumnBaseConfig<'boolean', 'SQLiteBoolean'>>\n\textends SQLiteBaseInteger<T, { mode: 'boolean' }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBoolean';\n\n\treadonly mode: 'boolean' = this.config.mode;\n\n\toverride mapFromDriverValue(value: number): boolean {\n\t\treturn Number(value) === 1;\n\t}\n\n\toverride mapToDriverValue(value: boolean): number {\n\t\treturn value ? 1 : 0;\n\t}\n}\n\nexport interface IntegerConfig<\n\tTMode extends 'number' | 'timestamp' | 'timestamp_ms' | 'boolean' =\n\t\t| 'number'\n\t\t| 'timestamp'\n\t\t| 'timestamp_ms'\n\t\t| 'boolean',\n> {\n\tmode: TMode;\n}\n\nexport function integer(): SQLiteIntegerBuilderInitial<''>;\nexport function integer<TMode extends IntegerConfig['mode']>(\n\tconfig?: IntegerConfig<TMode>,\n): Or<Equal<TMode, 'timestamp'>, Equal<TMode, 'timestamp_ms'>> extends true ? SQLiteTimestampBuilderInitial<''>\n\t: Equal<TMode, 'boolean'> extends true ? SQLiteBooleanBuilderInitial<''>\n\t: SQLiteIntegerBuilderInitial<''>;\nexport function integer<TName extends string, TMode extends IntegerConfig['mode']>(\n\tname: TName,\n\tconfig?: IntegerConfig<TMode>,\n): Or<Equal<TMode, 'timestamp'>, Equal<TMode, 'timestamp_ms'>> extends true ? SQLiteTimestampBuilderInitial<TName>\n\t: Equal<TMode, 'boolean'> extends true ? SQLiteBooleanBuilderInitial<TName>\n\t: SQLiteIntegerBuilderInitial<TName>;\nexport function integer(a?: string | IntegerConfig, b?: IntegerConfig) {\n\tconst { name, config } = getColumnNameAndConfig<IntegerConfig | undefined>(a, b);\n\tif (config?.mode === 'timestamp' || config?.mode === 'timestamp_ms') {\n\t\treturn new SQLiteTimestampBuilder(name, config.mode);\n\t}\n\tif (config?.mode === 'boolean') {\n\t\treturn new SQLiteBooleanBuilder(name, config.mode);\n\t}\n\treturn new SQLiteIntegerBuilder(name);\n}\n\nexport const int = integer;\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type SQLiteNumericBuilderInitial<TName extends string> = SQLiteNumericBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'SQLiteNumeric';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteNumericBuilder<T extends ColumnBuilderBaseConfig<'string', 'SQLiteNumeric'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteNumericBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'SQLiteNumeric');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteNumeric<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteNumeric<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteNumeric<T extends ColumnBaseConfig<'string', 'SQLiteNumeric'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteNumeric';\n\n\toverride mapFromDriverValue(value: unknown): string {\n\t\tif (typeof value === 'string') return value;\n\n\t\treturn String(value);\n\t}\n\n\tgetSQLType(): string {\n\t\treturn 'numeric';\n\t}\n}\n\nexport type SQLiteNumericNumberBuilderInitial<TName extends string> = SQLiteNumericNumberBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'SQLiteNumericNumber';\n\tdata: number;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteNumericNumberBuilder<T extends ColumnBuilderBaseConfig<'number', 'SQLiteNumericNumber'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteNumericNumberBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'SQLiteNumericNumber');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteNumericNumber<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteNumericNumber<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteNumericNumber<T extends ColumnBaseConfig<'number', 'SQLiteNumericNumber'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteNumericNumber';\n\n\toverride mapFromDriverValue(value: unknown): number {\n\t\tif (typeof value === 'number') return value;\n\n\t\treturn Number(value);\n\t}\n\n\toverride mapToDriverValue = String;\n\n\tgetSQLType(): string {\n\t\treturn 'numeric';\n\t}\n}\n\nexport type SQLiteNumericBigIntBuilderInitial<TName extends string> = SQLiteNumericBigIntBuilder<{\n\tname: TName;\n\tdataType: 'bigint';\n\tcolumnType: 'SQLiteNumericBigInt';\n\tdata: bigint;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteNumericBigIntBuilder<T extends ColumnBuilderBaseConfig<'bigint', 'SQLiteNumericBigInt'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteNumericBigIntBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'bigint', 'SQLiteNumericBigInt');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteNumericBigInt<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteNumericBigInt<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteNumericBigInt<T extends ColumnBaseConfig<'bigint', 'SQLiteNumericBigInt'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteNumericBigInt';\n\n\toverride mapFromDriverValue = BigInt;\n\n\toverride mapToDriverValue = String;\n\n\tgetSQLType(): string {\n\t\treturn 'numeric';\n\t}\n}\n\nexport type SQLiteNumericConfig<T extends 'string' | 'number' | 'bigint' = 'string' | 'number' | 'bigint'> = {\n\tmode: T;\n};\n\nexport function numeric<TMode extends SQLiteNumericConfig['mode']>(\n\tconfig?: SQLiteNumericConfig<TMode>,\n): Equal<TMode, 'number'> extends true ? SQLiteNumericNumberBuilderInitial<''>\n\t: Equal<TMode, 'bigint'> extends true ? SQLiteNumericBigIntBuilderInitial<''>\n\t: SQLiteNumericBuilderInitial<''>;\nexport function numeric<TName extends string, TMode extends SQLiteNumericConfig['mode']>(\n\tname: TName,\n\tconfig?: SQLiteNumericConfig<TMode>,\n): Equal<TMode, 'number'> extends true ? SQLiteNumericNumberBuilderInitial<TName>\n\t: Equal<TMode, 'bigint'> extends true ? SQLiteNumericBigIntBuilderInitial<TName>\n\t: SQLiteNumericBuilderInitial<TName>;\nexport function numeric(a?: string | SQLiteNumericConfig, b?: SQLiteNumericConfig) {\n\tconst { name, config } = getColumnNameAndConfig<SQLiteNumericConfig>(a, b);\n\tconst mode = config?.mode;\n\treturn mode === 'number'\n\t\t? new SQLiteNumericNumberBuilder(name)\n\t\t: mode === 'bigint'\n\t\t? new SQLiteNumericBigIntBuilder(name)\n\t\t: new SQLiteNumericBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '../table.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type SQLiteRealBuilderInitial<TName extends string> = SQLiteRealBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'SQLiteReal';\n\tdata: number;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteRealBuilder<T extends ColumnBuilderBaseConfig<'number', 'SQLiteReal'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteRealBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'SQLiteReal');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteReal<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteReal<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class SQLiteReal<T extends ColumnBaseConfig<'number', 'SQLiteReal'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteReal';\n\n\tgetSQLType(): string {\n\t\treturn 'real';\n\t}\n}\n\nexport function real(): SQLiteRealBuilderInitial<''>;\nexport function real<TName extends string>(name: TName): SQLiteRealBuilderInitial<TName>;\nexport function real(name?: string) {\n\treturn new SQLiteRealBuilder(name ?? '');\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport { type Equal, getColumnNameAndConfig, type Writable } from '~/utils.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type SQLiteTextBuilderInitial<\n\tTName extends string,\n\tTEnum extends [string, ...string[]],\n\tTLength extends number | undefined,\n> = SQLiteTextBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'SQLiteText';\n\tdata: TEnum[number];\n\tdriverParam: string;\n\tenumValues: TEnum;\n\tlength: TLength;\n}>;\n\nexport class SQLiteTextBuilder<\n\tT extends ColumnBuilderBaseConfig<'string', 'SQLiteText'> & { length?: number | undefined },\n> extends SQLiteColumnBuilder<\n\tT,\n\t{ length: T['length']; enumValues: T['enumValues'] },\n\t{ length: T['length'] }\n> {\n\tstatic override readonly [entityKind]: string = 'SQLiteTextBuilder';\n\n\tconstructor(name: T['name'], config: SQLiteTextConfig<'text', T['enumValues'], T['length']>) {\n\t\tsuper(name, 'string', 'SQLiteText');\n\t\tthis.config.enumValues = config.enum;\n\t\tthis.config.length = config.length;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteText<MakeColumnConfig<T, TTableName> & { length: T['length'] }> {\n\t\treturn new SQLiteText<MakeColumnConfig<T, TTableName> & { length: T['length'] }>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteText<T extends ColumnBaseConfig<'string', 'SQLiteText'> & { length?: number | undefined }>\n\textends SQLiteColumn<T, { length: T['length']; enumValues: T['enumValues'] }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteText';\n\n\toverride readonly enumValues = this.config.enumValues;\n\n\treadonly length: T['length'] = this.config.length;\n\n\tconstructor(\n\t\ttable: AnySQLiteTable<{ name: T['tableName'] }>,\n\t\tconfig: SQLiteTextBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t}\n\n\tgetSQLType(): string {\n\t\treturn `text${this.config.length ? `(${this.config.length})` : ''}`;\n\t}\n}\n\nexport type SQLiteTextJsonBuilderInitial<TName extends string> = SQLiteTextJsonBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'SQLiteTextJson';\n\tdata: unknown;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class SQLiteTextJsonBuilder<T extends ColumnBuilderBaseConfig<'json', 'SQLiteTextJson'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteTextJsonBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'SQLiteTextJson');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteTextJson<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteTextJson<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteTextJson<T extends ColumnBaseConfig<'json', 'SQLiteTextJson'>>\n\textends SQLiteColumn<T, { length: number | undefined; enumValues: T['enumValues'] }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteTextJson';\n\n\tgetSQLType(): string {\n\t\treturn 'text';\n\t}\n\n\toverride mapFromDriverValue(value: string): T['data'] {\n\t\treturn JSON.parse(value);\n\t}\n\n\toverride mapToDriverValue(value: T['data']): string {\n\t\treturn JSON.stringify(value);\n\t}\n}\n\nexport type SQLiteTextConfig<\n\tTMode extends 'text' | 'json' = 'text' | 'json',\n\tTEnum extends readonly string[] | string[] | undefined = readonly string[] | string[] | undefined,\n\tTLength extends number | undefined = number | undefined,\n> = TMode extends 'text' ? {\n\t\tmode?: TMode;\n\t\tlength?: TLength;\n\t\tenum?: TEnum;\n\t}\n\t: {\n\t\tmode?: TMode;\n\t};\n\nexport function text(): SQLiteTextBuilderInitial<'', [string, ...string[]], undefined>;\nexport function text<\n\tU extends string,\n\tT extends Readonly<[U, ...U[]]>,\n\tL extends number | undefined,\n\tTMode extends 'text' | 'json' = 'text' | 'json',\n>(\n\tconfig?: SQLiteTextConfig<TMode, T | Writable<T>, L>,\n): Equal<TMode, 'json'> extends true ? SQLiteTextJsonBuilderInitial<''>\n\t: SQLiteTextBuilderInitial<'', Writable<T>, L>;\nexport function text<\n\tTName extends string,\n\tU extends string,\n\tT extends Readonly<[U, ...U[]]>,\n\tL extends number | undefined,\n\tTMode extends 'text' | 'json' = 'text' | 'json',\n>(\n\tname: TName,\n\tconfig?: SQLiteTextConfig<TMode, T | Writable<T>, L>,\n): Equal<TMode, 'json'> extends true ? SQLiteTextJsonBuilderInitial<TName>\n\t: SQLiteTextBuilderInitial<TName, Writable<T>, L>;\nexport function text(a?: string | SQLiteTextConfig, b: SQLiteTextConfig = {}): any {\n\tconst { name, config } = getColumnNameAndConfig<SQLiteTextConfig>(a, b);\n\tif (config.mode === 'json') {\n\t\treturn new SQLiteTextJsonBuilder(name);\n\t}\n\treturn new SQLiteTextBuilder(name, config as any);\n}\n", "import { entityKind, is } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Placeholder, Query, SQLWrapper } from '~/sql/sql.ts';\nimport { Param, SQL, sql } from '~/sql/sql.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { IndexColumn } from '~/sqlite-core/indexes.ts';\nimport type { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport { Columns, Table } from '~/table.ts';\nimport { type DrizzleTypeError, haveSameKeys, mapUpdateSet, orderSelectedFields, type Simplify } from '~/utils.ts';\nimport type { AnySQLiteColumn, SQLiteColumn } from '../columns/common.ts';\nimport { QueryBuilder } from './query-builder.ts';\nimport type { SelectedFieldsFlat, SelectedFieldsOrdered } from './select.types.ts';\nimport type { SQLiteUpdateSetSource } from './update.ts';\n\nexport interface SQLiteInsertConfig<TTable extends SQLiteTable = SQLiteTable> {\n\ttable: TTable;\n\tvalues: Record<string, Param | SQL>[] | SQLiteInsertSelectQueryBuilder<TTable> | SQL;\n\twithList?: Subquery[];\n\tonConflict?: SQL[];\n\treturning?: SelectedFieldsOrdered;\n\tselect?: boolean;\n}\n\nexport type SQLiteInsertValue<TTable extends SQLiteTable> = Simplify<\n\t{\n\t\t[Key in keyof TTable['$inferInsert']]: TTable['$inferInsert'][Key] | SQL | Placeholder;\n\t}\n>;\n\nexport type SQLiteInsertSelectQueryBuilder<TTable extends SQLiteTable> = TypedQueryBuilder<\n\t{ [K in keyof TTable['$inferInsert']]: AnySQLiteColumn | SQL | SQL.Aliased | TTable['$inferInsert'][K] }\n>;\n\nexport class SQLiteInsertBuilder<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteInsertBuilder';\n\n\tconstructor(\n\t\tprotected table: TTable,\n\t\tprotected session: SQLiteSession<any, any, any, any>,\n\t\tprotected dialect: SQLiteDialect,\n\t\tprivate withList?: Subquery[],\n\t) {}\n\n\tvalues(value: SQLiteInsertValue<TTable>): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tvalues(values: SQLiteInsertValue<TTable>[]): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tvalues(\n\t\tvalues: SQLiteInsertValue<TTable> | SQLiteInsertValue<TTable>[],\n\t): SQLiteInsertBase<TTable, TResultType, TRunResult> {\n\t\tvalues = Array.isArray(values) ? values : [values];\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('values() must be called with at least one value');\n\t\t}\n\t\tconst mappedValues = values.map((entry) => {\n\t\t\tconst result: Record<string, Param | SQL> = {};\n\t\t\tconst cols = this.table[Table.Symbol.Columns];\n\t\t\tfor (const colKey of Object.keys(entry)) {\n\t\t\t\tconst colValue = entry[colKey as keyof typeof entry];\n\t\t\t\tresult[colKey] = is(colValue, SQL) ? colValue : new Param(colValue, cols[colKey]);\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\n\t\t// if (mappedValues.length > 1 && mappedValues.some((t) => Object.keys(t).length === 0)) {\n\t\t// \tthrow new Error(\n\t\t// \t\t`One of the values you want to insert is empty. In SQLite you can insert only one empty object per statement. For this case Drizzle with use \"INSERT INTO ... DEFAULT VALUES\" syntax`,\n\t\t// \t);\n\t\t// }\n\n\t\treturn new SQLiteInsertBase(this.table, mappedValues, this.session, this.dialect, this.withList);\n\t}\n\n\tselect(\n\t\tselectQuery: (qb: QueryBuilder) => SQLiteInsertSelectQueryBuilder<TTable>,\n\t): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tselect(selectQuery: (qb: QueryBuilder) => SQL): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tselect(selectQuery: SQL): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tselect(selectQuery: SQLiteInsertSelectQueryBuilder<TTable>): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tselect(\n\t\tselectQuery:\n\t\t\t| SQL\n\t\t\t| SQLiteInsertSelectQueryBuilder<TTable>\n\t\t\t| ((qb: QueryBuilder) => SQLiteInsertSelectQueryBuilder<TTable> | SQL),\n\t): SQLiteInsertBase<TTable, TResultType, TRunResult> {\n\t\tconst select = typeof selectQuery === 'function' ? selectQuery(new QueryBuilder()) : selectQuery;\n\n\t\tif (\n\t\t\t!is(select, SQL)\n\t\t\t&& !haveSameKeys(this.table[Columns], select._.selectedFields)\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t'Insert select error: selected fields are not the same or are in a different order compared to the table definition',\n\t\t\t);\n\t\t}\n\n\t\treturn new SQLiteInsertBase(this.table, select, this.session, this.dialect, this.withList, true);\n\t}\n}\n\nexport type SQLiteInsertWithout<T extends AnySQLiteInsert, TDynamic extends boolean, K extends keyof T & string> =\n\tTDynamic extends true ? T\n\t\t: Omit<\n\t\t\tSQLiteInsertBase<\n\t\t\t\tT['_']['table'],\n\t\t\t\tT['_']['resultType'],\n\t\t\t\tT['_']['runResult'],\n\t\t\t\tT['_']['returning'],\n\t\t\t\tTDynamic,\n\t\t\t\tT['_']['excludedMethods'] | K\n\t\t\t>,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>;\n\nexport type SQLiteInsertReturning<\n\tT extends AnySQLiteInsert,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFieldsFlat,\n> = SQLiteInsertWithout<\n\tSQLiteInsertBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteInsertReturningAll<\n\tT extends AnySQLiteInsert,\n\tTDynamic extends boolean,\n> = SQLiteInsertWithout<\n\tSQLiteInsertBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteInsertOnConflictDoUpdateConfig<T extends AnySQLiteInsert> = {\n\ttarget: IndexColumn | IndexColumn[];\n\t/** @deprecated - use either `targetWhere` or `setWhere` */\n\twhere?: SQL;\n\t// TODO: add tests for targetWhere and setWhere\n\ttargetWhere?: SQL;\n\tsetWhere?: SQL;\n\tset: SQLiteUpdateSetSource<T['_']['table']>;\n};\n\nexport type SQLiteInsertDynamic<T extends AnySQLiteInsert> = SQLiteInsert<\n\tT['_']['table'],\n\tT['_']['resultType'],\n\tT['_']['runResult'],\n\tT['_']['returning']\n>;\n\nexport type SQLiteInsertExecute<T extends AnySQLiteInsert> = T['_']['returning'] extends undefined ? T['_']['runResult']\n\t: T['_']['returning'][];\n\nexport type SQLiteInsertPrepare<T extends AnySQLiteInsert> = SQLitePreparedQuery<\n\t{\n\t\ttype: T['_']['resultType'];\n\t\trun: T['_']['runResult'];\n\t\tall: T['_']['returning'] extends undefined ? DrizzleTypeError<'.all() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'][];\n\t\tget: T['_']['returning'] extends undefined ? DrizzleTypeError<'.get() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'];\n\t\tvalues: T['_']['returning'] extends undefined ? DrizzleTypeError<'.values() cannot be used without .returning()'>\n\t\t\t: any[][];\n\t\texecute: SQLiteInsertExecute<T>;\n\t}\n>;\n\nexport type AnySQLiteInsert = SQLiteInsertBase<any, any, any, any, any, any>;\n\nexport type SQLiteInsert<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTReturning = any,\n> = SQLiteInsertBase<TTable, TResultType, TRunResult, TReturning, true, never>;\n\nexport interface SQLiteInsertBase<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tSQLWrapper,\n\tQueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>\n{\n\treadonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly table: TTable;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? TRunResult : TReturning[];\n\t};\n}\n\nexport class SQLiteInsertBase<\n\tTTable extends SQLiteTable,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>\n\timplements RunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteInsert';\n\n\t/** @internal */\n\tconfig: SQLiteInsertConfig<TTable>;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tvalues: SQLiteInsertConfig['values'],\n\t\tprivate session: SQLiteSession<any, any, any, any>,\n\t\tprivate dialect: SQLiteDialect,\n\t\twithList?: Subquery[],\n\t\tselect?: boolean,\n\t) {\n\t\tsuper();\n\t\tthis.config = { table, values: values as any, withList, select };\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the inserted rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#insert-returning}\n\t *\n\t * @example\n\t * ```ts\n\t * // Insert one row and return all fields\n\t * const insertedCar: Car[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning();\n\t *\n\t * // Insert one row and return only the id\n\t * const insertedCarId: { id: number }[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning({ id: cars.id });\n\t * ```\n\t */\n\treturning(): SQLiteInsertReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFieldsFlat>(\n\t\tfields: TSelectedFields,\n\t): SQLiteInsertReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFieldsFlat = this.config.table[SQLiteTable.Symbol.Columns],\n\t): SQLiteInsertWithout<AnySQLiteInsert, TDynamic, 'returning'> {\n\t\tthis.config.returning = orderSelectedFields<SQLiteColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `on conflict do nothing` clause to the query.\n\t *\n\t * Calling this method simply avoids inserting a row as its alternative action.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#on-conflict-do-nothing}\n\t *\n\t * @param config The `target` and `where` clauses.\n\t *\n\t * @example\n\t * ```ts\n\t * // Insert one row and cancel the insert if there's a conflict\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoNothing();\n\t *\n\t * // Explicitly specify conflict target\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoNothing({ target: cars.id });\n\t * ```\n\t */\n\tonConflictDoNothing(config: { target?: IndexColumn | IndexColumn[]; where?: SQL } = {}): this {\n\t\tif (!this.config.onConflict) this.config.onConflict = [];\n\n\t\tif (config.target === undefined) {\n\t\t\tthis.config.onConflict.push(sql` on conflict do nothing`);\n\t\t} else {\n\t\t\tconst targetSql = Array.isArray(config.target) ? sql`${config.target}` : sql`${[config.target]}`;\n\t\t\tconst whereSql = config.where ? sql` where ${config.where}` : sql``;\n\t\t\tthis.config.onConflict.push(sql` on conflict ${targetSql} do nothing${whereSql}`);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds an `on conflict do update` clause to the query.\n\t *\n\t * Calling this method will update the existing row that conflicts with the row proposed for insertion as its alternative action.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#upserts-and-conflicts}\n\t *\n\t * @param config The `target`, `set` and `where` clauses.\n\t *\n\t * @example\n\t * ```ts\n\t * // Update the row if there's a conflict\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoUpdate({\n\t *     target: cars.id,\n\t *     set: { brand: 'Porsche' }\n\t *   });\n\t *\n\t * // Upsert with 'where' clause\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoUpdate({\n\t *     target: cars.id,\n\t *     set: { brand: 'newBMW' },\n\t *     where: sql`${cars.createdAt} > '2023-01-01'::date`,\n\t *   });\n\t * ```\n\t */\n\tonConflictDoUpdate(config: SQLiteInsertOnConflictDoUpdateConfig<this>): this {\n\t\tif (config.where && (config.targetWhere || config.setWhere)) {\n\t\t\tthrow new Error(\n\t\t\t\t'You cannot use both \"where\" and \"targetWhere\"/\"setWhere\" at the same time - \"where\" is deprecated, use \"targetWhere\" or \"setWhere\" instead.',\n\t\t\t);\n\t\t}\n\n\t\tif (!this.config.onConflict) this.config.onConflict = [];\n\n\t\tconst whereSql = config.where ? sql` where ${config.where}` : undefined;\n\t\tconst targetWhereSql = config.targetWhere ? sql` where ${config.targetWhere}` : undefined;\n\t\tconst setWhereSql = config.setWhere ? sql` where ${config.setWhere}` : undefined;\n\t\tconst targetSql = Array.isArray(config.target) ? sql`${config.target}` : sql`${[config.target]}`;\n\t\tconst setSql = this.dialect.buildUpdateSet(this.config.table, mapUpdateSet(this.config.table, config.set));\n\t\tthis.config.onConflict.push(\n\t\t\tsql` on conflict ${targetSql}${targetWhereSql} do update set ${setSql}${whereSql}${setWhereSql}`,\n\t\t);\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildInsertQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteInsertPrepare<this> {\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t\tthis.config.returning ? 'all' : 'run',\n\t\t\ttrue,\n\t\t) as SQLiteInsertPrepare<this>;\n\t}\n\n\tprepare(): SQLiteInsertPrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\toverride async execute(): Promise<SQLiteInsertExecute<this>> {\n\t\treturn (this.config.returning ? this.all() : this.run()) as SQLiteInsertExecute<this>;\n\t}\n\n\t$dynamic(): SQLiteInsertDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n", "import { entityKind, is } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection, SQL } from '~/sql/sql.ts';\nimport type { SQLiteDialectConfig } from '~/sqlite-core/dialect.ts';\nimport { SQLiteDialect, SQLiteSyncDialect } from '~/sqlite-core/dialect.ts';\nimport type { WithBuilder } from '~/sqlite-core/subquery.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport { SQLiteSelectBuilder } from './select.ts';\nimport type { SelectedFields } from './select.types.ts';\n\nexport class QueryBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteQueryBuilder';\n\n\tprivate dialect: SQLiteDialect | undefined;\n\tprivate dialectConfig: SQLiteDialectConfig | undefined;\n\n\tconstructor(dialect?: SQLiteDialect | SQLiteDialectConfig) {\n\t\tthis.dialect = is(dialect, SQLiteDialect) ? dialect : undefined;\n\t\tthis.dialectConfig = is(dialect, SQLiteDialect) ? undefined : dialect;\n\t}\n\n\t$with: WithBuilder = (alias: string, selection?: ColumnsSelection) => {\n\t\tconst queryBuilder = this;\n\t\tconst as = (\n\t\t\tqb:\n\t\t\t\t| TypedQueryBuilder<ColumnsSelection | undefined>\n\t\t\t\t| SQL\n\t\t\t\t| ((qb: QueryBuilder) => TypedQueryBuilder<ColumnsSelection | undefined> | SQL),\n\t\t) => {\n\t\t\tif (typeof qb === 'function') {\n\t\t\t\tqb = qb(queryBuilder);\n\t\t\t}\n\n\t\t\treturn new Proxy(\n\t\t\t\tnew WithSubquery(\n\t\t\t\t\tqb.getSQL(),\n\t\t\t\t\tselection ?? ('getSelectedFields' in qb ? qb.getSelectedFields() ?? {} : {}) as SelectedFields,\n\t\t\t\t\talias,\n\t\t\t\t\ttrue,\n\t\t\t\t),\n\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t) as any;\n\t\t};\n\t\treturn { as };\n\t};\n\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\tfunction select(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\tfunction selectDistinct(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\treturn { select, selectDistinct };\n\t}\n\n\tselect(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields?: TSelection,\n\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\treturn new SQLiteSelectBuilder({ fields: fields ?? undefined, session: undefined, dialect: this.getDialect() });\n\t}\n\n\tselectDistinct(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields?: TSelection,\n\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\treturn new SQLiteSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: undefined,\n\t\t\tdialect: this.getDialect(),\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\t// Lazy load dialect to avoid circular dependency\n\tprivate getDialect() {\n\t\tif (!this.dialect) {\n\t\t\tthis.dialect = new SQLiteSyncDialect(this.dialectConfig);\n\t\t}\n\n\t\treturn this.dialect;\n\t}\n}\n", "import { aliasedTable, aliasedTableColumn, mapColumnsInAliasedSQLToAlias, mapColumnsInSQLToAlias } from '~/alias.ts';\nimport { CasingCache } from '~/casing.ts';\nimport type { AnyColumn } from '~/column.ts';\nimport { Column } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport { DrizzleError } from '~/errors.ts';\nimport type { MigrationConfig, MigrationMeta } from '~/migrator.ts';\nimport {\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tgetOperators,\n\tgetOrderByOperators,\n\tMany,\n\tnormalizeRelation,\n\tOne,\n\ttype Relation,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport type { Name, Placeholder } from '~/sql/index.ts';\nimport { and, eq } from '~/sql/index.ts';\nimport { Param, type QueryWithTypings, SQL, sql, type SQLChunk } from '~/sql/sql.ts';\nimport { SQLiteColumn } from '~/sqlite-core/columns/index.ts';\nimport type {\n\tAnySQLiteSelectQueryBuilder,\n\tSQLiteDeleteConfig,\n\tSQLiteInsertConfig,\n\tSQLiteUpdateConfig,\n} from '~/sqlite-core/query-builders/index.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { getTableName, getTableUniqueName, Table } from '~/table.ts';\nimport { type Casing, orderSelectedFields, type UpdateSet } from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type {\n\tSelectedFieldsOrdered,\n\tSQLiteSelectConfig,\n\tSQLiteSelectJoinConfig,\n} from './query-builders/select.types.ts';\nimport type { SQLiteSession } from './session.ts';\nimport { SQLiteViewBase } from './view-base.ts';\n\nexport interface SQLiteDialectConfig {\n\tcasing?: Casing;\n}\n\nexport abstract class SQLiteDialect {\n\tstatic readonly [entityKind]: string = 'SQLiteDialect';\n\n\t/** @internal */\n\treadonly casing: CasingCache;\n\n\tconstructor(config?: SQLiteDialectConfig) {\n\t\tthis.casing = new CasingCache(config?.casing);\n\t}\n\n\tescapeName(name: string): string {\n\t\treturn `\"${name}\"`;\n\t}\n\n\tescapeParam(_num: number): string {\n\t\treturn '?';\n\t}\n\n\tescapeString(str: string): string {\n\t\treturn `'${str.replace(/'/g, \"''\")}'`;\n\t}\n\n\tprivate buildWithCTE(queries: Subquery[] | undefined): SQL | undefined {\n\t\tif (!queries?.length) return undefined;\n\n\t\tconst withSqlChunks = [sql`with `];\n\t\tfor (const [i, w] of queries.entries()) {\n\t\t\twithSqlChunks.push(sql`${sql.identifier(w._.alias)} as (${w._.sql})`);\n\t\t\tif (i < queries.length - 1) {\n\t\t\t\twithSqlChunks.push(sql`, `);\n\t\t\t}\n\t\t}\n\t\twithSqlChunks.push(sql` `);\n\t\treturn sql.join(withSqlChunks);\n\t}\n\n\tbuildDeleteQuery({ table, where, returning, withList, limit, orderBy }: SQLiteDeleteConfig): SQL {\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\tconst orderBySql = this.buildOrderBy(orderBy);\n\n\t\tconst limitSql = this.buildLimit(limit);\n\n\t\treturn sql`${withSql}delete from ${table}${whereSql}${returningSql}${orderBySql}${limitSql}`;\n\t}\n\n\tbuildUpdateSet(table: SQLiteTable, set: UpdateSet): SQL {\n\t\tconst tableColumns = table[Table.Symbol.Columns];\n\n\t\tconst columnNames = Object.keys(tableColumns).filter((colName) =>\n\t\t\tset[colName] !== undefined || tableColumns[colName]?.onUpdateFn !== undefined\n\t\t);\n\n\t\tconst setSize = columnNames.length;\n\t\treturn sql.join(columnNames.flatMap((colName, i) => {\n\t\t\tconst col = tableColumns[colName]!;\n\n\t\t\tconst value = set[colName] ?? sql.param(col.onUpdateFn!(), col);\n\t\t\tconst res = sql`${sql.identifier(this.casing.getColumnCasing(col))} = ${value}`;\n\n\t\t\tif (i < setSize - 1) {\n\t\t\t\treturn [res, sql.raw(', ')];\n\t\t\t}\n\t\t\treturn [res];\n\t\t}));\n\t}\n\n\tbuildUpdateQuery({ table, set, where, returning, withList, joins, from, limit, orderBy }: SQLiteUpdateConfig): SQL {\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst setSql = this.buildUpdateSet(table, set);\n\n\t\tconst fromSql = from && sql.join([sql.raw(' from '), this.buildFromTable(from)]);\n\n\t\tconst joinsSql = this.buildJoins(joins);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\tconst orderBySql = this.buildOrderBy(orderBy);\n\n\t\tconst limitSql = this.buildLimit(limit);\n\n\t\treturn sql`${withSql}update ${table} set ${setSql}${fromSql}${joinsSql}${whereSql}${returningSql}${orderBySql}${limitSql}`;\n\t}\n\n\t/**\n\t * Builds selection SQL with provided fields/expressions\n\t *\n\t * Examples:\n\t *\n\t * `select <selection> from`\n\t *\n\t * `insert ... returning <selection>`\n\t *\n\t * If `isSingleTable` is true, then columns won't be prefixed with table name\n\t */\n\tprivate buildSelection(\n\t\tfields: SelectedFieldsOrdered,\n\t\t{ isSingleTable = false }: { isSingleTable?: boolean } = {},\n\t): SQL {\n\t\tconst columnsLen = fields.length;\n\n\t\tconst chunks = fields\n\t\t\t.flatMap(({ field }, i) => {\n\t\t\t\tconst chunk: SQLChunk[] = [];\n\n\t\t\t\tif (is(field, SQL.Aliased) && field.isSelectionField) {\n\t\t\t\t\tchunk.push(sql.identifier(field.fieldAlias));\n\t\t\t\t} else if (is(field, SQL.Aliased) || is(field, SQL)) {\n\t\t\t\t\tconst query = is(field, SQL.Aliased) ? field.sql : field;\n\n\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\tchunk.push(\n\t\t\t\t\t\t\tnew SQL(\n\t\t\t\t\t\t\t\tquery.queryChunks.map((c) => {\n\t\t\t\t\t\t\t\t\tif (is(c, Column)) {\n\t\t\t\t\t\t\t\t\t\treturn sql.identifier(this.casing.getColumnCasing(c));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn c;\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push(query);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is(field, SQL.Aliased)) {\n\t\t\t\t\t\tchunk.push(sql` as ${sql.identifier(field.fieldAlias)}`);\n\t\t\t\t\t}\n\t\t\t\t} else if (is(field, Column)) {\n\t\t\t\t\tconst tableName = field.table[Table.Symbol.Name];\n\t\t\t\t\tif (field.columnType === 'SQLiteNumericBigInt') {\n\t\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\t\tchunk.push(sql`cast(${sql.identifier(this.casing.getColumnCasing(field))} as text)`);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tchunk.push(\n\t\t\t\t\t\t\t\tsql`cast(${sql.identifier(tableName)}.${sql.identifier(this.casing.getColumnCasing(field))} as text)`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\t\tchunk.push(sql.identifier(this.casing.getColumnCasing(field)));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tchunk.push(sql`${sql.identifier(tableName)}.${sql.identifier(this.casing.getColumnCasing(field))}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (i < columnsLen - 1) {\n\t\t\t\t\tchunk.push(sql`, `);\n\t\t\t\t}\n\n\t\t\t\treturn chunk;\n\t\t\t});\n\n\t\treturn sql.join(chunks);\n\t}\n\n\tprivate buildJoins(joins: SQLiteSelectJoinConfig[] | undefined): SQL | undefined {\n\t\tif (!joins || joins.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst joinsArray: SQL[] = [];\n\n\t\tif (joins) {\n\t\t\tfor (const [index, joinMeta] of joins.entries()) {\n\t\t\t\tif (index === 0) {\n\t\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t\t}\n\t\t\t\tconst table = joinMeta.table;\n\t\t\t\tconst onSql = joinMeta.on ? sql` on ${joinMeta.on}` : undefined;\n\n\t\t\t\tif (is(table, SQLiteTable)) {\n\t\t\t\t\tconst tableName = table[SQLiteTable.Symbol.Name];\n\t\t\t\t\tconst tableSchema = table[SQLiteTable.Symbol.Schema];\n\t\t\t\t\tconst origTableName = table[SQLiteTable.Symbol.OriginalName];\n\t\t\t\t\tconst alias = tableName === origTableName ? undefined : joinMeta.alias;\n\t\t\t\t\tjoinsArray.push(\n\t\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join ${tableSchema ? sql`${sql.identifier(tableSchema)}.` : undefined}${\n\t\t\t\t\t\t\tsql.identifier(origTableName)\n\t\t\t\t\t\t}${alias && sql` ${sql.identifier(alias)}`}${onSql}`,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tjoinsArray.push(\n\t\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join ${table}${onSql}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (index < joins.length - 1) {\n\t\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn sql.join(joinsArray);\n\t}\n\n\tprivate buildLimit(limit: number | Placeholder | undefined): SQL | undefined {\n\t\treturn typeof limit === 'object' || (typeof limit === 'number' && limit >= 0)\n\t\t\t? sql` limit ${limit}`\n\t\t\t: undefined;\n\t}\n\n\tprivate buildOrderBy(orderBy: (SQLiteColumn | SQL | SQL.Aliased)[] | undefined): SQL | undefined {\n\t\tconst orderByList: (SQLiteColumn | SQL | SQL.Aliased)[] = [];\n\n\t\tif (orderBy) {\n\t\t\tfor (const [index, orderByValue] of orderBy.entries()) {\n\t\t\t\torderByList.push(orderByValue);\n\n\t\t\t\tif (index < orderBy.length - 1) {\n\t\t\t\t\torderByList.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn orderByList.length > 0 ? sql` order by ${sql.join(orderByList)}` : undefined;\n\t}\n\n\tprivate buildFromTable(\n\t\ttable: SQL | Subquery | SQLiteViewBase | SQLiteTable | undefined,\n\t): SQL | Subquery | SQLiteViewBase | SQLiteTable | undefined {\n\t\tif (is(table, Table) && table[Table.Symbol.IsAlias]) {\n\t\t\treturn sql`${sql`${sql.identifier(table[Table.Symbol.Schema] ?? '')}.`.if(table[Table.Symbol.Schema])}${\n\t\t\t\tsql.identifier(table[Table.Symbol.OriginalName])\n\t\t\t} ${sql.identifier(table[Table.Symbol.Name])}`;\n\t\t}\n\n\t\treturn table;\n\t}\n\n\tbuildSelectQuery(\n\t\t{\n\t\t\twithList,\n\t\t\tfields,\n\t\t\tfieldsFlat,\n\t\t\twhere,\n\t\t\thaving,\n\t\t\ttable,\n\t\t\tjoins,\n\t\t\torderBy,\n\t\t\tgroupBy,\n\t\t\tlimit,\n\t\t\toffset,\n\t\t\tdistinct,\n\t\t\tsetOperators,\n\t\t}: SQLiteSelectConfig,\n\t): SQL {\n\t\tconst fieldsList = fieldsFlat ?? orderSelectedFields<SQLiteColumn>(fields);\n\t\tfor (const f of fieldsList) {\n\t\t\tif (\n\t\t\t\tis(f.field, Column)\n\t\t\t\t&& getTableName(f.field.table)\n\t\t\t\t\t!== (is(table, Subquery)\n\t\t\t\t\t\t? table._.alias\n\t\t\t\t\t\t: is(table, SQLiteViewBase)\n\t\t\t\t\t\t? table[ViewBaseConfig].name\n\t\t\t\t\t\t: is(table, SQL)\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: getTableName(table))\n\t\t\t\t&& !((table) =>\n\t\t\t\t\tjoins?.some(({ alias }) =>\n\t\t\t\t\t\talias === (table[Table.Symbol.IsAlias] ? getTableName(table) : table[Table.Symbol.BaseName])\n\t\t\t\t\t))(f.field.table)\n\t\t\t) {\n\t\t\t\tconst tableName = getTableName(f.field.table);\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Your \"${\n\t\t\t\t\t\tf.path.join('->')\n\t\t\t\t\t}\" field references a column \"${tableName}\".\"${f.field.name}\", but the table \"${tableName}\" is not part of the query! Did you forget to join it?`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst isSingleTable = !joins || joins.length === 0;\n\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst distinctSql = distinct ? sql` distinct` : undefined;\n\n\t\tconst selection = this.buildSelection(fieldsList, { isSingleTable });\n\n\t\tconst tableSql = this.buildFromTable(table);\n\n\t\tconst joinsSql = this.buildJoins(joins);\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\tconst havingSql = having ? sql` having ${having}` : undefined;\n\n\t\tconst groupByList: (SQL | AnyColumn | SQL.Aliased)[] = [];\n\t\tif (groupBy) {\n\t\t\tfor (const [index, groupByValue] of groupBy.entries()) {\n\t\t\t\tgroupByList.push(groupByValue);\n\n\t\t\t\tif (index < groupBy.length - 1) {\n\t\t\t\t\tgroupByList.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst groupBySql = groupByList.length > 0 ? sql` group by ${sql.join(groupByList)}` : undefined;\n\n\t\tconst orderBySql = this.buildOrderBy(orderBy);\n\n\t\tconst limitSql = this.buildLimit(limit);\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\tconst finalQuery =\n\t\t\tsql`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}`;\n\n\t\tif (setOperators.length > 0) {\n\t\t\treturn this.buildSetOperations(finalQuery, setOperators);\n\t\t}\n\n\t\treturn finalQuery;\n\t}\n\n\tbuildSetOperations(leftSelect: SQL, setOperators: SQLiteSelectConfig['setOperators']): SQL {\n\t\tconst [setOperator, ...rest] = setOperators;\n\n\t\tif (!setOperator) {\n\t\t\tthrow new Error('Cannot pass undefined values to any set operator');\n\t\t}\n\n\t\tif (rest.length === 0) {\n\t\t\treturn this.buildSetOperationQuery({ leftSelect, setOperator });\n\t\t}\n\n\t\t// Some recursive magic here\n\t\treturn this.buildSetOperations(\n\t\t\tthis.buildSetOperationQuery({ leftSelect, setOperator }),\n\t\t\trest,\n\t\t);\n\t}\n\n\tbuildSetOperationQuery({\n\t\tleftSelect,\n\t\tsetOperator: { type, isAll, rightSelect, limit, orderBy, offset },\n\t}: { leftSelect: SQL; setOperator: SQLiteSelectConfig['setOperators'][number] }): SQL {\n\t\t// SQLite doesn't support parenthesis in set operations\n\t\tconst leftChunk = sql`${leftSelect.getSQL()} `;\n\t\tconst rightChunk = sql`${rightSelect.getSQL()}`;\n\n\t\tlet orderBySql;\n\t\tif (orderBy && orderBy.length > 0) {\n\t\t\tconst orderByValues: (SQL<unknown> | Name)[] = [];\n\n\t\t\t// The next bit is necessary because the sql operator replaces ${table.column} with `table`.`column`\n\t\t\t// which is invalid Sql syntax, Table from one of the SELECTs cannot be used in global ORDER clause\n\t\t\tfor (const singleOrderBy of orderBy) {\n\t\t\t\tif (is(singleOrderBy, SQLiteColumn)) {\n\t\t\t\t\torderByValues.push(sql.identifier(singleOrderBy.name));\n\t\t\t\t} else if (is(singleOrderBy, SQL)) {\n\t\t\t\t\tfor (let i = 0; i < singleOrderBy.queryChunks.length; i++) {\n\t\t\t\t\t\tconst chunk = singleOrderBy.queryChunks[i];\n\n\t\t\t\t\t\tif (is(chunk, SQLiteColumn)) {\n\t\t\t\t\t\t\tsingleOrderBy.queryChunks[i] = sql.identifier(this.casing.getColumnCasing(chunk));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\torderByValues.push(sql`${singleOrderBy}`);\n\t\t\t\t} else {\n\t\t\t\t\torderByValues.push(sql`${singleOrderBy}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\torderBySql = sql` order by ${sql.join(orderByValues, sql`, `)}`;\n\t\t}\n\n\t\tconst limitSql = typeof limit === 'object' || (typeof limit === 'number' && limit >= 0)\n\t\t\t? sql` limit ${limit}`\n\t\t\t: undefined;\n\n\t\tconst operatorChunk = sql.raw(`${type} ${isAll ? 'all ' : ''}`);\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\treturn sql`${leftChunk}${operatorChunk}${rightChunk}${orderBySql}${limitSql}${offsetSql}`;\n\t}\n\n\tbuildInsertQuery(\n\t\t{ table, values: valuesOrSelect, onConflict, returning, withList, select }: SQLiteInsertConfig,\n\t): SQL {\n\t\t// const isSingleValue = values.length === 1;\n\t\tconst valuesSqlList: ((SQLChunk | SQL)[] | SQL)[] = [];\n\t\tconst columns: Record<string, SQLiteColumn> = table[Table.Symbol.Columns];\n\n\t\tconst colEntries: [string, SQLiteColumn][] = Object.entries(columns).filter(([_, col]) =>\n\t\t\t!col.shouldDisableInsert()\n\t\t);\n\t\tconst insertOrder = colEntries.map(([, column]) => sql.identifier(this.casing.getColumnCasing(column)));\n\n\t\tif (select) {\n\t\t\tconst select = valuesOrSelect as AnySQLiteSelectQueryBuilder | SQL;\n\n\t\t\tif (is(select, SQL)) {\n\t\t\t\tvaluesSqlList.push(select);\n\t\t\t} else {\n\t\t\t\tvaluesSqlList.push(select.getSQL());\n\t\t\t}\n\t\t} else {\n\t\t\tconst values = valuesOrSelect as Record<string, Param | SQL>[];\n\t\t\tvaluesSqlList.push(sql.raw('values '));\n\n\t\t\tfor (const [valueIndex, value] of values.entries()) {\n\t\t\t\tconst valueList: (SQLChunk | SQL)[] = [];\n\t\t\t\tfor (const [fieldName, col] of colEntries) {\n\t\t\t\t\tconst colValue = value[fieldName];\n\t\t\t\t\tif (colValue === undefined || (is(colValue, Param) && colValue.value === undefined)) {\n\t\t\t\t\t\tlet defaultValue;\n\t\t\t\t\t\tif (col.default !== null && col.default !== undefined) {\n\t\t\t\t\t\t\tdefaultValue = is(col.default, SQL) ? col.default : sql.param(col.default, col);\n\t\t\t\t\t\t\t// eslint-disable-next-line unicorn/no-negated-condition\n\t\t\t\t\t\t} else if (col.defaultFn !== undefined) {\n\t\t\t\t\t\t\tconst defaultFnResult = col.defaultFn();\n\t\t\t\t\t\t\tdefaultValue = is(defaultFnResult, SQL) ? defaultFnResult : sql.param(defaultFnResult, col);\n\t\t\t\t\t\t\t// eslint-disable-next-line unicorn/no-negated-condition\n\t\t\t\t\t\t} else if (!col.default && col.onUpdateFn !== undefined) {\n\t\t\t\t\t\t\tconst onUpdateFnResult = col.onUpdateFn();\n\t\t\t\t\t\t\tdefaultValue = is(onUpdateFnResult, SQL) ? onUpdateFnResult : sql.param(onUpdateFnResult, col);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdefaultValue = sql`null`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvalueList.push(defaultValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalueList.push(colValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvaluesSqlList.push(valueList);\n\t\t\t\tif (valueIndex < values.length - 1) {\n\t\t\t\t\tvaluesSqlList.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst valuesSql = sql.join(valuesSqlList);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst onConflictSql = onConflict?.length\n\t\t\t? sql.join(onConflict)\n\t\t\t: undefined;\n\n\t\t// if (isSingleValue && valuesSqlList.length === 0){\n\t\t// \treturn sql`insert into ${table} default values ${onConflictSql}${returningSql}`;\n\t\t// }\n\n\t\treturn sql`${withSql}insert into ${table} ${insertOrder} ${valuesSql}${onConflictSql}${returningSql}`;\n\t}\n\n\tsqlToQuery(sql: SQL, invokeSource?: 'indexes' | undefined): QueryWithTypings {\n\t\treturn sql.toQuery({\n\t\t\tcasing: this.casing,\n\t\t\tescapeName: this.escapeName,\n\t\t\tescapeParam: this.escapeParam,\n\t\t\tescapeString: this.escapeString,\n\t\t\tinvokeSource,\n\t\t});\n\t}\n\n\tbuildRelationalQuery({\n\t\tfullSchema,\n\t\tschema,\n\t\ttableNamesMap,\n\t\ttable,\n\t\ttableConfig,\n\t\tqueryConfig: config,\n\t\ttableAlias,\n\t\tnestedQueryRelation,\n\t\tjoinOn,\n\t}: {\n\t\tfullSchema: Record<string, unknown>;\n\t\tschema: TablesRelationalConfig;\n\t\ttableNamesMap: Record<string, string>;\n\t\ttable: SQLiteTable;\n\t\ttableConfig: TableRelationalConfig;\n\t\tqueryConfig: true | DBQueryConfig<'many', true>;\n\t\ttableAlias: string;\n\t\tnestedQueryRelation?: Relation;\n\t\tjoinOn?: SQL;\n\t}): BuildRelationalQueryResult<SQLiteTable, SQLiteColumn> {\n\t\tlet selection: BuildRelationalQueryResult<SQLiteTable, SQLiteColumn>['selection'] = [];\n\t\tlet limit, offset, orderBy: SQLiteSelectConfig['orderBy'] = [], where;\n\t\tconst joins: SQLiteSelectJoinConfig[] = [];\n\n\t\tif (config === true) {\n\t\t\tconst selectionEntries = Object.entries(tableConfig.columns);\n\t\t\tselection = selectionEntries.map((\n\t\t\t\t[key, value],\n\t\t\t) => ({\n\t\t\t\tdbKey: value.name,\n\t\t\t\ttsKey: key,\n\t\t\t\tfield: aliasedTableColumn(value as SQLiteColumn, tableAlias),\n\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\tisJson: false,\n\t\t\t\tselection: [],\n\t\t\t}));\n\t\t} else {\n\t\t\tconst aliasedColumns = Object.fromEntries(\n\t\t\t\tObject.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)]),\n\t\t\t);\n\n\t\t\tif (config.where) {\n\t\t\t\tconst whereSql = typeof config.where === 'function'\n\t\t\t\t\t? config.where(aliasedColumns, getOperators())\n\t\t\t\t\t: config.where;\n\t\t\t\twhere = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n\t\t\t}\n\n\t\t\tconst fieldsSelection: { tsKey: string; value: SQLiteColumn | SQL.Aliased }[] = [];\n\t\t\tlet selectedColumns: string[] = [];\n\n\t\t\t// Figure out which columns to select\n\t\t\tif (config.columns) {\n\t\t\t\tlet isIncludeMode = false;\n\n\t\t\t\tfor (const [field, value] of Object.entries(config.columns)) {\n\t\t\t\t\tif (value === undefined) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (field in tableConfig.columns) {\n\t\t\t\t\t\tif (!isIncludeMode && value === true) {\n\t\t\t\t\t\t\tisIncludeMode = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tselectedColumns.push(field);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (selectedColumns.length > 0) {\n\t\t\t\t\tselectedColumns = isIncludeMode\n\t\t\t\t\t\t? selectedColumns.filter((c) => config.columns?.[c] === true)\n\t\t\t\t\t\t: Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Select all columns if selection is not specified\n\t\t\t\tselectedColumns = Object.keys(tableConfig.columns);\n\t\t\t}\n\n\t\t\tfor (const field of selectedColumns) {\n\t\t\t\tconst column = tableConfig.columns[field]! as SQLiteColumn;\n\t\t\t\tfieldsSelection.push({ tsKey: field, value: column });\n\t\t\t}\n\n\t\t\tlet selectedRelations: {\n\t\t\t\ttsKey: string;\n\t\t\t\tqueryConfig: true | DBQueryConfig<'many', false>;\n\t\t\t\trelation: Relation;\n\t\t\t}[] = [];\n\n\t\t\t// Figure out which relations to select\n\t\t\tif (config.with) {\n\t\t\t\tselectedRelations = Object.entries(config.with)\n\t\t\t\t\t.filter((entry): entry is [typeof entry[0], NonNullable<typeof entry[1]>] => !!entry[1])\n\t\t\t\t\t.map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey]! }));\n\t\t\t}\n\n\t\t\tlet extras;\n\n\t\t\t// Figure out which extras to select\n\t\t\tif (config.extras) {\n\t\t\t\textras = typeof config.extras === 'function'\n\t\t\t\t\t? config.extras(aliasedColumns, { sql })\n\t\t\t\t\t: config.extras;\n\t\t\t\tfor (const [tsKey, value] of Object.entries(extras)) {\n\t\t\t\t\tfieldsSelection.push({\n\t\t\t\t\t\ttsKey,\n\t\t\t\t\t\tvalue: mapColumnsInAliasedSQLToAlias(value, tableAlias),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Transform `fieldsSelection` into `selection`\n\t\t\t// `fieldsSelection` shouldn't be used after this point\n\t\t\tfor (const { tsKey, value } of fieldsSelection) {\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey]!.name,\n\t\t\t\t\ttsKey,\n\t\t\t\t\tfield: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n\t\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\t\tisJson: false,\n\t\t\t\t\tselection: [],\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet orderByOrig = typeof config.orderBy === 'function'\n\t\t\t\t? config.orderBy(aliasedColumns, getOrderByOperators())\n\t\t\t\t: config.orderBy ?? [];\n\t\t\tif (!Array.isArray(orderByOrig)) {\n\t\t\t\torderByOrig = [orderByOrig];\n\t\t\t}\n\t\t\torderBy = orderByOrig.map((orderByValue) => {\n\t\t\t\tif (is(orderByValue, Column)) {\n\t\t\t\t\treturn aliasedTableColumn(orderByValue, tableAlias) as SQLiteColumn;\n\t\t\t\t}\n\t\t\t\treturn mapColumnsInSQLToAlias(orderByValue, tableAlias);\n\t\t\t});\n\n\t\t\tlimit = config.limit;\n\t\t\toffset = config.offset;\n\n\t\t\t// Process all relations\n\t\t\tfor (\n\t\t\t\tconst {\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tqueryConfig: selectedRelationConfigValue,\n\t\t\t\t\trelation,\n\t\t\t\t} of selectedRelations\n\t\t\t) {\n\t\t\t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n\t\t\t\tconst relationTableName = getTableUniqueName(relation.referencedTable);\n\t\t\t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n\t\t\t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n\t\t\t\t// const relationTable = schema[relationTableTsName]!;\n\t\t\t\tconst joinOn = and(\n\t\t\t\t\t...normalizedRelation.fields.map((field, i) =>\n\t\t\t\t\t\teq(\n\t\t\t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n\t\t\t\t\t\t\taliasedTableColumn(field, tableAlias),\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tconst builtRelation = this.buildRelationalQuery({\n\t\t\t\t\tfullSchema,\n\t\t\t\t\tschema,\n\t\t\t\t\ttableNamesMap,\n\t\t\t\t\ttable: fullSchema[relationTableTsName] as SQLiteTable,\n\t\t\t\t\ttableConfig: schema[relationTableTsName]!,\n\t\t\t\t\tqueryConfig: is(relation, One)\n\t\t\t\t\t\t? (selectedRelationConfigValue === true\n\t\t\t\t\t\t\t? { limit: 1 }\n\t\t\t\t\t\t\t: { ...selectedRelationConfigValue, limit: 1 })\n\t\t\t\t\t\t: selectedRelationConfigValue,\n\t\t\t\t\ttableAlias: relationTableAlias,\n\t\t\t\t\tjoinOn,\n\t\t\t\t\tnestedQueryRelation: relation,\n\t\t\t\t});\n\t\t\t\tconst field = (sql`(${builtRelation.sql})`).as(selectedRelationTsKey);\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: selectedRelationTsKey,\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tfield,\n\t\t\t\t\trelationTableTsKey: relationTableTsName,\n\t\t\t\t\tisJson: true,\n\t\t\t\t\tselection: builtRelation.selection,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (selection.length === 0) {\n\t\t\tthrow new DrizzleError({\n\t\t\t\tmessage:\n\t\t\t\t\t`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\"). You need to have at least one item in \"columns\", \"with\" or \"extras\". If you need to select all columns, omit the \"columns\" key or set it to undefined.`,\n\t\t\t});\n\t\t}\n\n\t\tlet result;\n\n\t\twhere = and(joinOn, where);\n\n\t\tif (nestedQueryRelation) {\n\t\t\tlet field = sql`json_array(${\n\t\t\t\tsql.join(\n\t\t\t\t\tselection.map(({ field }) =>\n\t\t\t\t\t\tis(field, SQLiteColumn)\n\t\t\t\t\t\t\t? sql.identifier(this.casing.getColumnCasing(field))\n\t\t\t\t\t\t\t: is(field, SQL.Aliased)\n\t\t\t\t\t\t\t? field.sql\n\t\t\t\t\t\t\t: field\n\t\t\t\t\t),\n\t\t\t\t\tsql`, `,\n\t\t\t\t)\n\t\t\t})`;\n\t\t\tif (is(nestedQueryRelation, Many)) {\n\t\t\t\tfield = sql`coalesce(json_group_array(${field}), json_array())`;\n\t\t\t}\n\t\t\tconst nestedSelection = [{\n\t\t\t\tdbKey: 'data',\n\t\t\t\ttsKey: 'data',\n\t\t\t\tfield: field.as('data'),\n\t\t\t\tisJson: true,\n\t\t\t\trelationTableTsKey: tableConfig.tsName,\n\t\t\t\tselection,\n\t\t\t}];\n\n\t\t\tconst needsSubquery = limit !== undefined || offset !== undefined || orderBy.length > 0;\n\n\t\t\tif (needsSubquery) {\n\t\t\t\tresult = this.buildSelectQuery({\n\t\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\t\tfields: {},\n\t\t\t\t\tfieldsFlat: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: [],\n\t\t\t\t\t\t\tfield: sql.raw('*'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\twhere,\n\t\t\t\t\tlimit,\n\t\t\t\t\toffset,\n\t\t\t\t\torderBy,\n\t\t\t\t\tsetOperators: [],\n\t\t\t\t});\n\n\t\t\t\twhere = undefined;\n\t\t\t\tlimit = undefined;\n\t\t\t\toffset = undefined;\n\t\t\t\torderBy = undefined;\n\t\t\t} else {\n\t\t\t\tresult = aliasedTable(table, tableAlias);\n\t\t\t}\n\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: is(result, SQLiteTable) ? result : new Subquery(result, {}, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: nestedSelection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t} else {\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: selection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttableTsKey: tableConfig.tsName,\n\t\t\tsql: result,\n\t\t\tselection,\n\t\t};\n\t}\n}\n\nexport class SQLiteSyncDialect extends SQLiteDialect {\n\tstatic override readonly [entityKind]: string = 'SQLiteSyncDialect';\n\n\tmigrate(\n\t\tmigrations: MigrationMeta[],\n\t\tsession: SQLiteSession<'sync', unknown, Record<string, unknown>, TablesRelationalConfig>,\n\t\tconfig?: string | MigrationConfig,\n\t): void {\n\t\tconst migrationsTable = config === undefined\n\t\t\t? '__drizzle_migrations'\n\t\t\t: typeof config === 'string'\n\t\t\t? '__drizzle_migrations'\n\t\t\t: config.migrationsTable ?? '__drizzle_migrations';\n\n\t\tconst migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsTable)} (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at numeric\n\t\t\t)\n\t\t`;\n\t\tsession.run(migrationTableCreate);\n\n\t\tconst dbMigrations = session.values<[number, string, string]>(\n\t\t\tsql`SELECT id, hash, created_at FROM ${sql.identifier(migrationsTable)} ORDER BY created_at DESC LIMIT 1`,\n\t\t);\n\n\t\tconst lastDbMigration = dbMigrations[0] ?? undefined;\n\t\tsession.run(sql`BEGIN`);\n\n\t\ttry {\n\t\t\tfor (const migration of migrations) {\n\t\t\t\tif (!lastDbMigration || Number(lastDbMigration[2])! < migration.folderMillis) {\n\t\t\t\t\tfor (const stmt of migration.sql) {\n\t\t\t\t\t\tsession.run(sql.raw(stmt));\n\t\t\t\t\t}\n\t\t\t\t\tsession.run(\n\t\t\t\t\t\tsql`INSERT INTO ${\n\t\t\t\t\t\t\tsql.identifier(migrationsTable)\n\t\t\t\t\t\t} (\"hash\", \"created_at\") VALUES(${migration.hash}, ${migration.folderMillis})`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsession.run(sql`COMMIT`);\n\t\t} catch (e) {\n\t\t\tsession.run(sql`ROLLBACK`);\n\t\t\tthrow e;\n\t\t}\n\t}\n}\n\nexport class SQLiteAsyncDialect extends SQLiteDialect {\n\tstatic override readonly [entityKind]: string = 'SQLiteAsyncDialect';\n\n\tasync migrate(\n\t\tmigrations: MigrationMeta[],\n\t\tsession: SQLiteSession<'async', any, any, any>,\n\t\tconfig?: string | MigrationConfig,\n\t): Promise<void> {\n\t\tconst migrationsTable = config === undefined\n\t\t\t? '__drizzle_migrations'\n\t\t\t: typeof config === 'string'\n\t\t\t? '__drizzle_migrations'\n\t\t\t: config.migrationsTable ?? '__drizzle_migrations';\n\n\t\tconst migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsTable)} (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at numeric\n\t\t\t)\n\t\t`;\n\t\tawait session.run(migrationTableCreate);\n\n\t\tconst dbMigrations = await session.values<[number, string, string]>(\n\t\t\tsql`SELECT id, hash, created_at FROM ${sql.identifier(migrationsTable)} ORDER BY created_at DESC LIMIT 1`,\n\t\t);\n\n\t\tconst lastDbMigration = dbMigrations[0] ?? undefined;\n\n\t\tawait session.transaction(async (tx) => {\n\t\t\tfor (const migration of migrations) {\n\t\t\t\tif (!lastDbMigration || Number(lastDbMigration[2])! < migration.folderMillis) {\n\t\t\t\t\tfor (const stmt of migration.sql) {\n\t\t\t\t\t\tawait tx.run(sql.raw(stmt));\n\t\t\t\t\t}\n\t\t\t\t\tawait tx.run(\n\t\t\t\t\t\tsql`INSERT INTO ${\n\t\t\t\t\t\t\tsql.identifier(migrationsTable)\n\t\t\t\t\t\t} (\"hash\", \"created_at\") VALUES(${migration.hash}, ${migration.folderMillis})`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n", "import type { Column } from '~/column.ts';\nimport { entityKind } from './entity.ts';\nimport { Table } from './table.ts';\nimport type { Casing } from './utils.ts';\n\nexport function toSnakeCase(input: string) {\n\tconst words = input\n\t\t.replace(/['\\u2019]/g, '')\n\t\t.match(/[\\da-z]+|[A-Z]+(?![a-z])|[A-Z][\\da-z]+/g) ?? [];\n\n\treturn words.map((word) => word.toLowerCase()).join('_');\n}\n\nexport function toCamelCase(input: string) {\n\tconst words = input\n\t\t.replace(/['\\u2019]/g, '')\n\t\t.match(/[\\da-z]+|[A-Z]+(?![a-z])|[A-Z][\\da-z]+/g) ?? [];\n\n\treturn words.reduce((acc, word, i) => {\n\t\tconst formattedWord = i === 0 ? word.toLowerCase() : `${word[0]!.toUpperCase()}${word.slice(1)}`;\n\t\treturn acc + formattedWord;\n\t}, '');\n}\n\nfunction noopCase(input: string) {\n\treturn input;\n}\n\nexport class CasingCache {\n\tstatic readonly [entityKind]: string = 'CasingCache';\n\n\t/** @internal */\n\tcache: Record<string, string> = {};\n\tprivate cachedTables: Record<string, true> = {};\n\tprivate convert: (input: string) => string;\n\n\tconstructor(casing?: Casing) {\n\t\tthis.convert = casing === 'snake_case'\n\t\t\t? toSnakeCase\n\t\t\t: casing === 'camelCase'\n\t\t\t? toCamelCase\n\t\t\t: noopCase;\n\t}\n\n\tgetColumnCasing(column: Column): string {\n\t\tif (!column.keyAsName) return column.name;\n\n\t\tconst schema = column.table[Table.Symbol.Schema] ?? 'public';\n\t\tconst tableName = column.table[Table.Symbol.OriginalName];\n\t\tconst key = `${schema}.${tableName}.${column.name}`;\n\n\t\tif (!this.cache[key]) {\n\t\t\tthis.cacheTable(column.table);\n\t\t}\n\t\treturn this.cache[key]!;\n\t}\n\n\tprivate cacheTable(table: Table) {\n\t\tconst schema = table[Table.Symbol.Schema] ?? 'public';\n\t\tconst tableName = table[Table.Symbol.OriginalName];\n\t\tconst tableKey = `${schema}.${tableName}`;\n\n\t\tif (!this.cachedTables[tableKey]) {\n\t\t\tfor (const column of Object.values(table[Table.Symbol.Columns])) {\n\t\t\t\tconst columnKey = `${tableKey}.${column.name}`;\n\t\t\t\tthis.cache[columnKey] = this.convert(column.name);\n\t\t\t}\n\t\t\tthis.cachedTables[tableKey] = true;\n\t\t}\n\t}\n\n\tclearCache() {\n\t\tthis.cache = {};\n\t\tthis.cachedTables = {};\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { ColumnsSelection } from '~/sql/sql.ts';\nimport { View } from '~/sql/sql.ts';\n\nexport abstract class SQLiteViewBase<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelection extends ColumnsSelection = ColumnsSelection,\n> extends View<TName, TExisting, TSelection> {\n\tstatic override readonly [entityKind]: string = 'SQLiteViewBase';\n\n\tdeclare _: View<TName, TExisting, TSelection>['_'] & {\n\t\tviewBrand: 'SQLiteView';\n\t};\n}\n", "import { entityKind, is } from '~/entity.ts';\nimport { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type {\n\tBuildSubquerySelection,\n\tGetSelectTableName,\n\tGetSelectTableSelection,\n\tJoinNullability,\n\tJoinType,\n\tSelectMode,\n\tSelectResult,\n\tSetOperator,\n} from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport { SQL, View } from '~/sql/sql.ts';\nimport type { ColumnsSelection, Placeholder, Query, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteColumn } from '~/sqlite-core/columns/index.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { SQLiteSession } from '~/sqlite-core/session.ts';\nimport type { SubqueryWithSelection } from '~/sqlite-core/subquery.ts';\nimport type { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport {\n\tapplyMixins,\n\tgetTableColumns,\n\tgetTableLikeName,\n\thaveSameKeys,\n\torderSelectedFields,\n\ttype ValueOrArray,\n} from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport { SQLiteViewBase } from '../view-base.ts';\nimport type {\n\tAnySQLiteSelect,\n\tCreateSQLiteSelectFromBuilderMode,\n\tGetSQLiteSetOperators,\n\tSelectedFields,\n\tSetOperatorRightSelect,\n\tSQLiteCreateSetOperatorFn,\n\tSQLiteSelectConfig,\n\tSQLiteSelectDynamic,\n\tSQLiteSelectExecute,\n\tSQLiteSelectHKT,\n\tSQLiteSelectHKTBase,\n\tSQLiteSelectJoinFn,\n\tSQLiteSelectPrepare,\n\tSQLiteSelectWithout,\n\tSQLiteSetOperatorExcludedMethods,\n\tSQLiteSetOperatorWithResult,\n} from './select.types.ts';\n\nexport class SQLiteSelectBuilder<\n\tTSelection extends SelectedFields | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTBuilderMode extends 'db' | 'qb' = 'db',\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteSelectBuilder';\n\n\tprivate fields: TSelection;\n\tprivate session: SQLiteSession<any, any, any, any> | undefined;\n\tprivate dialect: SQLiteDialect;\n\tprivate withList: Subquery[] | undefined;\n\tprivate distinct: boolean | undefined;\n\n\tconstructor(\n\t\tconfig: {\n\t\t\tfields: TSelection;\n\t\t\tsession: SQLiteSession<any, any, any, any> | undefined;\n\t\t\tdialect: SQLiteDialect;\n\t\t\twithList?: Subquery[];\n\t\t\tdistinct?: boolean;\n\t\t},\n\t) {\n\t\tthis.fields = config.fields;\n\t\tthis.session = config.session;\n\t\tthis.dialect = config.dialect;\n\t\tthis.withList = config.withList;\n\t\tthis.distinct = config.distinct;\n\t}\n\n\tfrom<TFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL>(\n\t\tsource: TFrom,\n\t): CreateSQLiteSelectFromBuilderMode<\n\t\tTBuilderMode,\n\t\tGetSelectTableName<TFrom>,\n\t\tTResultType,\n\t\tTRunResult,\n\t\tTSelection extends undefined ? GetSelectTableSelection<TFrom> : TSelection,\n\t\tTSelection extends undefined ? 'single' : 'partial'\n\t> {\n\t\tconst isPartialSelect = !!this.fields;\n\n\t\tlet fields: SelectedFields;\n\t\tif (this.fields) {\n\t\t\tfields = this.fields;\n\t\t} else if (is(source, Subquery)) {\n\t\t\t// This is required to use the proxy handler to get the correct field values from the subquery\n\t\t\tfields = Object.fromEntries(\n\t\t\t\tObject.keys(source._.selectedFields).map((\n\t\t\t\t\tkey,\n\t\t\t\t) => [key, source[key as unknown as keyof typeof source] as unknown as SelectedFields[string]]),\n\t\t\t);\n\t\t} else if (is(source, SQLiteViewBase)) {\n\t\t\tfields = source[ViewBaseConfig].selectedFields as SelectedFields;\n\t\t} else if (is(source, SQL)) {\n\t\t\tfields = {};\n\t\t} else {\n\t\t\tfields = getTableColumns<SQLiteTable>(source);\n\t\t}\n\n\t\treturn new SQLiteSelectBase({\n\t\t\ttable: source,\n\t\t\tfields,\n\t\t\tisPartialSelect,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\twithList: this.withList,\n\t\t\tdistinct: this.distinct,\n\t\t}) as any;\n\t}\n}\n\nexport abstract class SQLiteSelectQueryBuilderBase<\n\tTHKT extends SQLiteSelectHKTBase,\n\tTTableName extends string | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode,\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends TypedQueryBuilder<TSelectedFields, TResult> {\n\tstatic override readonly [entityKind]: string = 'SQLiteSelectQueryBuilder';\n\n\toverride readonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly hkt: THKT;\n\t\treadonly tableName: TTableName;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly selection: TSelection;\n\t\treadonly selectMode: TSelectMode;\n\t\treadonly nullabilityMap: TNullabilityMap;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TResult;\n\t\treadonly selectedFields: TSelectedFields;\n\t};\n\n\t/** @internal */\n\tconfig: SQLiteSelectConfig;\n\tprotected joinsNotNullableMap: Record<string, boolean>;\n\tprivate tableName: string | undefined;\n\tprivate isPartialSelect: boolean;\n\tprotected session: SQLiteSession<any, any, any, any> | undefined;\n\tprotected dialect: SQLiteDialect;\n\n\tconstructor(\n\t\t{ table, fields, isPartialSelect, session, dialect, withList, distinct }: {\n\t\t\ttable: SQLiteSelectConfig['table'];\n\t\t\tfields: SQLiteSelectConfig['fields'];\n\t\t\tisPartialSelect: boolean;\n\t\t\tsession: SQLiteSession<any, any, any, any> | undefined;\n\t\t\tdialect: SQLiteDialect;\n\t\t\twithList: Subquery[] | undefined;\n\t\t\tdistinct: boolean | undefined;\n\t\t},\n\t) {\n\t\tsuper();\n\t\tthis.config = {\n\t\t\twithList,\n\t\t\ttable,\n\t\t\tfields: { ...fields },\n\t\t\tdistinct,\n\t\t\tsetOperators: [],\n\t\t};\n\t\tthis.isPartialSelect = isPartialSelect;\n\t\tthis.session = session;\n\t\tthis.dialect = dialect;\n\t\tthis._ = {\n\t\t\tselectedFields: fields as TSelectedFields,\n\t\t} as this['_'];\n\t\tthis.tableName = getTableLikeName(table);\n\t\tthis.joinsNotNullableMap = typeof this.tableName === 'string' ? { [this.tableName]: true } : {};\n\t}\n\n\tprivate createJoin<TJoinType extends JoinType>(\n\t\tjoinType: TJoinType,\n\t): SQLiteSelectJoinFn<this, TDynamic, TJoinType> {\n\t\treturn (\n\t\t\ttable: SQLiteTable | Subquery | SQLiteViewBase | SQL,\n\t\t\ton?: ((aliases: TSelection) => SQL | undefined) | SQL | undefined,\n\t\t) => {\n\t\t\tconst baseTableName = this.tableName;\n\t\t\tconst tableName = getTableLikeName(table);\n\n\t\t\tif (typeof tableName === 'string' && this.config.joins?.some((join) => join.alias === tableName)) {\n\t\t\t\tthrow new Error(`Alias \"${tableName}\" is already used in this query`);\n\t\t\t}\n\n\t\t\tif (!this.isPartialSelect) {\n\t\t\t\t// If this is the first join and this is not a partial select and we're not selecting from raw SQL, \"move\" the fields from the main table to the nested object\n\t\t\t\tif (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === 'string') {\n\t\t\t\t\tthis.config.fields = {\n\t\t\t\t\t\t[baseTableName]: this.config.fields,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (typeof tableName === 'string' && !is(table, SQL)) {\n\t\t\t\t\tconst selection = is(table, Subquery)\n\t\t\t\t\t\t? table._.selectedFields\n\t\t\t\t\t\t: is(table, View)\n\t\t\t\t\t\t? table[ViewBaseConfig].selectedFields\n\t\t\t\t\t\t: table[Table.Symbol.Columns];\n\t\t\t\t\tthis.config.fields[tableName] = selection;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof on === 'function') {\n\t\t\t\ton = on(\n\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\tthis.config.fields,\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as TSelection,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!this.config.joins) {\n\t\t\t\tthis.config.joins = [];\n\t\t\t}\n\t\t\tthis.config.joins.push({ on, table, joinType, alias: tableName });\n\n\t\t\tif (typeof tableName === 'string') {\n\t\t\t\tswitch (joinType) {\n\t\t\t\t\tcase 'left': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'right': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'cross':\n\t\t\t\t\tcase 'inner': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'full': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this as any;\n\t\t};\n\t}\n\n\t/**\n\t * Executes a `left join` operation by adding another table to the current query.\n\t *\n\t * Calling this method associates each row of the table with the corresponding row from the joined table, if a match is found. If no matching row exists, it sets all columns of the joined table to null.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#left-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet | null; }[] = await db.select()\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number | null; }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tleftJoin = this.createJoin('left');\n\n\t/**\n\t * Executes a `right join` operation by adding another table to the current query.\n\t *\n\t * Calling this method associates each row of the joined table with the corresponding row from the main table, if a match is found. If no matching row exists, it sets all columns of the main table to null.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#right-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet; }[] = await db.select()\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number; }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\trightJoin = this.createJoin('right');\n\n\t/**\n\t * Executes an `inner join` operation, creating a new table by combining rows from two tables that have matching values.\n\t *\n\t * Calling this method retrieves rows that have corresponding entries in both joined tables. Rows without matching entries in either table are excluded, resulting in a table that includes only matching pairs.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#inner-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet; }[] = await db.select()\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number; }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tinnerJoin = this.createJoin('inner');\n\n\t/**\n\t * Executes a `full join` operation by combining rows from two tables into a new table.\n\t *\n\t * Calling this method retrieves all rows from both main and joined tables, merging rows with matching values and filling in `null` for non-matching columns.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#full-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet | null; }[] = await db.select()\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number | null; }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tfullJoin = this.createJoin('full');\n\n\t/**\n\t * Executes a `cross join` operation by combining rows from two tables into a new table.\n\t *\n\t * Calling this method retrieves all rows from both main and joined tables, merging all rows from each table.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#cross-join}\n\t *\n\t * @param table the table to join.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users, each user with every pet\n\t * const usersWithPets: { user: User; pets: Pet; }[] = await db.select()\n\t *   .from(users)\n\t *   .crossJoin(pets)\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number; }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .crossJoin(pets)\n\t * ```\n\t */\n\tcrossJoin = this.createJoin('cross');\n\n\tprivate createSetOperator(\n\t\ttype: SetOperator,\n\t\tisAll: boolean,\n\t): <TValue extends SQLiteSetOperatorWithResult<TResult>>(\n\t\trightSelection:\n\t\t\t| ((setOperators: GetSQLiteSetOperators) => SetOperatorRightSelect<TValue, TResult>)\n\t\t\t| SetOperatorRightSelect<TValue, TResult>,\n\t) => SQLiteSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tSQLiteSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\treturn (rightSelection) => {\n\t\t\tconst rightSelect = (typeof rightSelection === 'function'\n\t\t\t\t? rightSelection(getSQLiteSetOperators())\n\t\t\t\t: rightSelection) as TypedQueryBuilder<\n\t\t\t\t\tany,\n\t\t\t\t\tTResult\n\t\t\t\t>;\n\n\t\t\tif (!haveSameKeys(this.getSelectedFields(), rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.config.setOperators.push({ type, isAll, rightSelect });\n\t\t\treturn this as any;\n\t\t};\n\t}\n\n\t/**\n\t * Adds `union` set operator to the query.\n\t *\n\t * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all unique names from customers and users tables\n\t * await db.select({ name: users.name })\n\t *   .from(users)\n\t *   .union(\n\t *     db.select({ name: customers.name }).from(customers)\n\t *   );\n\t * // or\n\t * import { union } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await union(\n\t *   db.select({ name: users.name }).from(users),\n\t *   db.select({ name: customers.name }).from(customers)\n\t * );\n\t * ```\n\t */\n\tunion = this.createSetOperator('union', false);\n\n\t/**\n\t * Adds `union all` set operator to the query.\n\t *\n\t * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all transaction ids from both online and in-store sales\n\t * await db.select({ transaction: onlineSales.transactionId })\n\t *   .from(onlineSales)\n\t *   .unionAll(\n\t *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t *   );\n\t * // or\n\t * import { unionAll } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await unionAll(\n\t *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n\t *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t * );\n\t * ```\n\t */\n\tunionAll = this.createSetOperator('union', true);\n\n\t/**\n\t * Adds `intersect` set operator to the query.\n\t *\n\t * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select course names that are offered in both departments A and B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .intersect(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { intersect } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await intersect(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\tintersect = this.createSetOperator('intersect', false);\n\n\t/**\n\t * Adds `except` set operator to the query.\n\t *\n\t * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all courses offered in department A but not in department B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .except(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { except } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await except(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\texcept = this.createSetOperator('except', false);\n\n\t/** @internal */\n\taddSetOperators(setOperators: SQLiteSelectConfig['setOperators']): SQLiteSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tSQLiteSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\tthis.config.setOperators.push(...setOperators);\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `where` clause to the query.\n\t *\n\t * Calling this method will select only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#filtering}\n\t *\n\t * @param where the `where` clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be selected.\n\t *\n\t * ```ts\n\t * // Select all cars with green color\n\t * await db.select().from(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * await db.select().from(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Select all BMW cars with a green color\n\t * await db.select().from(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Select all cars with the green or blue color\n\t * await db.select().from(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(\n\t\twhere: ((aliases: TSelection) => SQL | undefined) | SQL | undefined,\n\t): SQLiteSelectWithout<this, TDynamic, 'where'> {\n\t\tif (typeof where === 'function') {\n\t\t\twhere = where(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `having` clause to the query.\n\t *\n\t * Calling this method will select only those rows that fulfill a specified condition. It is typically used with aggregate functions to filter the aggregated data based on a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t *\n\t * @param having the `having` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all brands with more than one car\n\t * await db.select({\n\t * \tbrand: cars.brand,\n\t * \tcount: sql<number>`cast(count(${cars.id}) as int)`,\n\t * })\n\t *   .from(cars)\n\t *   .groupBy(cars.brand)\n\t *   .having(({ count }) => gt(count, 1));\n\t * ```\n\t */\n\thaving(\n\t\thaving: ((aliases: this['_']['selection']) => SQL | undefined) | SQL | undefined,\n\t): SQLiteSelectWithout<this, TDynamic, 'having'> {\n\t\tif (typeof having === 'function') {\n\t\t\thaving = having(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.having = having;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `group by` clause to the query.\n\t *\n\t * Calling this method will group rows that have the same values into summary rows, often used for aggregation purposes.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Group and count people by their last names\n\t * await db.select({\n\t *    lastName: people.lastName,\n\t *    count: sql<number>`cast(count(*) as int)`\n\t * })\n\t *   .from(people)\n\t *   .groupBy(people.lastName);\n\t * ```\n\t */\n\tgroupBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(...columns: (SQLiteColumn | SQL)[]): SQLiteSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteSelectWithout<this, TDynamic, 'groupBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst groupBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t\tthis.config.groupBy = Array.isArray(groupBy) ? groupBy : [groupBy];\n\t\t} else {\n\t\t\tthis.config.groupBy = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `order by` clause to the query.\n\t *\n\t * Calling this method will sort the result-set in ascending or descending order. By default, the sort order is ascending.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#order-by}\n\t *\n\t * @example\n\t *\n\t * ```\n\t * // Select cars ordered by year\n\t * await db.select().from(cars).orderBy(cars.year);\n\t * ```\n\t *\n\t * You can specify whether results are in ascending or descending order with the `asc()` and `desc()` operators.\n\t *\n\t * ```ts\n\t * // Select cars ordered by year in descending order\n\t * await db.select().from(cars).orderBy(desc(cars.year));\n\t *\n\t * // Select cars ordered by year and price\n\t * await db.select().from(cars).orderBy(asc(cars.year), desc(cars.price));\n\t * ```\n\t */\n\torderBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(...columns: (SQLiteColumn | SQL)[]): SQLiteSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteSelectWithout<this, TDynamic, 'orderBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst orderBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\n\t\t\tconst orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t} else {\n\t\t\tconst orderByArray = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `limit` clause to the query.\n\t *\n\t * Calling this method will set the maximum number of rows that will be returned by this query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t *\n\t * @param limit the `limit` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Get the first 10 people from this query.\n\t * await db.select().from(people).limit(10);\n\t * ```\n\t */\n\tlimit(limit: number | Placeholder): SQLiteSelectWithout<this, TDynamic, 'limit'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.limit = limit;\n\t\t} else {\n\t\t\tthis.config.limit = limit;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `offset` clause to the query.\n\t *\n\t * Calling this method will skip a number of rows when returning results from this query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t *\n\t * @param offset the `offset` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Get the 10th-20th people from this query.\n\t * await db.select().from(people).offset(10).limit(10);\n\t * ```\n\t */\n\toffset(offset: number | Placeholder): SQLiteSelectWithout<this, TDynamic, 'offset'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.offset = offset;\n\t\t} else {\n\t\t\tthis.config.offset = offset;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildSelectQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\tas<TAlias extends string>(\n\t\talias: TAlias,\n\t): SubqueryWithSelection<this['_']['selectedFields'], TAlias> {\n\t\treturn new Proxy(\n\t\t\tnew Subquery(this.getSQL(), this.config.fields, alias),\n\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as SubqueryWithSelection<this['_']['selectedFields'], TAlias>;\n\t}\n\n\t/** @internal */\n\toverride getSelectedFields(): this['_']['selectedFields'] {\n\t\treturn new Proxy(\n\t\t\tthis.config.fields,\n\t\t\tnew SelectionProxyHandler({ alias: this.tableName, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as this['_']['selectedFields'];\n\t}\n\n\t$dynamic(): SQLiteSelectDynamic<this> {\n\t\treturn this;\n\t}\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface SQLiteSelectBase<\n\tTTableName extends string | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode = 'single',\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends\n\tSQLiteSelectQueryBuilderBase<\n\t\tSQLiteSelectHKT,\n\t\tTTableName,\n\t\tTResultType,\n\t\tTRunResult,\n\t\tTSelection,\n\t\tTSelectMode,\n\t\tTNullabilityMap,\n\t\tTDynamic,\n\t\tTExcludedMethods,\n\t\tTResult,\n\t\tTSelectedFields\n\t>,\n\tQueryPromise<TResult>\n{}\n\nexport class SQLiteSelectBase<\n\tTTableName extends string | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTSelection,\n\tTSelectMode extends SelectMode = 'single',\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends SQLiteSelectQueryBuilderBase<\n\tSQLiteSelectHKT,\n\tTTableName,\n\tTResultType,\n\tTRunResult,\n\tTSelection,\n\tTSelectMode,\n\tTNullabilityMap,\n\tTDynamic,\n\tTExcludedMethods,\n\tTResult,\n\tTSelectedFields\n> implements RunnableQuery<TResult, 'sqlite'>, SQLWrapper {\n\tstatic override readonly [entityKind]: string = 'SQLiteSelect';\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteSelectPrepare<this> {\n\t\tif (!this.session) {\n\t\t\tthrow new Error('Cannot execute a query on a query builder. Please use a database instance instead.');\n\t\t}\n\t\tconst fieldsList = orderSelectedFields<SQLiteColumn>(this.config.fields);\n\t\tconst query = this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tfieldsList,\n\t\t\t'all',\n\t\t\ttrue,\n\t\t);\n\t\tquery.joinsNotNullableMap = this.joinsNotNullableMap;\n\t\treturn query as ReturnType<this['prepare']>;\n\t}\n\n\tprepare(): SQLiteSelectPrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\tasync execute(): Promise<SQLiteSelectExecute<this>> {\n\t\treturn this.all() as SQLiteSelectExecute<this>;\n\t}\n}\n\napplyMixins(SQLiteSelectBase, [QueryPromise]);\n\nfunction createSetOperator(type: SetOperator, isAll: boolean): SQLiteCreateSetOperatorFn {\n\treturn (leftSelect, rightSelect, ...restSelects) => {\n\t\tconst setOperators = [rightSelect, ...restSelects].map((select) => ({\n\t\t\ttype,\n\t\t\tisAll,\n\t\t\trightSelect: select as AnySQLiteSelect,\n\t\t}));\n\n\t\tfor (const setOperator of setOperators) {\n\t\t\tif (!haveSameKeys((leftSelect as any).getSelectedFields(), setOperator.rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn (leftSelect as AnySQLiteSelect).addSetOperators(setOperators) as any;\n\t};\n}\n\nconst getSQLiteSetOperators = () => ({\n\tunion,\n\tunionAll,\n\tintersect,\n\texcept,\n});\n\n/**\n * Adds `union` set operator to the query.\n *\n * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n *\n * @example\n *\n * ```ts\n * // Select all unique names from customers and users tables\n * import { union } from 'drizzle-orm/sqlite-core'\n *\n * await union(\n *   db.select({ name: users.name }).from(users),\n *   db.select({ name: customers.name }).from(customers)\n * );\n * // or\n * await db.select({ name: users.name })\n *   .from(users)\n *   .union(\n *     db.select({ name: customers.name }).from(customers)\n *   );\n * ```\n */\nexport const union = createSetOperator('union', false);\n\n/**\n * Adds `union all` set operator to the query.\n *\n * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n *\n * @example\n *\n * ```ts\n * // Select all transaction ids from both online and in-store sales\n * import { unionAll } from 'drizzle-orm/sqlite-core'\n *\n * await unionAll(\n *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n * );\n * // or\n * await db.select({ transaction: onlineSales.transactionId })\n *   .from(onlineSales)\n *   .unionAll(\n *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n *   );\n * ```\n */\nexport const unionAll = createSetOperator('union', true);\n\n/**\n * Adds `intersect` set operator to the query.\n *\n * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n *\n * @example\n *\n * ```ts\n * // Select course names that are offered in both departments A and B\n * import { intersect } from 'drizzle-orm/sqlite-core'\n *\n * await intersect(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .intersect(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const intersect = createSetOperator('intersect', false);\n\n/**\n * Adds `except` set operator to the query.\n *\n * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n *\n * @example\n *\n * ```ts\n * // Select all courses offered in department A but not in department B\n * import { except } from 'drizzle-orm/sqlite-core'\n *\n * await except(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .except(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const except = createSetOperator('except', false);\n", "import { entityKind } from '~/entity.ts';\nimport type { SQL, SQLWrapper } from '~/sql/index.ts';\n\nexport abstract class TypedQueryBuilder<TSelection, TResult = unknown> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'TypedQueryBuilder';\n\n\tdeclare _: {\n\t\tselectedFields: TSelection;\n\t\tresult: TResult;\n\t};\n\n\t/** @internal */\n\tgetSelectedFields(): TSelection {\n\t\treturn this._.selectedFields;\n\t}\n\n\tabstract getSQL(): SQL;\n}\n", "import type { GetColumnData } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport type { JoinType, SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { Placeholder, Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport {\n\ttype DrizzleTypeError,\n\tgetTableLikeName,\n\tmapUpdateSet,\n\torderSelectedFields,\n\ttype UpdateSet,\n\ttype ValueOrArray,\n} from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { SQLiteColumn } from '../columns/common.ts';\nimport { SQLiteViewBase } from '../view-base.ts';\nimport type { SelectedFields, SelectedFieldsOrdered, SQLiteSelectJoinConfig } from './select.types.ts';\n\nexport interface SQLiteUpdateConfig {\n\twhere?: SQL | undefined;\n\tlimit?: number | Placeholder;\n\torderBy?: (SQLiteColumn | SQL | SQL.Aliased)[];\n\tset: UpdateSet;\n\ttable: SQLiteTable;\n\tfrom?: SQLiteTable | Subquery | SQLiteViewBase | SQL;\n\tjoins: SQLiteSelectJoinConfig[];\n\treturning?: SelectedFieldsOrdered;\n\twithList?: Subquery[];\n}\n\nexport type SQLiteUpdateSetSource<TTable extends SQLiteTable> =\n\t& {\n\t\t[Key in keyof TTable['$inferInsert']]?:\n\t\t\t| GetColumnData<TTable['_']['columns'][Key], 'query'>\n\t\t\t| SQL\n\t\t\t| SQLiteColumn\n\t\t\t| undefined;\n\t}\n\t& {};\n\nexport class SQLiteUpdateBuilder<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteUpdateBuilder';\n\n\tdeclare readonly _: {\n\t\treadonly table: TTable;\n\t};\n\n\tconstructor(\n\t\tprotected table: TTable,\n\t\tprotected session: SQLiteSession<any, any, any, any>,\n\t\tprotected dialect: SQLiteDialect,\n\t\tprivate withList?: Subquery[],\n\t) {}\n\n\tset(\n\t\tvalues: SQLiteUpdateSetSource<TTable>,\n\t): SQLiteUpdateWithout<\n\t\tSQLiteUpdateBase<TTable, TResultType, TRunResult>,\n\t\tfalse,\n\t\t'leftJoin' | 'rightJoin' | 'innerJoin' | 'fullJoin'\n\t> {\n\t\treturn new SQLiteUpdateBase(\n\t\t\tthis.table,\n\t\t\tmapUpdateSet(this.table, values),\n\t\t\tthis.session,\n\t\t\tthis.dialect,\n\t\t\tthis.withList,\n\t\t) as any;\n\t}\n}\n\nexport type SQLiteUpdateWithout<\n\tT extends AnySQLiteUpdate,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T : Omit<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['from'],\n\t\tT['_']['returning'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods'] | K\n\t>,\n\tT['_']['excludedMethods'] | K\n>;\n\nexport type SQLiteUpdateWithJoins<\n\tT extends AnySQLiteUpdate,\n\tTDynamic extends boolean,\n\tTFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL,\n> = TDynamic extends true ? T : Omit<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tTFrom,\n\t\tT['_']['returning'],\n\t\tTDynamic,\n\t\tExclude<T['_']['excludedMethods'] | 'from', 'leftJoin' | 'rightJoin' | 'innerJoin' | 'fullJoin'>\n\t>,\n\tExclude<T['_']['excludedMethods'] | 'from', 'leftJoin' | 'rightJoin' | 'innerJoin' | 'fullJoin'>\n>;\n\nexport type SQLiteUpdateReturningAll<T extends AnySQLiteUpdate, TDynamic extends boolean> = SQLiteUpdateWithout<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['from'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteUpdateReturning<\n\tT extends AnySQLiteUpdate,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFields,\n> = SQLiteUpdateWithout<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['from'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteUpdateExecute<T extends AnySQLiteUpdate> = T['_']['returning'] extends undefined ? T['_']['runResult']\n\t: T['_']['returning'][];\n\nexport type SQLiteUpdatePrepare<T extends AnySQLiteUpdate> = SQLitePreparedQuery<\n\t{\n\t\ttype: T['_']['resultType'];\n\t\trun: T['_']['runResult'];\n\t\tall: T['_']['returning'] extends undefined ? DrizzleTypeError<'.all() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'][];\n\t\tget: T['_']['returning'] extends undefined ? DrizzleTypeError<'.get() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'];\n\t\tvalues: T['_']['returning'] extends undefined ? DrizzleTypeError<'.values() cannot be used without .returning()'>\n\t\t\t: any[][];\n\t\texecute: SQLiteUpdateExecute<T>;\n\t}\n>;\n\nexport type SQLiteUpdateJoinFn<\n\tT extends AnySQLiteUpdate,\n> = <\n\tTJoinedTable extends SQLiteTable | Subquery | SQLiteViewBase | SQL,\n>(\n\ttable: TJoinedTable,\n\ton:\n\t\t| (\n\t\t\t(\n\t\t\t\tupdateTable: T['_']['table']['_']['columns'],\n\t\t\t\tfrom: T['_']['from'] extends SQLiteTable ? T['_']['from']['_']['columns']\n\t\t\t\t\t: T['_']['from'] extends Subquery | SQLiteViewBase ? T['_']['from']['_']['selectedFields']\n\t\t\t\t\t: never,\n\t\t\t) => SQL | undefined\n\t\t)\n\t\t| SQL\n\t\t| undefined,\n) => T;\n\nexport type SQLiteUpdateDynamic<T extends AnySQLiteUpdate> = SQLiteUpdate<\n\tT['_']['table'],\n\tT['_']['resultType'],\n\tT['_']['runResult'],\n\tT['_']['returning']\n>;\n\nexport type SQLiteUpdate<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = any,\n\tTFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL | undefined = undefined,\n\tTReturning extends Record<string, unknown> | undefined = Record<string, unknown> | undefined,\n> = SQLiteUpdateBase<TTable, TResultType, TRunResult, TFrom, TReturning, true, never>;\n\nexport type AnySQLiteUpdate = SQLiteUpdateBase<any, any, any, any, any, any, any>;\n\nexport interface SQLiteUpdateBase<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL | undefined = undefined,\n\tTReturning = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends SQLWrapper, QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]> {\n\treadonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly table: TTable;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly from: TFrom;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? TRunResult : TReturning[];\n\t};\n}\n\nexport class SQLiteUpdateBase<\n\tTTable extends SQLiteTable = SQLiteTable,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL | undefined = undefined,\n\tTReturning = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>\n\timplements RunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteUpdate';\n\n\t/** @internal */\n\tconfig: SQLiteUpdateConfig;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tset: UpdateSet,\n\t\tprivate session: SQLiteSession<any, any, any, any>,\n\t\tprivate dialect: SQLiteDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { set, table, withList, joins: [] };\n\t}\n\n\tfrom<TFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL>(\n\t\tsource: TFrom,\n\t): SQLiteUpdateWithJoins<this, TDynamic, TFrom> {\n\t\tthis.config.from = source;\n\t\treturn this as any;\n\t}\n\n\tprivate createJoin<TJoinType extends JoinType>(\n\t\tjoinType: TJoinType,\n\t): SQLiteUpdateJoinFn<this> {\n\t\treturn ((\n\t\t\ttable: SQLiteTable | Subquery | SQLiteViewBase | SQL,\n\t\t\ton: ((updateTable: TTable, from: TFrom) => SQL | undefined) | SQL | undefined,\n\t\t) => {\n\t\t\tconst tableName = getTableLikeName(table);\n\n\t\t\tif (typeof tableName === 'string' && this.config.joins.some((join) => join.alias === tableName)) {\n\t\t\t\tthrow new Error(`Alias \"${tableName}\" is already used in this query`);\n\t\t\t}\n\n\t\t\tif (typeof on === 'function') {\n\t\t\t\tconst from = this.config.from\n\t\t\t\t\t? is(table, SQLiteTable)\n\t\t\t\t\t\t? table[Table.Symbol.Columns]\n\t\t\t\t\t\t: is(table, Subquery)\n\t\t\t\t\t\t? table._.selectedFields\n\t\t\t\t\t\t: is(table, SQLiteViewBase)\n\t\t\t\t\t\t? table[ViewBaseConfig].selectedFields\n\t\t\t\t\t\t: undefined\n\t\t\t\t\t: undefined;\n\t\t\t\ton = on(\n\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\tthis.config.table[Table.Symbol.Columns],\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as any,\n\t\t\t\t\tfrom && new Proxy(\n\t\t\t\t\t\tfrom,\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as any,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.config.joins.push({ on, table, joinType, alias: tableName });\n\n\t\t\treturn this as any;\n\t\t}) as any;\n\t}\n\n\tleftJoin = this.createJoin('left');\n\n\trightJoin = this.createJoin('right');\n\n\tinnerJoin = this.createJoin('inner');\n\n\tfullJoin = this.createJoin('full');\n\n\t/**\n\t * Adds a 'where' clause to the query.\n\t *\n\t * Calling this method will update only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t *\n\t * @param where the 'where' clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be updated.\n\t *\n\t * ```ts\n\t * // Update all cars with green color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'));\n\t * // or\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Update all BMW cars with a green color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Update all cars with the green or blue color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(where: SQL | undefined): SQLiteUpdateWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\torderBy(\n\t\tbuilder: (updateTable: TTable) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteUpdateWithout<this, TDynamic, 'orderBy'>;\n\torderBy(...columns: (SQLiteColumn | SQL | SQL.Aliased)[]): SQLiteUpdateWithout<this, TDynamic, 'orderBy'>;\n\torderBy(\n\t\t...columns:\n\t\t\t| [(updateTable: TTable) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteUpdateWithout<this, TDynamic, 'orderBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst orderBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.table[Table.Symbol.Columns],\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as any,\n\t\t\t);\n\n\t\t\tconst orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n\t\t\tthis.config.orderBy = orderByArray;\n\t\t} else {\n\t\t\tconst orderByArray = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\t\t\tthis.config.orderBy = orderByArray;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\tlimit(limit: number | Placeholder): SQLiteUpdateWithout<this, TDynamic, 'limit'> {\n\t\tthis.config.limit = limit;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the updated rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update#update-with-returning}\n\t *\n\t * @example\n\t * ```ts\n\t * // Update all cars with the green color and return all fields\n\t * const updatedCars: Car[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning();\n\t *\n\t * // Update all cars with the green color and return only their id and brand fields\n\t * const updatedCarsIdsAndBrands: { id: number, brand: string }[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning({ id: cars.id, brand: cars.brand });\n\t * ```\n\t */\n\treturning(): SQLiteUpdateReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFields>(\n\t\tfields: TSelectedFields,\n\t): SQLiteUpdateReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFields = this.config.table[SQLiteTable.Symbol.Columns],\n\t): SQLiteUpdateWithout<AnySQLiteUpdate, TDynamic, 'returning'> {\n\t\tthis.config.returning = orderSelectedFields<SQLiteColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildUpdateQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteUpdatePrepare<this> {\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t\tthis.config.returning ? 'all' : 'run',\n\t\t\ttrue,\n\t\t) as SQLiteUpdatePrepare<this>;\n\t}\n\n\tprepare(): SQLiteUpdatePrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\toverride async execute(): Promise<SQLiteUpdateExecute<this>> {\n\t\treturn (this.config.returning ? this.all() : this.run()) as SQLiteUpdateExecute<this>;\n\t}\n\n\t$dynamic(): SQLiteUpdateDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport { SQL, sql, type SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteSession } from '../session.ts';\nimport type { SQLiteTable } from '../table.ts';\nimport type { SQLiteView } from '../view.ts';\n\nexport class SQLiteCountBuilder<\n\tTSession extends SQLiteSession<any, any, any, any>,\n> extends SQL<number> implements Promise<number>, SQLWrapper {\n\tprivate sql: SQL<number>;\n\n\tstatic override readonly [entityKind] = 'SQLiteCountBuilderAsync';\n\t[Symbol.toStringTag] = 'SQLiteCountBuilderAsync';\n\n\tprivate session: TSession;\n\n\tprivate static buildEmbeddedCount(\n\t\tsource: SQLiteTable | SQLiteView | SQL | SQLWrapper,\n\t\tfilters?: SQL<unknown>,\n\t): SQL<number> {\n\t\treturn sql<number>`(select count(*) from ${source}${sql.raw(' where ').if(filters)}${filters})`;\n\t}\n\n\tprivate static buildCount(\n\t\tsource: SQLiteTable | SQLiteView | SQL | SQLWrapper,\n\t\tfilters?: SQL<unknown>,\n\t): SQL<number> {\n\t\treturn sql<number>`select count(*) from ${source}${sql.raw(' where ').if(filters)}${filters}`;\n\t}\n\n\tconstructor(\n\t\treadonly params: {\n\t\t\tsource: SQLiteTable | SQLiteView | SQL | SQLWrapper;\n\t\t\tfilters?: SQL<unknown>;\n\t\t\tsession: TSession;\n\t\t},\n\t) {\n\t\tsuper(SQLiteCountBuilder.buildEmbeddedCount(params.source, params.filters).queryChunks);\n\n\t\tthis.session = params.session;\n\n\t\tthis.sql = SQLiteCountBuilder.buildCount(\n\t\t\tparams.source,\n\t\t\tparams.filters,\n\t\t);\n\t}\n\n\tthen<TResult1 = number, TResult2 = never>(\n\t\tonfulfilled?: ((value: number) => TResult1 | PromiseLike<TResult1>) | null | undefined,\n\t\tonrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined,\n\t): Promise<TResult1 | TResult2> {\n\t\treturn Promise.resolve(this.session.count(this.sql)).then(\n\t\t\tonfulfilled,\n\t\t\tonrejected,\n\t\t);\n\t}\n\n\tcatch(\n\t\tonRejected?: ((reason: any) => never | PromiseLike<never>) | null | undefined,\n\t): Promise<number> {\n\t\treturn this.then(undefined, onRejected);\n\t}\n\n\tfinally(onFinally?: (() => void) | null | undefined): Promise<number> {\n\t\treturn this.then(\n\t\t\t(value) => {\n\t\t\t\tonFinally?.();\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\t(reason) => {\n\t\t\t\tonFinally?.();\n\t\t\t\tthrow reason;\n\t\t\t},\n\t\t);\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport {\n\ttype BuildQueryResult,\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tmapRelationalRow,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Query, QueryWithTypings, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { KnownKeysOnly } from '~/utils.ts';\nimport type { SQLiteDialect } from '../dialect.ts';\nimport type { PreparedQueryConfig, SQLitePreparedQuery, SQLiteSession } from '../session.ts';\nimport type { SQLiteTable } from '../table.ts';\n\nexport type SQLiteRelationalQueryKind<TMode extends 'sync' | 'async', TResult> = TMode extends 'async'\n\t? SQLiteRelationalQuery<TMode, TResult>\n\t: SQLiteSyncRelationalQuery<TResult>;\n\nexport class RelationalQueryBuilder<\n\tTMode extends 'sync' | 'async',\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n\tTFields extends TableRelationalConfig,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteAsyncRelationalQueryBuilder';\n\n\tconstructor(\n\t\tprotected mode: TMode,\n\t\tprotected fullSchema: Record<string, unknown>,\n\t\tprotected schema: TSchema,\n\t\tprotected tableNamesMap: Record<string, string>,\n\t\tprotected table: SQLiteTable,\n\t\tprotected tableConfig: TableRelationalConfig,\n\t\tprotected dialect: SQLiteDialect,\n\t\tprotected session: SQLiteSession<'async', unknown, TFullSchema, TSchema>,\n\t) {}\n\n\tfindMany<TConfig extends DBQueryConfig<'many', true, TSchema, TFields>>(\n\t\tconfig?: KnownKeysOnly<TConfig, DBQueryConfig<'many', true, TSchema, TFields>>,\n\t): SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TConfig>[]> {\n\t\treturn (this.mode === 'sync'\n\t\t\t? new SQLiteSyncRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? (config as DBQueryConfig<'many', true>) : {},\n\t\t\t\t'many',\n\t\t\t)\n\t\t\t: new SQLiteRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? (config as DBQueryConfig<'many', true>) : {},\n\t\t\t\t'many',\n\t\t\t)) as SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TConfig>[]>;\n\t}\n\n\tfindFirst<TSelection extends Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>(\n\t\tconfig?: KnownKeysOnly<TSelection, Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>,\n\t): SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TSelection> | undefined> {\n\t\treturn (this.mode === 'sync'\n\t\t\t? new SQLiteSyncRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? { ...(config as DBQueryConfig<'many', true> | undefined), limit: 1 } : { limit: 1 },\n\t\t\t\t'first',\n\t\t\t)\n\t\t\t: new SQLiteRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? { ...(config as DBQueryConfig<'many', true> | undefined), limit: 1 } : { limit: 1 },\n\t\t\t\t'first',\n\t\t\t)) as SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TSelection> | undefined>;\n\t}\n}\n\nexport class SQLiteRelationalQuery<TType extends 'sync' | 'async', TResult> extends QueryPromise<TResult>\n\timplements RunnableQuery<TResult, 'sqlite'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteAsyncRelationalQuery';\n\n\tdeclare readonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly type: TType;\n\t\treadonly result: TResult;\n\t};\n\n\t/** @internal */\n\tmode: 'many' | 'first';\n\n\tconstructor(\n\t\tprivate fullSchema: Record<string, unknown>,\n\t\tprivate schema: TablesRelationalConfig,\n\t\tprivate tableNamesMap: Record<string, string>,\n\t\t/** @internal */\n\t\tpublic table: SQLiteTable,\n\t\tprivate tableConfig: TableRelationalConfig,\n\t\tprivate dialect: SQLiteDialect,\n\t\tprivate session: SQLiteSession<'sync' | 'async', unknown, Record<string, unknown>, TablesRelationalConfig>,\n\t\tprivate config: DBQueryConfig<'many', true> | true,\n\t\tmode: 'many' | 'first',\n\t) {\n\t\tsuper();\n\t\tthis.mode = mode;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildRelationalQuery({\n\t\t\tfullSchema: this.fullSchema,\n\t\t\tschema: this.schema,\n\t\t\ttableNamesMap: this.tableNamesMap,\n\t\t\ttable: this.table,\n\t\t\ttableConfig: this.tableConfig,\n\t\t\tqueryConfig: this.config,\n\t\t\ttableAlias: this.tableConfig.tsName,\n\t\t}).sql as SQL;\n\t}\n\n\t/** @internal */\n\t_prepare(\n\t\tisOneTimeQuery = false,\n\t): SQLitePreparedQuery<PreparedQueryConfig & { type: TType; all: TResult; get: TResult; execute: TResult }> {\n\t\tconst { query, builtQuery } = this._toSQL();\n\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tbuiltQuery,\n\t\t\tundefined,\n\t\t\tthis.mode === 'first' ? 'get' : 'all',\n\t\t\ttrue,\n\t\t\t(rawRows, mapColumnValue) => {\n\t\t\t\tconst rows = rawRows.map((row) =>\n\t\t\t\t\tmapRelationalRow(this.schema, this.tableConfig, row, query.selection, mapColumnValue)\n\t\t\t\t);\n\t\t\t\tif (this.mode === 'first') {\n\t\t\t\t\treturn rows[0] as TResult;\n\t\t\t\t}\n\t\t\t\treturn rows as TResult;\n\t\t\t},\n\t\t) as SQLitePreparedQuery<PreparedQueryConfig & { type: TType; all: TResult; get: TResult; execute: TResult }>;\n\t}\n\n\tprepare(): SQLitePreparedQuery<PreparedQueryConfig & { type: TType; all: TResult; get: TResult; execute: TResult }> {\n\t\treturn this._prepare(false);\n\t}\n\n\tprivate _toSQL(): { query: BuildRelationalQueryResult; builtQuery: QueryWithTypings } {\n\t\tconst query = this.dialect.buildRelationalQuery({\n\t\t\tfullSchema: this.fullSchema,\n\t\t\tschema: this.schema,\n\t\t\ttableNamesMap: this.tableNamesMap,\n\t\t\ttable: this.table,\n\t\t\ttableConfig: this.tableConfig,\n\t\t\tqueryConfig: this.config,\n\t\t\ttableAlias: this.tableConfig.tsName,\n\t\t});\n\n\t\tconst builtQuery = this.dialect.sqlToQuery(query.sql as SQL);\n\n\t\treturn { query, builtQuery };\n\t}\n\n\ttoSQL(): Query {\n\t\treturn this._toSQL().builtQuery;\n\t}\n\n\t/** @internal */\n\texecuteRaw(): TResult {\n\t\tif (this.mode === 'first') {\n\t\t\treturn this._prepare(false).get() as TResult;\n\t\t}\n\t\treturn this._prepare(false).all() as TResult;\n\t}\n\n\toverride async execute(): Promise<TResult> {\n\t\treturn this.executeRaw();\n\t}\n}\n\nexport class SQLiteSyncRelationalQuery<TResult> extends SQLiteRelationalQuery<'sync', TResult> {\n\tstatic override readonly [entityKind]: string = 'SQLiteSyncRelationalQuery';\n\n\tsync(): TResult {\n\t\treturn this.executeRaw();\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport type { SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect } from '../dialect.ts';\n\ntype SQLiteRawAction = 'all' | 'get' | 'values' | 'run';\nexport interface SQLiteRawConfig {\n\taction: SQLiteRawAction;\n}\n\nexport interface SQLiteRaw<TResult> extends QueryPromise<TResult>, RunnableQuery<TResult, 'sqlite'>, SQLWrapper {}\n\nexport class SQLiteRaw<TResult> extends QueryPromise<TResult>\n\timplements RunnableQuery<TResult, 'sqlite'>, SQLWrapper, PreparedQuery\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteRaw';\n\n\tdeclare readonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly result: TResult;\n\t};\n\n\t/** @internal */\n\tconfig: SQLiteRawConfig;\n\n\tconstructor(\n\t\tpublic execute: () => Promise<TResult>,\n\t\t/** @internal */\n\t\tpublic getSQL: () => SQL,\n\t\taction: SQLiteRawAction,\n\t\tprivate dialect: SQLiteAsyncDialect,\n\t\tprivate mapBatchResult: (result: unknown) => unknown,\n\t) {\n\t\tsuper();\n\t\tthis.config = { action };\n\t}\n\n\tgetQuery() {\n\t\treturn { ...this.dialect.sqlToQuery(this.getSQL()), method: this.config.action };\n\t}\n\n\tmapResult(result: unknown, isFromBatch?: boolean) {\n\t\treturn isFromBatch ? this.mapBatchResult(result) : result;\n\t}\n\n\t_prepare(): PreparedQuery {\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tisResponseInArrayMode(): boolean {\n\t\treturn false;\n\t}\n}\n", "import type { Client, InArgs, InStatement, ResultSet, Transaction } from '@libsql/client';\nimport type { BatchItem as BatchItem } from '~/batch.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { Logger } from '~/logger.ts';\nimport { NoopLogger } from '~/logger.ts';\nimport type { RelationalSchemaConfig, TablesRelationalConfig } from '~/relations.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport { fillPlaceholders, type Query, sql } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect } from '~/sqlite-core/dialect.ts';\nimport { SQLiteTransaction } from '~/sqlite-core/index.ts';\nimport type { SelectedFieldsOrdered } from '~/sqlite-core/query-builders/select.types.ts';\nimport type {\n\tPreparedQueryConfig as PreparedQueryConfigBase,\n\tSQLiteExecuteMethod,\n\tSQLiteTransactionConfig,\n} from '~/sqlite-core/session.ts';\nimport { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { mapResultRow } from '~/utils.ts';\n\nexport interface LibSQLSessionOptions {\n\tlogger?: Logger;\n}\n\ntype PreparedQueryConfig = Omit<PreparedQueryConfigBase, 'statement' | 'run'>;\n\nexport class LibSQLSession<\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends SQLiteSession<'async', ResultSet, TFullSchema, TSchema> {\n\tstatic override readonly [entityKind]: string = 'LibSQLSession';\n\n\tprivate logger: Logger;\n\n\tconstructor(\n\t\tprivate client: Client,\n\t\tdialect: SQLiteAsyncDialect,\n\t\tprivate schema: RelationalSchemaConfig<TSchema> | undefined,\n\t\tprivate options: LibSQLSessionOptions,\n\t\tprivate tx: Transaction | undefined,\n\t) {\n\t\tsuper(dialect);\n\t\tthis.logger = options.logger ?? new NoopLogger();\n\t}\n\n\tprepareQuery<T extends Omit<PreparedQueryConfig, 'run'>>(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tisResponseInArrayMode: boolean,\n\t\tcustomResultMapper?: (rows: unknown[][]) => unknown,\n\t): LibSQLPreparedQuery<T> {\n\t\treturn new LibSQLPreparedQuery(\n\t\t\tthis.client,\n\t\t\tquery,\n\t\t\tthis.logger,\n\t\t\tfields,\n\t\t\tthis.tx,\n\t\t\texecuteMethod,\n\t\t\tisResponseInArrayMode,\n\t\t\tcustomResultMapper,\n\t\t);\n\t}\n\n\tasync batch<T extends BatchItem<'sqlite'>[] | readonly BatchItem<'sqlite'>[]>(queries: T) {\n\t\tconst preparedQueries: PreparedQuery[] = [];\n\t\tconst builtQueries: InStatement[] = [];\n\n\t\tfor (const query of queries) {\n\t\t\tconst preparedQuery = query._prepare();\n\t\t\tconst builtQuery = preparedQuery.getQuery();\n\t\t\tpreparedQueries.push(preparedQuery);\n\t\t\tbuiltQueries.push({ sql: builtQuery.sql, args: builtQuery.params as InArgs });\n\t\t}\n\n\t\tconst batchResults = await this.client.batch(builtQueries);\n\t\treturn batchResults.map((result, i) => preparedQueries[i]!.mapResult(result, true));\n\t}\n\n\tasync migrate<T extends BatchItem<'sqlite'>[] | readonly BatchItem<'sqlite'>[]>(queries: T) {\n\t\tconst preparedQueries: PreparedQuery[] = [];\n\t\tconst builtQueries: InStatement[] = [];\n\n\t\tfor (const query of queries) {\n\t\t\tconst preparedQuery = query._prepare();\n\t\t\tconst builtQuery = preparedQuery.getQuery();\n\t\t\tpreparedQueries.push(preparedQuery);\n\t\t\tbuiltQueries.push({ sql: builtQuery.sql, args: builtQuery.params as InArgs });\n\t\t}\n\n\t\tconst batchResults = await this.client.migrate(builtQueries);\n\t\treturn batchResults.map((result, i) => preparedQueries[i]!.mapResult(result, true));\n\t}\n\n\toverride async transaction<T>(\n\t\ttransaction: (db: LibSQLTransaction<TFullSchema, TSchema>) => T | Promise<T>,\n\t\t_config?: SQLiteTransactionConfig,\n\t): Promise<T> {\n\t\t// TODO: support transaction behavior\n\t\tconst libsqlTx = await this.client.transaction();\n\t\tconst session = new LibSQLSession<TFullSchema, TSchema>(\n\t\t\tthis.client,\n\t\t\tthis.dialect,\n\t\t\tthis.schema,\n\t\t\tthis.options,\n\t\t\tlibsqlTx,\n\t\t);\n\t\tconst tx = new LibSQLTransaction<TFullSchema, TSchema>('async', this.dialect, session, this.schema);\n\t\ttry {\n\t\t\tconst result = await transaction(tx);\n\t\t\tawait libsqlTx.commit();\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tawait libsqlTx.rollback();\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\toverride extractRawAllValueFromBatchResult(result: unknown): unknown {\n\t\treturn (result as ResultSet).rows;\n\t}\n\n\toverride extractRawGetValueFromBatchResult(result: unknown): unknown {\n\t\treturn (result as ResultSet).rows[0];\n\t}\n\n\toverride extractRawValuesValueFromBatchResult(result: unknown): unknown {\n\t\treturn (result as ResultSet).rows;\n\t}\n}\n\nexport class LibSQLTransaction<\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends SQLiteTransaction<'async', ResultSet, TFullSchema, TSchema> {\n\tstatic override readonly [entityKind]: string = 'LibSQLTransaction';\n\n\toverride async transaction<T>(transaction: (tx: LibSQLTransaction<TFullSchema, TSchema>) => Promise<T>): Promise<T> {\n\t\tconst savepointName = `sp${this.nestedIndex}`;\n\t\tconst tx = new LibSQLTransaction('async', this.dialect, this.session, this.schema, this.nestedIndex + 1);\n\t\tawait this.session.run(sql.raw(`savepoint ${savepointName}`));\n\t\ttry {\n\t\t\tconst result = await transaction(tx);\n\t\t\tawait this.session.run(sql.raw(`release savepoint ${savepointName}`));\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tawait this.session.run(sql.raw(`rollback to savepoint ${savepointName}`));\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n\nexport class LibSQLPreparedQuery<T extends PreparedQueryConfig = PreparedQueryConfig> extends SQLitePreparedQuery<\n\t{ type: 'async'; run: ResultSet; all: T['all']; get: T['get']; values: T['values']; execute: T['execute'] }\n> {\n\tstatic override readonly [entityKind]: string = 'LibSQLPreparedQuery';\n\n\tconstructor(\n\t\tprivate client: Client,\n\t\tquery: Query,\n\t\tprivate logger: Logger,\n\t\t/** @internal */ public fields: SelectedFieldsOrdered | undefined,\n\t\tprivate tx: Transaction | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tprivate _isResponseInArrayMode: boolean,\n\t\t/** @internal */ public customResultMapper?: (\n\t\t\trows: unknown[][],\n\t\t\tmapColumnValue?: (value: unknown) => unknown,\n\t\t) => unknown,\n\t) {\n\t\tsuper('async', executeMethod, query);\n\t\tthis.customResultMapper = customResultMapper;\n\t\tthis.fields = fields;\n\t}\n\n\trun(placeholderValues?: Record<string, unknown>): Promise<ResultSet> {\n\t\tconst params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n\t\tthis.logger.logQuery(this.query.sql, params);\n\t\tconst stmt: InStatement = { sql: this.query.sql, args: params as InArgs };\n\t\treturn this.tx ? this.tx.execute(stmt) : this.client.execute(stmt);\n\t}\n\n\tasync all(placeholderValues?: Record<string, unknown>): Promise<T['all']> {\n\t\tconst { fields, logger, query, tx, client, customResultMapper } = this;\n\t\tif (!fields && !customResultMapper) {\n\t\t\tconst params = fillPlaceholders(query.params, placeholderValues ?? {});\n\t\t\tlogger.logQuery(query.sql, params);\n\t\t\tconst stmt: InStatement = { sql: query.sql, args: params as InArgs };\n\t\t\treturn (tx ? tx.execute(stmt) : client.execute(stmt)).then(({ rows }) => this.mapAllResult(rows));\n\t\t}\n\n\t\tconst rows = await this.values(placeholderValues) as unknown[][];\n\n\t\treturn this.mapAllResult(rows);\n\t}\n\n\toverride mapAllResult(rows: unknown, isFromBatch?: boolean): unknown {\n\t\tif (isFromBatch) {\n\t\t\trows = (rows as ResultSet).rows;\n\t\t}\n\n\t\tif (!this.fields && !this.customResultMapper) {\n\t\t\treturn (rows as unknown[]).map((row) => normalizeRow(row));\n\t\t}\n\n\t\tif (this.customResultMapper) {\n\t\t\treturn this.customResultMapper(rows as unknown[][], normalizeFieldValue) as T['all'];\n\t\t}\n\n\t\treturn (rows as unknown[]).map((row) => {\n\t\t\treturn mapResultRow(\n\t\t\t\tthis.fields!,\n\t\t\t\tArray.prototype.slice.call(row).map((v) => normalizeFieldValue(v)),\n\t\t\t\tthis.joinsNotNullableMap,\n\t\t\t);\n\t\t});\n\t}\n\n\tasync get(placeholderValues?: Record<string, unknown>): Promise<T['get']> {\n\t\tconst { fields, logger, query, tx, client, customResultMapper } = this;\n\t\tif (!fields && !customResultMapper) {\n\t\t\tconst params = fillPlaceholders(query.params, placeholderValues ?? {});\n\t\t\tlogger.logQuery(query.sql, params);\n\t\t\tconst stmt: InStatement = { sql: query.sql, args: params as InArgs };\n\t\t\treturn (tx ? tx.execute(stmt) : client.execute(stmt)).then(({ rows }) => this.mapGetResult(rows));\n\t\t}\n\n\t\tconst rows = await this.values(placeholderValues) as unknown[][];\n\n\t\treturn this.mapGetResult(rows);\n\t}\n\n\toverride mapGetResult(rows: unknown, isFromBatch?: boolean): unknown {\n\t\tif (isFromBatch) {\n\t\t\trows = (rows as ResultSet).rows;\n\t\t}\n\n\t\tconst row = (rows as unknown[])[0];\n\n\t\tif (!this.fields && !this.customResultMapper) {\n\t\t\treturn normalizeRow(row);\n\t\t}\n\n\t\tif (!row) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (this.customResultMapper) {\n\t\t\treturn this.customResultMapper(rows as unknown[][], normalizeFieldValue) as T['get'];\n\t\t}\n\n\t\treturn mapResultRow(\n\t\t\tthis.fields!,\n\t\t\tArray.prototype.slice.call(row).map((v) => normalizeFieldValue(v)),\n\t\t\tthis.joinsNotNullableMap,\n\t\t);\n\t}\n\n\tvalues(placeholderValues?: Record<string, unknown>): Promise<T['values']> {\n\t\tconst params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n\t\tthis.logger.logQuery(this.query.sql, params);\n\t\tconst stmt: InStatement = { sql: this.query.sql, args: params as InArgs };\n\t\treturn (this.tx ? this.tx.execute(stmt) : this.client.execute(stmt)).then(({ rows }) => rows) as Promise<\n\t\t\tT['values']\n\t\t>;\n\t}\n\n\t/** @internal */\n\tisResponseInArrayMode(): boolean {\n\t\treturn this._isResponseInArrayMode;\n\t}\n}\n\nfunction normalizeRow(obj: any) {\n\t// The libSQL node-sqlite3 compatibility wrapper returns rows\n\t// that can be accessed both as objects and arrays. Let's\n\t// turn them into objects what's what other SQLite drivers\n\t// do.\n\treturn Object.keys(obj).reduce((acc: Record<string, any>, key) => {\n\t\tif (Object.prototype.propertyIsEnumerable.call(obj, key)) {\n\t\t\tacc[key] = obj[key];\n\t\t}\n\t\treturn acc;\n\t}, {});\n}\n\nfunction normalizeFieldValue(value: unknown) {\n\tif (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) { // eslint-disable-line no-instanceof/no-instanceof\n\t\tif (typeof Buffer !== 'undefined') {\n\t\t\tif (!(value instanceof Buffer)) { // eslint-disable-line no-instanceof/no-instanceof\n\t\t\t\treturn Buffer.from(value);\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\t\tif (typeof TextDecoder !== 'undefined') {\n\t\t\treturn new TextDecoder().decode(value);\n\t\t}\n\t\tthrow new Error('TextDecoder is not available. Please provide either Buffer or TextDecoder polyfill.');\n\t}\n\treturn value;\n}\n", "import { entityKind } from '~/entity.ts';\nimport { DrizzleError, TransactionRollbackError } from '~/errors.ts';\nimport type { TablesRelationalConfig } from '~/relations.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport type { Query, SQL } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect, SQLiteSyncDialect } from '~/sqlite-core/dialect.ts';\n// import { QueryPromise } from '../index.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport { BaseSQLiteDatabase } from './db.ts';\nimport type { SQLiteRaw } from './query-builders/raw.ts';\nimport type { SelectedFieldsOrdered } from './query-builders/select.types.ts';\n\nexport interface PreparedQueryConfig {\n\ttype: 'sync' | 'async';\n\trun: unknown;\n\tall: unknown;\n\tget: unknown;\n\tvalues: unknown;\n\texecute: unknown;\n}\n\nexport class ExecuteResultSync<T> extends QueryPromise<T> {\n\tstatic override readonly [entityKind]: string = 'ExecuteResultSync';\n\n\tconstructor(private resultCb: () => T) {\n\t\tsuper();\n\t}\n\n\toverride async execute(): Promise<T> {\n\t\treturn this.resultCb();\n\t}\n\n\tsync(): T {\n\t\treturn this.resultCb();\n\t}\n}\n\nexport type ExecuteResult<TType extends 'sync' | 'async', TResult> = TType extends 'async' ? Promise<TResult>\n\t: ExecuteResultSync<TResult>;\n\nexport abstract class SQLitePreparedQuery<T extends PreparedQueryConfig> implements PreparedQuery {\n\tstatic readonly [entityKind]: string = 'PreparedQuery';\n\n\t/** @internal */\n\tjoinsNotNullableMap?: Record<string, boolean>;\n\n\tconstructor(\n\t\tprivate mode: 'sync' | 'async',\n\t\tprivate executeMethod: SQLiteExecuteMethod,\n\t\tprotected query: Query,\n\t) {}\n\n\tgetQuery(): Query {\n\t\treturn this.query;\n\t}\n\n\tabstract run(placeholderValues?: Record<string, unknown>): Result<T['type'], T['run']>;\n\n\tmapRunResult(result: unknown, _isFromBatch?: boolean): unknown {\n\t\treturn result;\n\t}\n\n\tabstract all(placeholderValues?: Record<string, unknown>): Result<T['type'], T['all']>;\n\n\tmapAllResult(_result: unknown, _isFromBatch?: boolean): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tabstract get(placeholderValues?: Record<string, unknown>): Result<T['type'], T['get']>;\n\n\tmapGetResult(_result: unknown, _isFromBatch?: boolean): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tabstract values(placeholderValues?: Record<string, unknown>): Result<T['type'], T['values']>;\n\n\texecute(placeholderValues?: Record<string, unknown>): ExecuteResult<T['type'], T['execute']> {\n\t\tif (this.mode === 'async') {\n\t\t\treturn this[this.executeMethod](placeholderValues) as ExecuteResult<T['type'], T['execute']>;\n\t\t}\n\t\treturn new ExecuteResultSync(() => this[this.executeMethod](placeholderValues));\n\t}\n\n\tmapResult(response: unknown, isFromBatch?: boolean) {\n\t\tswitch (this.executeMethod) {\n\t\t\tcase 'run': {\n\t\t\t\treturn this.mapRunResult(response, isFromBatch);\n\t\t\t}\n\t\t\tcase 'all': {\n\t\t\t\treturn this.mapAllResult(response, isFromBatch);\n\t\t\t}\n\t\t\tcase 'get': {\n\t\t\t\treturn this.mapGetResult(response, isFromBatch);\n\t\t\t}\n\t\t}\n\t}\n\n\t/** @internal */\n\tabstract isResponseInArrayMode(): boolean;\n}\n\nexport interface SQLiteTransactionConfig {\n\tbehavior?: 'deferred' | 'immediate' | 'exclusive';\n}\n\nexport type SQLiteExecuteMethod = 'run' | 'all' | 'get';\n\nexport abstract class SQLiteSession<\n\tTResultKind extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteSession';\n\n\tconstructor(\n\t\t/** @internal */\n\t\treadonly dialect: { sync: SQLiteSyncDialect; async: SQLiteAsyncDialect }[TResultKind],\n\t) {}\n\n\tabstract prepareQuery(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tisResponseInArrayMode: boolean,\n\t\tcustomResultMapper?: (rows: unknown[][], mapColumnValue?: (value: unknown) => unknown) => unknown,\n\t): SQLitePreparedQuery<PreparedQueryConfig & { type: TResultKind }>;\n\n\tprepareOneTimeQuery(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tisResponseInArrayMode: boolean,\n\t): SQLitePreparedQuery<PreparedQueryConfig & { type: TResultKind }> {\n\t\treturn this.prepareQuery(query, fields, executeMethod, isResponseInArrayMode);\n\t}\n\n\tabstract transaction<T>(\n\t\ttransaction: (tx: SQLiteTransaction<TResultKind, TRunResult, TFullSchema, TSchema>) => Result<TResultKind, T>,\n\t\tconfig?: SQLiteTransactionConfig,\n\t): Result<TResultKind, T>;\n\n\trun(query: SQL): Result<TResultKind, TRunResult> {\n\t\tconst staticQuery = this.dialect.sqlToQuery(query);\n\t\ttry {\n\t\t\treturn this.prepareOneTimeQuery(staticQuery, undefined, 'run', false).run() as Result<TResultKind, TRunResult>;\n\t\t} catch (err) {\n\t\t\tthrow new DrizzleError({ cause: err, message: `Failed to run the query '${staticQuery.sql}'` });\n\t\t}\n\t}\n\n\t/** @internal */\n\textractRawRunValueFromBatchResult(result: unknown) {\n\t\treturn result;\n\t}\n\n\tall<T = unknown>(query: SQL): Result<TResultKind, T[]> {\n\t\treturn this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), undefined, 'run', false).all() as Result<\n\t\t\tTResultKind,\n\t\t\tT[]\n\t\t>;\n\t}\n\n\t/** @internal */\n\textractRawAllValueFromBatchResult(_result: unknown): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tget<T = unknown>(query: SQL): Result<TResultKind, T> {\n\t\treturn this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), undefined, 'run', false).get() as Result<\n\t\t\tTResultKind,\n\t\t\tT\n\t\t>;\n\t}\n\n\t/** @internal */\n\textractRawGetValueFromBatchResult(_result: unknown): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tvalues<T extends any[] = unknown[]>(\n\t\tquery: SQL,\n\t): Result<TResultKind, T[]> {\n\t\treturn this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), undefined, 'run', false).values() as Result<\n\t\t\tTResultKind,\n\t\t\tT[]\n\t\t>;\n\t}\n\n\tasync count(sql: SQL) {\n\t\tconst result = await this.values(sql) as [[number]];\n\n\t\treturn result[0][0];\n\t}\n\n\t/** @internal */\n\textractRawValuesValueFromBatchResult(_result: unknown): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n}\n\nexport type Result<TKind extends 'sync' | 'async', TResult> = { sync: TResult; async: Promise<TResult> }[TKind];\n\nexport type DBResult<TKind extends 'sync' | 'async', TResult> = { sync: TResult; async: SQLiteRaw<TResult> }[TKind];\n\nexport abstract class SQLiteTransaction<\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends BaseSQLiteDatabase<TResultType, TRunResult, TFullSchema, TSchema> {\n\tstatic override readonly [entityKind]: string = 'SQLiteTransaction';\n\n\tconstructor(\n\t\tresultType: TResultType,\n\t\tdialect: { sync: SQLiteSyncDialect; async: SQLiteAsyncDialect }[TResultType],\n\t\tsession: SQLiteSession<TResultType, TRunResult, TFullSchema, TSchema>,\n\t\tprotected schema: {\n\t\t\tfullSchema: Record<string, unknown>;\n\t\t\tschema: TSchema;\n\t\t\ttableNamesMap: Record<string, string>;\n\t\t} | undefined,\n\t\tprotected readonly nestedIndex = 0,\n\t) {\n\t\tsuper(resultType, dialect, session, schema);\n\t}\n\n\trollback(): never {\n\t\tthrow new TransactionRollbackError();\n\t}\n}\n", "import { sql } from 'drizzle-orm'\nimport { integer, sqliteTable, text } from 'drizzle-orm/sqlite-core'\nimport { createInsertSchema, createSelectSchema } from 'drizzle-zod'\n\n// sqlite column types docs: https://orm.drizzle.team/docs/column-types/sqlite\n\nconst defaultNow = sql`(cast((julianday('now') - 2440587.5) * 86400000 as integer))`\n\n// In sqlite, there is no boolean type, so we use integer with 0 or 1 to represent boolean\n// In sqlite, there is no timestamp type\nexport const tasks = sqliteTable('tasks', {\n  // specify the column name and the type\n  id: integer('id', { mode: 'number' }).primaryKey({ autoIncrement: true }),\n  name: text('name').notNull(),\n  done: integer('done', { mode: 'boolean' }).notNull().default(false),\n  createdAt: integer('created_at', { mode: 'timestamp' }).default(defaultNow),\n  // createdAt: integer('created_at', { mode: 'timestamp' }).$defaultFn(() => new Date()),\n  updatedAt: integer('updated_at', { mode: 'timestamp' }).default(defaultNow).$onUpdate(() => new Date()),\n  // updatedAt: integer('updated_at', { mode: 'timestamp' }).$defaultFn(() => new Date()).$onUpdate(() => new Date()),\n})\n\n// $defaultFn(() => new Date()) doesn't work in drizzle studio, maybe because JavaScript function isn't available in drizzle studio\n\n// use this schema inside openAPI definition, it will always sync with the table definition here\nexport const selectTasksSchema = createSelectSchema(tasks)\n\n// use this schema to validate the incoming request body before we insert it into the database\n// id, createdAt, updatedAt are not needed in the request body, that will be generated by the database\nexport const insertTaskSchema = createInsertSchema(tasks, {\n  name: name => name.min(1).max(255),\n})\n  .required({\n    done: true,\n  })\n  .omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n  })\n\n// create a schema for updating/patching a task by id\n// One of the difference between patch request and create request is all of the fields are optional in patch request\n// zod partial() method is used to make all of the fields optional\nexport const patchTaskSchema = insertTaskSchema.partial()\n\n// export const patchTaskSchema = insertTaskSchema.partial().superRefine((data, ctx) => {\n//   if (Object.keys(data).length === 0) {\n//     ctx.addIssue({\n//       code: 'custom',\n//       message: ZOD_ERROR_MESSAGES.NO_UPDATES,\n//       params: { code: ZOD_ERROR_CODES.INVALID_UPDATES },\n//     })\n//   }\n// })\n", null, null, null, null, "import * as HttpStatusPhrases from 'stoker/http-status-phrases'\nimport { createMessageObjectSchema } from 'stoker/openapi/schemas'\n\nexport const ZOD_ERROR_MESSAGES = {\n  REQUIRED: 'Required',\n  EXPECTED_NUMBER: 'Expected number, received nan',\n  NO_UPDATES: 'No updates provided',\n}\n\nexport const ZOD_ERROR_CODES = {\n  INVALID_UPDATES: 'invalid_updates',\n}\n\n// any endpoint that needs to respond with not found, can use this validator\nexport const notFoundSchema = createMessageObjectSchema(HttpStatusPhrases.NOT_FOUND)\n", "// we're defining the OpenAPI/Swagger documentation for all the routes in this file\n\nimport { createRoute, z } from '@hono/zod-openapi'\nimport * as HttpStatusCodes from 'stoker/http-status-codes'\nimport { jsonContentRequired } from 'stoker/openapi/helpers'\nimport jsonContent from 'stoker/openapi/helpers/json-content'\nimport { createErrorSchema, IdParamsSchema } from 'stoker/openapi/schemas'\n\nimport { insertTaskSchema, patchTaskSchema, selectTasksSchema } from '@/db/schema'\nimport { notFoundSchema } from '@/lib/constants'\n\nconst tags = ['tasks']\n\n// create route definition for listing all tasks\nexport const list = createRoute({\n  tags,\n  path: '/tasks',\n  method: 'get',\n  responses: {\n    // 200: OK\n    [HttpStatusCodes.OK]: jsonContent(\n      z.array(selectTasksSchema), // schema validator, it will validate the response body\n      'The list of tasks',\n    ),\n  },\n})\n\n// create route definition for creating a task\nexport const create = createRoute({\n  tags,\n  path: '/tasks',\n  method: 'post',\n  request: {\n    body: jsonContentRequired(\n      insertTaskSchema, // validate the request body\n      'The task to create',\n    ),\n  },\n  responses: {\n    [HttpStatusCodes.OK]: jsonContent(\n      selectTasksSchema, // return the exact single task that was created\n      'The created task',\n    ),\n    // 422: Unprocessable Entity\n    [HttpStatusCodes.UNPROCESSABLE_ENTITY]: jsonContent(\n      // we need a schema that describes all of the possible issues\n      createErrorSchema(selectTasksSchema),\n      'The validation error',\n    ),\n  },\n})\n\n// We need to validate the incoming request body before we insert it into the database\n\n// create route definition for getting a task by id\nexport const getOneById = createRoute({\n  tags,\n  path: '/tasks/{id}',\n  method: 'get',\n  request: {\n    params: IdParamsSchema, // validate the params: id parameter\n  },\n  responses: {\n    [HttpStatusCodes.OK]: jsonContent(\n      selectTasksSchema, // return a single task\n      'The requested task',\n    ),\n    [HttpStatusCodes.NOT_FOUND]: jsonContent(\n      notFoundSchema,\n      'The task not found',\n    ),\n    [HttpStatusCodes.UNPROCESSABLE_ENTITY]: jsonContent(\n      createErrorSchema(IdParamsSchema),\n      'Invalid ID error',\n    ),\n  },\n})\n\n// create a patch route for updating an existing task by Id: this one will be a combination of getOneById route and create route\nexport const patchById = createRoute({\n  tags,\n  path: '/tasks/{id}',\n  method: 'patch',\n  request: {\n    params: IdParamsSchema, // validate the params\n    body: jsonContentRequired(\n      patchTaskSchema, // as same as insertTaskSchema here\n      'The task updates',\n    ), // validate the request body\n  },\n  responses: {\n    [HttpStatusCodes.OK]: jsonContent(\n      selectTasksSchema,\n      'The updated task',\n    ),\n    [HttpStatusCodes.NOT_FOUND]: jsonContent(\n      notFoundSchema,\n      'The task not found',\n    ),\n\n    [HttpStatusCodes.UNPROCESSABLE_ENTITY]: jsonContent(\n      createErrorSchema(patchTaskSchema).or(createErrorSchema(IdParamsSchema)),\n      'The validation error',\n    ),\n    // jsonContent helper function accepts a zod union type\n    // anyOf in JSON leads to a lot of problem in code generation\n    // so we want oneOf instead of anyOf\n    // here is jsonContentOneOf helper function kicks in\n\n    // [HttpStatusCodes.UNPROCESSABLE_ENTITY]: jsonContentOneOf(\n    //   // jsonContent helper function accepts a zod union type\n    //   [\n    //     createErrorSchema(patchTaskSchema), // validation error in the body\n    //     createErrorSchema(IdParamsSchema), // validation error in the url params\n    //   ],\n    //   'The validation error(s)',\n    // ),\n  },\n})\n// Eventually, we still use jsonContent instead of jsonContentOneOf, because jsonContentOneOf make TS inference error when doing patch test case\n// TS inference error disappeared if we use jsonContent helper function.\n// I think it's kinda cutting corners, is there any better way to fix it? having both jsonContentOneOf and TS inference?\n\n// create a delete route for deleting a task by id\nexport const deleteById = createRoute({\n  tags,\n  path: '/tasks/{id}',\n  method: 'delete',\n  request: {\n    params: IdParamsSchema, // validate the params\n    // we don't expect any request body for delete request\n  },\n  // when delete successfully, we won't response with the deleted task from database\n  // we will response with a message of 204\n  responses: {\n    [HttpStatusCodes.NO_CONTENT]: {\n      description: 'The task deleted',\n    },\n    [HttpStatusCodes.NOT_FOUND]: jsonContent(\n      notFoundSchema,\n      'The task not found',\n    ),\n    [HttpStatusCodes.UNPROCESSABLE_ENTITY]: jsonContent(\n      createErrorSchema(IdParamsSchema),\n      'Invalid ID error',\n    ),\n  },\n})\n\n// This is the type that defines the specific route, we need to use it when we're defining our handler\nexport type ListRoute = typeof list\nexport type CreateRoute = typeof create\nexport type GetOneByIdRoute = typeof getOneById\nexport type PatchByIdRoute = typeof patchById\nexport type DeleteByIdRoute = typeof deleteById\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n"],
  "mappings": "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AAgB;AAAA,MAChB,YAAY;AAAA,MACZ,gBAAgB;AAAA,MAChB,kBAAkB;AAAA,MAClB,oBAAoB;AAAA,MACpB,qBAAqB;AAAA,MACrB,QAAQ;AAAA,MACR,mBAAmB;AAAA,MACnB,YAAY;AAAA,MACZ,6BAA6B;AAAA,MAC7B,4BAA4B;AAAA,MAC5B,gBAAgB;AAAA,MAChB,cAAc;AAAA,MACd,eAAe;AAAA,MACf,kBAAkB;AAAA,MAClB,WAAW;AAAA,MACX,QAAQ;AAAA,MACR,iBAAiB;AAAA,IAClB;AAAA;AAAA;;;AC7NA,IAEM,eACO,kBACE,MAAM,UAAU,UAGzB,cAMJ,OACA,aACA,6BACA,qCACA,qCACA,aACA,mBACA,MACA,MACA,OACA,OACA,QACA,WACA,mBACA,iBACA,UACA,KACA,WACA,QACA,YACA,MACA,aACA,KACA,YACA,UACA,UACA,cACA,UACA,wBACA,iBACAC,SACA,MACA,WACA,eACA,aACA,IACA,KACA,MACA,KACA,MACA,iBACA,qBACA,cACA,SACA,oBACA,gBACA,QACA,eACA,iBACA,sBACA,QACA,OACA,QACA,OACA,kBACA,kBACA,OACA,QACA,SACA,UACA,QACA,YACA,gBACA,YACA,WACAC,SACA,SACA,MACA,UACA,SACA,SACA,SACA,QACA,WACA,QACA,SACA,SACA,QACA,WACA,QACA,YACA,YACA,SACA,cACA,UACA,eACA,WACA,eACA,iBACA,mBACA,oBACA,OACA,kBACA,WACA,4BACA,2BACA,eACA,aACA,cACA,iBACA,UACA,OACA,gBAEI,UA8GC;AAnOP,IAAAC,gBAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAC;AAAA;AACA;AACA,IAAM,gBAAgB,WAAW,SAAS;AACnC,IAAM,mBAAmB,cAAc;AACvC,KAAM,EAAE,MAAM,UAAU,aAAa;AAAA,MAC1C;AAAA,IACF;AACA,IAAM,eAAe,IAAI,QAAa;AAAA,MACpC,KAAK,cAAc;AAAA,MACnB;AAAA,MACA;AAAA,IACF,CAAC;AACM,KAAM;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MAC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",
  "names": ["init_performance", "performance", "init_performance", "PerformanceMark", "type", "init_performance", "init_performance", "performance", "init_performance", "init_performance", "clear", "count", "countReset", "createTask", "debug", "dir", "dirxml", "error", "group", "groupCollapsed", "groupEnd", "info", "log", "profile", "profileEnd", "table", "time", "timeEnd", "timeLog", "timeStamp", "trace", "warn", "init_console", "init_performance", "init_console", "init_performance", "hrtime", "init_performance", "dir", "env", "count", "init_performance", "init_performance", "init_performance", "init_performance", "type", "cwd", "hrtime", "assert", "init_process", "init_performance", "init_process", "init_performance", "init_performance", "format", "type", "init_performance", "format", "pino", "_console", "serialize", "transmit", "level", "setOpts", "self", "write", "send", "init_performance", "init_performance", "env", "argv", "platform", "string", "close", "open", "colors", "init_performance", "cb", "init_performance", "once", "init_performance", "once", "exitCode", "init_performance", "init_performance", "init_promises", "init_performance", "ReadStream", "WriteStream", "init_performance", "error", "access", "appendFile", "chown", "chmod", "copyFile", "cp", "lchown", "lchmod", "link", "lstat", "lutimes", "mkdir", "mkdtemp", "realpath", "open", "opendir", "readdir", "readFile", "readlink", "rename", "rm", "rmdir", "stat", "symlink", "truncate", "unlink", "utimes", "writeFile", "statfs", "watch", "glob", "init_performance", "init_fs", "init_performance", "init_promises", "ReadStream", "WriteStream", "access", "appendFile", "chmod", "chown", "copyFile", "cp", "glob", "lchmod", "lchown", "link", "lstat", "lutimes", "mkdir", "mkdtemp", "open", "opendir", "readFile", "readdir", "readlink", "realpath", "rename", "rm", "rmdir", "stat", "statfs", "symlink", "truncate", "unlink", "utimes", "watch", "writeFile", "init_performance", "init_fs", "init_performance", "once", "error", "init_performance", "libDefault", "init_performance", "init_performance", "list", "error", "self", "init_performance", "EventEmitter", "init_performance", "type", "init_performance", "EventEmitter", "init_performance", "init_performance", "getEnvironmentData", "setEnvironmentData", "markAsUntransferable", "init_performance", "init_performance", "parentPort", "workerData", "close", "error", "init_performance", "init_performance", "init_performance", "libDefault", "init_performance", "isString", "init_performance", "init_performance", "default", "TextDecoder", "TextEncoder", "init_performance", "TextDecoder", "TextEncoder", "callbackify", "debug", "log", "types", "init_util", "init_performance", "isString", "init_performance", "init_util", "libDefault", "init_performance", "init_performance", "libDefault", "init_performance", "init_performance", "EventEmitter", "inherits", "path", "assert", "mkdir", "fsync", "write", "err", "n", "releasedBufObj", "onError", "error", "release", "init_performance", "init_performance", "clear", "init_performance", "isMainThread", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "log", "create", "LegacyCache", "_a", "type", "object", "index", "error", "array", "blob", "isArray", "init_performance", "log", "context", "init_performance", "_typeof", "obj", "global", "_", "D", "y", "pad", "getDayName", "today_d", "today_m", "today_y", "yesterday_d", "yesterday_m", "yesterday_y", "tomorrow_d", "tomorrow_m", "tomorrow_y", "getWeek", "getDayOfWeek", "kindOf", "init_performance", "init_performance", "init_performance", "init_performance", "log", "init_performance", "isObject", "init_performance", "init_performance", "EOL", "init_performance", "init_performance", "init_performance", "log", "context", "plain", "errors", "pretty", "init_performance", "isObject", "log", "context", "init_performance", "log", "context", "init_performance", "log", "context", "init_performance", "log", "context", "init_performance", "log", "context", "time", "init_performance", "init_performance", "text", "parse", "init_performance", "pretty", "isObject", "log", "init_performance", "pretty", "context", "dlopen", "init_constants", "init_performance", "arch", "uptime", "platform", "release", "version", "init_performance", "init_constants", "dlopen", "info", "encode", "init_performance", "init_performance", "init_performance", "init_constants", "init_performance", "constants", "init_performance", "init_constants", "subtle", "webcrypto", "init_crypto", "init_performance", "constants", "init_performance", "init_crypto", "init_performance", "path", "crypto", "version", "parse", "error", "debug", "config", "require_main", "init_performance", "env", "value", "expand", "init_performance", "count", "error", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "customTheme", "app", "init_performance", "init_performance", "init_performance", "_a", "_b", "_c", "_d", "_e", "_f", "object", "type", "error", "_a", "referencedSchema", "path", "config", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "path", "path", "init_performance", "init_performance", "init_performance", "init_performance", "util", "object", "array", "objectUtil", "error", "path", "errorUtil", "path", "error", "errorMap", "version", "ctx", "result", "issues", "types", "type", "elements", "processed", "r", "_a", "_b", "ZodFirstPartyTypeKind", "init_performance", "init_performance", "init_performance", "init_performance", "onError", "context", "isError", "init_performance", "init_performance", "init_performance", "path", "raw", "init_performance", "context", "text", "object", "init_performance", "init_performance", "path", "app", "env", "context", "init_performance", "init_performance", "init_performance", "context", "init_performance", "path", "path", "routes", "path2", "init_performance", "init_performance", "path", "routes", "router", "init_performance", "init_performance", "init_performance", "Node", "path", "Node", "path", "Hono", "Hono", "validator", "config", "path", "app", "init_performance", "init_performance", "init_performance", "OK", "init_performance", "NOT_FOUND", "NOT_FOUND", "init_performance", "OK", "env", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "error", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "object", "init_performance", "env", "global", "platform", "env", "import_pino", "pinoLogger", "pino", "pretty", "init_performance", "parseEnv", "env", "error", "app", "parseEnv", "pinoLogger", "init_performance", "OK", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "type", "table", "config", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "config", "table", "init_performance", "init_performance", "table", "init_performance", "value", "startFrom", "array", "config", "table", "ref", "actions", "type", "table", "config", "init_performance", "sql", "init_performance", "init_performance", "version", "version", "otel", "rawTracer", "init_performance", "init_performance", "table", "config", "param", "sql", "list", "raw", "placeholder", "name", "SQL", "name", "table", "init_performance", "init_performance", "config", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "result", "path", "table", "type", "table", "init_performance", "isNull", "exists", "init_performance", "table", "config", "exists", "isNull", "relations", "table", "config", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "text", "path", "init_performance", "init_performance", "version", "asc", "encodeURI", "cp", "isValid", "config", "path", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "array", "count", "init_performance", "init_performance", "freeId", "init_performance", "init_performance", "init_performance", "error", "init_performance", "error", "sql", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "sql", "init_performance", "init_performance", "init_performance", "entry", "error", "error", "init_performance", "init_performance", "Stmt", "Batch", "BatchStep", "BatchCond", "Request", "Stmt", "Batch", "init_performance", "init_performance", "Stmt", "Value", "NamedArg", "Batch", "BatchStep", "BatchCond", "ClientMsg", "Stmt", "Batch", "init_performance", "init_performance", "Error", "Value", "type", "error", "type", "error", "Error", "Response", "init_performance", "init_performance", "Error", "StmtResult", "Col", "Value", "BatchResult", "CursorEntry", "DescribeResult", "DescribeParam", "DescribeCol", "ServerMsg", "Error", "StmtResult", "BatchResult", "CursorEntry", "DescribeResult", "ClientMsg", "error", "ServerMsg", "sql", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "type", "error", "Error", "init_performance", "PipelineRespBody", "StreamResult", "StreamResponse", "Error", "StmtResult", "BatchResult", "DescribeResult", "CursorRespBody", "CursorRespBody", "CursorEntry", "error", "init_performance", "Stmt", "Batch", "init_performance", "PipelineReqBody", "StreamRequest", "CloseStreamReq", "Stmt", "Batch", "CursorReqBody", "sql", "error", "fetch", "PipelineReqBody", "CursorReqBody", "PipelineRespBody", "error", "fetch", "init_performance", "init_performance", "version", "sql", "init_performance", "config", "WsClient", "promiseLimit", "version", "sql", "init_performance", "import_promise_limit", "_createClient", "config", "HttpClient", "sqlCacheCapacity", "promiseLimit", "version", "sql", "config", "_createClient", "init_performance", "init_performance", "init_performance", "init_performance", "config", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "ForeignKeyBuilder", "config", "table", "ForeignKey", "init_performance", "uniqueKeyName", "table", "UniqueConstraintBuilder", "table", "UniqueConstraint", "UniqueOnConstraintBuilder", "uniqueKeyName", "config", "table", "ref", "actions", "ForeignKeyBuilder", "uniqueKeyName", "table", "config", "init_performance", "table", "config", "init_performance", "config", "table", "init_performance", "table", "config", "init_performance", "table", "init_performance", "config", "table", "InlineForeignKeys", "name", "table", "table", "init_performance", "init_performance", "init_performance", "init_performance", "table", "init_performance", "config", "table", "type", "select", "sql", "joinOn", "field", "init_performance", "init_performance", "config", "table", "on", "type", "self", "table", "config", "init_performance", "table", "on", "init_performance", "init_performance", "table", "config", "init_performance", "self", "table", "config", "init_performance", "init_performance", "sql", "rows", "config", "drizzle", "config", "init_performance", "isPgEnum", "z", "zod", "coerce", "integer", "columns", "isPgEnum", "env", "init_performance", "NOT_FOUND", "tasks", "OK", "NOT_FOUND", "init_performance", "list", "OK", "create", "getOneById", "patchById", "deleteById", "router", "list", "create", "getOneById", "patchById", "deleteById", "init_performance", "env", "init_performance", "env", "error", "init_performance", "env", "env", "type"]
}
