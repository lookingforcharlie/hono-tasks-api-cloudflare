import { sql } from 'drizzle-orm'
import { integer, sqliteTable, text } from 'drizzle-orm/sqlite-core'
import { createInsertSchema, createSelectSchema } from 'drizzle-zod'

// sqlite column types docs: https://orm.drizzle.team/docs/column-types/sqlite

const defaultNow = sql`(cast((julianday('now') - 2440587.5) * 86400000 as integer))`

// In sqlite, there is no boolean type, so we use integer with 0 or 1 to represent boolean
// In sqlite, there is no timestamp type
export const tasks = sqliteTable('tasks', {
  // specify the column name and the type
  id: integer('id', { mode: 'number' }).primaryKey({ autoIncrement: true }),
  name: text('name').notNull(),
  done: integer('done', { mode: 'boolean' }).notNull().default(false),
  createdAt: integer('created_at', { mode: 'timestamp' }).default(defaultNow),
  // createdAt: integer('created_at', { mode: 'timestamp' }).$defaultFn(() => new Date()),
  updatedAt: integer('updated_at', { mode: 'timestamp' }).default(defaultNow).$onUpdate(() => new Date()),
  // updatedAt: integer('updated_at', { mode: 'timestamp' }).$defaultFn(() => new Date()).$onUpdate(() => new Date()),
})

// $defaultFn(() => new Date()) doesn't work in drizzle studio, maybe because JavaScript function isn't available in drizzle studio

// use this schema inside openAPI definition, it will always sync with the table definition here
export const selectTasksSchema = createSelectSchema(tasks)

// use this schema to validate the incoming request body before we insert it into the database
// id, createdAt, updatedAt are not needed in the request body, that will be generated by the database
export const insertTaskSchema = createInsertSchema(tasks, {
  name: name => name.min(1).max(255),
})
  .required({
    done: true,
  })
  .omit({
    id: true,
    createdAt: true,
    updatedAt: true,
  })

// create a schema for updating/patching a task by id
// One of the difference between patch request and create request is all of the fields are optional in patch request
// zod partial() method is used to make all of the fields optional
export const patchTaskSchema = insertTaskSchema.partial()

// export const patchTaskSchema = insertTaskSchema.partial().superRefine((data, ctx) => {
//   if (Object.keys(data).length === 0) {
//     ctx.addIssue({
//       code: 'custom',
//       message: ZOD_ERROR_MESSAGES.NO_UPDATES,
//       params: { code: ZOD_ERROR_CODES.INVALID_UPDATES },
//     })
//   }
// })
